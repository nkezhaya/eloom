(()=>{var dl=Object.defineProperty;var ul=(i,t,e)=>t in i?dl(i,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):i[t]=e;var C=(i,t,e)=>(ul(i,typeof t!="symbol"?t+"":t,e),e);(function(){var i=t();function t(){if(typeof window.CustomEvent=="function")return window.CustomEvent;function n(o,r){r=r||{bubbles:!1,cancelable:!1,detail:void 0};var a=document.createEvent("CustomEvent");return a.initCustomEvent(o,r.bubbles,r.cancelable,r.detail),a}return n.prototype=window.Event.prototype,n}function e(n,o){var r=document.createElement("input");return r.type="hidden",r.name=n,r.value=o,r}function s(n,o){var r=n.getAttribute("data-to"),a=e("_method",n.getAttribute("data-method")),l=e("_csrf_token",n.getAttribute("data-csrf")),h=document.createElement("form"),c=document.createElement("input"),d=n.getAttribute("target");h.method=n.getAttribute("data-method")==="get"?"get":"post",h.action=r,h.style.display="none",d?h.target=d:o&&(h.target="_blank"),h.appendChild(l),h.appendChild(a),document.body.appendChild(h),c.type="submit",h.appendChild(c),c.click()}window.addEventListener("click",function(n){var o=n.target;if(!n.defaultPrevented)for(;o&&o.getAttribute;){var r=new i("phoenix.link.click",{bubbles:!0,cancelable:!0});if(!o.dispatchEvent(r))return n.preventDefault(),n.stopImmediatePropagation(),!1;if(o.getAttribute("data-method")&&o.getAttribute("data-to"))return s(o,n.metaKey||n.shiftKey),n.preventDefault(),!1;o=o.parentNode}},!1),window.addEventListener("phoenix.link.click",function(n){var o=n.target.getAttribute("data-confirm");o&&!window.confirm(o)&&n.preventDefault()},!1)})();function ti(i){return i+.5|0}var Gt=(i,t,e)=>Math.max(Math.min(i,e),t);function Ze(i){return Gt(ti(i*2.55),0,255)}function Zt(i){return Gt(ti(i*255),0,255)}function Nt(i){return Gt(ti(i/2.55)/100,0,1)}function fo(i){return Gt(ti(i*100),0,100)}var yt={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,A:10,B:11,C:12,D:13,E:14,F:15,a:10,b:11,c:12,d:13,e:14,f:15},Bs=[..."0123456789ABCDEF"],fl=i=>Bs[i&15],gl=i=>Bs[(i&240)>>4]+Bs[i&15],Bi=i=>(i&240)>>4===(i&15),pl=i=>Bi(i.r)&&Bi(i.g)&&Bi(i.b)&&Bi(i.a);function ml(i){var t=i.length,e;return i[0]==="#"&&(t===4||t===5?e={r:255&yt[i[1]]*17,g:255&yt[i[2]]*17,b:255&yt[i[3]]*17,a:t===5?yt[i[4]]*17:255}:(t===7||t===9)&&(e={r:yt[i[1]]<<4|yt[i[2]],g:yt[i[3]]<<4|yt[i[4]],b:yt[i[5]]<<4|yt[i[6]],a:t===9?yt[i[7]]<<4|yt[i[8]]:255})),e}var bl=(i,t)=>i<255?t(i):"";function vl(i){var t=pl(i)?fl:gl;return i?"#"+t(i.r)+t(i.g)+t(i.b)+bl(i.a,t):void 0}var _l=/^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;function bo(i,t,e){let s=t*Math.min(e,1-e),n=(o,r=(o+i/30)%12)=>e-s*Math.max(Math.min(r-3,9-r,1),-1);return[n(0),n(8),n(4)]}function xl(i,t,e){let s=(n,o=(n+i/60)%6)=>e-e*t*Math.max(Math.min(o,4-o,1),0);return[s(5),s(3),s(1)]}function yl(i,t,e){let s=bo(i,1,.5),n;for(t+e>1&&(n=1/(t+e),t*=n,e*=n),n=0;n<3;n++)s[n]*=1-t-e,s[n]+=t;return s}function wl(i,t,e,s,n){return i===n?(t-e)/s+(t<e?6:0):t===n?(e-i)/s+2:(i-t)/s+4}function zs(i){let e=i.r/255,s=i.g/255,n=i.b/255,o=Math.max(e,s,n),r=Math.min(e,s,n),a=(o+r)/2,l,h,c;return o!==r&&(c=o-r,h=a>.5?c/(2-o-r):c/(o+r),l=wl(e,s,n,c,o),l=l*60+.5),[l|0,h||0,a]}function js(i,t,e,s){return(Array.isArray(t)?i(t[0],t[1],t[2]):i(t,e,s)).map(Zt)}function Vs(i,t,e){return js(bo,i,t,e)}function kl(i,t,e){return js(yl,i,t,e)}function Sl(i,t,e){return js(xl,i,t,e)}function vo(i){return(i%360+360)%360}function Al(i){let t=_l.exec(i),e=255,s;if(!t)return;t[5]!==s&&(e=t[6]?Ze(+t[5]):Zt(+t[5]));let n=vo(+t[2]),o=+t[3]/100,r=+t[4]/100;return t[1]==="hwb"?s=kl(n,o,r):t[1]==="hsv"?s=Sl(n,o,r):s=Vs(n,o,r),{r:s[0],g:s[1],b:s[2],a:e}}function Cl(i,t){var e=zs(i);e[0]=vo(e[0]+t),e=Vs(e),i.r=e[0],i.g=e[1],i.b=e[2]}function Pl(i){if(!i)return;let t=zs(i),e=t[0],s=fo(t[1]),n=fo(t[2]);return i.a<255?`hsla(${e}, ${s}%, ${n}%, ${Nt(i.a)})`:`hsl(${e}, ${s}%, ${n}%)`}var go={x:"dark",Z:"light",Y:"re",X:"blu",W:"gr",V:"medium",U:"slate",A:"ee",T:"ol",S:"or",B:"ra",C:"lateg",D:"ights",R:"in",Q:"turquois",E:"hi",P:"ro",O:"al",N:"le",M:"de",L:"yello",F:"en",K:"ch",G:"arks",H:"ea",I:"ightg",J:"wh"},po={OiceXe:"f0f8ff",antiquewEte:"faebd7",aqua:"ffff",aquamarRe:"7fffd4",azuY:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"0",blanKedOmond:"ffebcd",Xe:"ff",XeviTet:"8a2be2",bPwn:"a52a2a",burlywood:"deb887",caMtXe:"5f9ea0",KartYuse:"7fff00",KocTate:"d2691e",cSO:"ff7f50",cSnflowerXe:"6495ed",cSnsilk:"fff8dc",crimson:"dc143c",cyan:"ffff",xXe:"8b",xcyan:"8b8b",xgTMnPd:"b8860b",xWay:"a9a9a9",xgYF:"6400",xgYy:"a9a9a9",xkhaki:"bdb76b",xmagFta:"8b008b",xTivegYF:"556b2f",xSange:"ff8c00",xScEd:"9932cc",xYd:"8b0000",xsOmon:"e9967a",xsHgYF:"8fbc8f",xUXe:"483d8b",xUWay:"2f4f4f",xUgYy:"2f4f4f",xQe:"ced1",xviTet:"9400d3",dAppRk:"ff1493",dApskyXe:"bfff",dimWay:"696969",dimgYy:"696969",dodgerXe:"1e90ff",fiYbrick:"b22222",flSOwEte:"fffaf0",foYstWAn:"228b22",fuKsia:"ff00ff",gaRsbSo:"dcdcdc",ghostwEte:"f8f8ff",gTd:"ffd700",gTMnPd:"daa520",Way:"808080",gYF:"8000",gYFLw:"adff2f",gYy:"808080",honeyMw:"f0fff0",hotpRk:"ff69b4",RdianYd:"cd5c5c",Rdigo:"4b0082",ivSy:"fffff0",khaki:"f0e68c",lavFMr:"e6e6fa",lavFMrXsh:"fff0f5",lawngYF:"7cfc00",NmoncEffon:"fffacd",ZXe:"add8e6",ZcSO:"f08080",Zcyan:"e0ffff",ZgTMnPdLw:"fafad2",ZWay:"d3d3d3",ZgYF:"90ee90",ZgYy:"d3d3d3",ZpRk:"ffb6c1",ZsOmon:"ffa07a",ZsHgYF:"20b2aa",ZskyXe:"87cefa",ZUWay:"778899",ZUgYy:"778899",ZstAlXe:"b0c4de",ZLw:"ffffe0",lime:"ff00",limegYF:"32cd32",lRF:"faf0e6",magFta:"ff00ff",maPon:"800000",VaquamarRe:"66cdaa",VXe:"cd",VScEd:"ba55d3",VpurpN:"9370db",VsHgYF:"3cb371",VUXe:"7b68ee",VsprRggYF:"fa9a",VQe:"48d1cc",VviTetYd:"c71585",midnightXe:"191970",mRtcYam:"f5fffa",mistyPse:"ffe4e1",moccasR:"ffe4b5",navajowEte:"ffdead",navy:"80",Tdlace:"fdf5e6",Tive:"808000",TivedBb:"6b8e23",Sange:"ffa500",SangeYd:"ff4500",ScEd:"da70d6",pOegTMnPd:"eee8aa",pOegYF:"98fb98",pOeQe:"afeeee",pOeviTetYd:"db7093",papayawEp:"ffefd5",pHKpuff:"ffdab9",peru:"cd853f",pRk:"ffc0cb",plum:"dda0dd",powMrXe:"b0e0e6",purpN:"800080",YbeccapurpN:"663399",Yd:"ff0000",Psybrown:"bc8f8f",PyOXe:"4169e1",saddNbPwn:"8b4513",sOmon:"fa8072",sandybPwn:"f4a460",sHgYF:"2e8b57",sHshell:"fff5ee",siFna:"a0522d",silver:"c0c0c0",skyXe:"87ceeb",UXe:"6a5acd",UWay:"708090",UgYy:"708090",snow:"fffafa",sprRggYF:"ff7f",stAlXe:"4682b4",tan:"d2b48c",teO:"8080",tEstN:"d8bfd8",tomato:"ff6347",Qe:"40e0d0",viTet:"ee82ee",JHt:"f5deb3",wEte:"ffffff",wEtesmoke:"f5f5f5",Lw:"ffff00",LwgYF:"9acd32"};function Ml(){let i={},t=Object.keys(po),e=Object.keys(go),s,n,o,r,a;for(s=0;s<t.length;s++){for(r=a=t[s],n=0;n<e.length;n++)o=e[n],a=a.replace(o,go[o]);o=parseInt(po[r],16),i[a]=[o>>16&255,o>>8&255,o&255]}return i}var zi;function Tl(i){zi||(zi=Ml(),zi.transparent=[0,0,0,0]);let t=zi[i.toLowerCase()];return t&&{r:t[0],g:t[1],b:t[2],a:t.length===4?t[3]:255}}var El=/^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/;function Rl(i){let t=El.exec(i),e=255,s,n,o;if(t){if(t[7]!==s){let r=+t[7];e=t[8]?Ze(r):Gt(r*255,0,255)}return s=+t[1],n=+t[3],o=+t[5],s=255&(t[2]?Ze(s):Gt(s,0,255)),n=255&(t[4]?Ze(n):Gt(n,0,255)),o=255&(t[6]?Ze(o):Gt(o,0,255)),{r:s,g:n,b:o,a:e}}}function Dl(i){return i&&(i.a<255?`rgba(${i.r}, ${i.g}, ${i.b}, ${Nt(i.a)})`:`rgb(${i.r}, ${i.g}, ${i.b})`)}var Ns=i=>i<=.0031308?i*12.92:Math.pow(i,1/2.4)*1.055-.055,Pe=i=>i<=.04045?i/12.92:Math.pow((i+.055)/1.055,2.4);function Ol(i,t,e){let s=Pe(Nt(i.r)),n=Pe(Nt(i.g)),o=Pe(Nt(i.b));return{r:Zt(Ns(s+e*(Pe(Nt(t.r))-s))),g:Zt(Ns(n+e*(Pe(Nt(t.g))-n))),b:Zt(Ns(o+e*(Pe(Nt(t.b))-o))),a:i.a+e*(t.a-i.a)}}function ji(i,t,e){if(i){let s=zs(i);s[t]=Math.max(0,Math.min(s[t]+s[t]*e,t===0?360:1)),s=Vs(s),i.r=s[0],i.g=s[1],i.b=s[2]}}function _o(i,t){return i&&Object.assign(t||{},i)}function mo(i){var t={r:0,g:0,b:0,a:255};return Array.isArray(i)?i.length>=3&&(t={r:i[0],g:i[1],b:i[2],a:255},i.length>3&&(t.a=Zt(i[3]))):(t=_o(i,{r:0,g:0,b:0,a:1}),t.a=Zt(t.a)),t}function Ll(i){return i.charAt(0)==="r"?Rl(i):Al(i)}var Qe=class i{constructor(t){if(t instanceof i)return t;let e=typeof t,s;e==="object"?s=mo(t):e==="string"&&(s=ml(t)||Tl(t)||Ll(t)),this._rgb=s,this._valid=!!s}get valid(){return this._valid}get rgb(){var t=_o(this._rgb);return t&&(t.a=Nt(t.a)),t}set rgb(t){this._rgb=mo(t)}rgbString(){return this._valid?Dl(this._rgb):void 0}hexString(){return this._valid?vl(this._rgb):void 0}hslString(){return this._valid?Pl(this._rgb):void 0}mix(t,e){if(t){let s=this.rgb,n=t.rgb,o,r=e===o?.5:e,a=2*r-1,l=s.a-n.a,h=((a*l===-1?a:(a+l)/(1+a*l))+1)/2;o=1-h,s.r=255&h*s.r+o*n.r+.5,s.g=255&h*s.g+o*n.g+.5,s.b=255&h*s.b+o*n.b+.5,s.a=r*s.a+(1-r)*n.a,this.rgb=s}return this}interpolate(t,e){return t&&(this._rgb=Ol(this._rgb,t._rgb,e)),this}clone(){return new i(this.rgb)}alpha(t){return this._rgb.a=Zt(t),this}clearer(t){let e=this._rgb;return e.a*=1-t,this}greyscale(){let t=this._rgb,e=ti(t.r*.3+t.g*.59+t.b*.11);return t.r=t.g=t.b=e,this}opaquer(t){let e=this._rgb;return e.a*=1+t,this}negate(){let t=this._rgb;return t.r=255-t.r,t.g=255-t.g,t.b=255-t.b,this}lighten(t){return ji(this._rgb,2,t),this}darken(t){return ji(this._rgb,2,-t),this}saturate(t){return ji(this._rgb,1,t),this}desaturate(t){return ji(this._rgb,1,-t),this}rotate(t){return Cl(this._rgb,t),this}};function Tt(){}var Eo=(()=>{let i=0;return()=>i++})();function F(i){return i==null}function W(i){if(Array.isArray&&Array.isArray(i))return!0;let t=Object.prototype.toString.call(i);return t.slice(0,7)==="[object"&&t.slice(-6)==="Array]"}function H(i){return i!==null&&Object.prototype.toString.call(i)==="[object Object]"}function J(i){return(typeof i=="number"||i instanceof Number)&&isFinite(+i)}function dt(i,t){return J(i)?i:t}function O(i,t){return typeof i>"u"?t:i}var Ro=(i,t)=>typeof i=="string"&&i.endsWith("%")?parseFloat(i)/100:+i/t,Xs=(i,t)=>typeof i=="string"&&i.endsWith("%")?parseFloat(i)/100*t:+i;function V(i,t,e){if(i&&typeof i.call=="function")return i.apply(e,t)}function z(i,t,e,s){let n,o,r;if(W(i))if(o=i.length,s)for(n=o-1;n>=0;n--)t.call(e,i[n],n);else for(n=0;n<o;n++)t.call(e,i[n],n);else if(H(i))for(r=Object.keys(i),o=r.length,n=0;n<o;n++)t.call(e,i[r[n]],r[n])}function si(i,t){let e,s,n,o;if(!i||!t||i.length!==t.length)return!1;for(e=0,s=i.length;e<s;++e)if(n=i[e],o=t[e],n.datasetIndex!==o.datasetIndex||n.index!==o.index)return!1;return!0}function Xi(i){if(W(i))return i.map(Xi);if(H(i)){let t=Object.create(null),e=Object.keys(i),s=e.length,n=0;for(;n<s;++n)t[e[n]]=Xi(i[e[n]]);return t}return i}function Do(i){return["__proto__","prototype","constructor"].indexOf(i)===-1}function Il(i,t,e,s){if(!Do(i))return;let n=t[i],o=e[i];H(n)&&H(o)?Te(n,o,s):t[i]=Xi(o)}function Te(i,t,e){let s=W(t)?t:[t],n=s.length;if(!H(i))return i;e=e||{};let o=e.merger||Il,r;for(let a=0;a<n;++a){if(r=s[a],!H(r))continue;let l=Object.keys(r);for(let h=0,c=l.length;h<c;++h)o(l[h],i,r,e)}return i}function Re(i,t){return Te(i,t,{merger:Fl})}function Fl(i,t,e){if(!Do(i))return;let s=t[i],n=e[i];H(s)&&H(n)?Re(s,n):Object.prototype.hasOwnProperty.call(t,i)||(t[i]=Xi(n))}var xo={"":i=>i,x:i=>i.x,y:i=>i.y};function Hl(i){let t=i.split("."),e=[],s="";for(let n of t)s+=n,s.endsWith("\\")?s=s.slice(0,-1)+".":(e.push(s),s="");return e}function Nl(i){let t=Hl(i);return e=>{for(let s of t){if(s==="")break;e=e&&e[s]}return e}}function jt(i,t){return(xo[t]||(xo[t]=Nl(t)))(i)}function Ki(i){return i.charAt(0).toUpperCase()+i.slice(1)}var De=i=>typeof i<"u",Bt=i=>typeof i=="function",Ys=(i,t)=>{if(i.size!==t.size)return!1;for(let e of i)if(!t.has(e))return!1;return!0};function Oo(i){return i.type==="mouseup"||i.type==="click"||i.type==="contextmenu"}var U=Math.PI,X=2*U,Bl=X+U,Yi=Number.POSITIVE_INFINITY,zl=U/180,q=U/2,he=U/4,yo=U*2/3,zt=Math.log10,St=Math.sign;function Oe(i,t,e){return Math.abs(i-t)<e}function Js(i){let t=Math.round(i);i=Oe(i,t,i/1e3)?t:i;let e=Math.pow(10,Math.floor(zt(i))),s=i/e;return(s<=1?1:s<=2?2:s<=5?5:10)*e}function Lo(i){let t=[],e=Math.sqrt(i),s;for(s=1;s<e;s++)i%s===0&&(t.push(s),t.push(i/s));return e===(e|0)&&t.push(e),t.sort((n,o)=>n-o).pop(),t}function jl(i){return typeof i=="symbol"||typeof i=="object"&&i!==null&&!(Symbol.toPrimitive in i||"toString"in i||"valueOf"in i)}function ue(i){return!jl(i)&&!isNaN(parseFloat(i))&&isFinite(i)}function Io(i,t){let e=Math.round(i);return e-t<=i&&e+t>=i}function qs(i,t,e){let s,n,o;for(s=0,n=i.length;s<n;s++)o=i[s][e],isNaN(o)||(t.min=Math.min(t.min,o),t.max=Math.max(t.max,o))}function wt(i){return i*(U/180)}function Gi(i){return i*(180/U)}function Ks(i){if(!J(i))return;let t=1,e=0;for(;Math.round(i*t)/t!==i;)t*=10,e++;return e}function Gs(i,t){let e=t.x-i.x,s=t.y-i.y,n=Math.sqrt(e*e+s*s),o=Math.atan2(s,e);return o<-.5*U&&(o+=X),{angle:o,distance:n}}function Ji(i,t){return Math.sqrt(Math.pow(t.x-i.x,2)+Math.pow(t.y-i.y,2))}function Vl(i,t){return(i-t+Bl)%X-U}function ct(i){return(i%X+X)%X}function Le(i,t,e,s){let n=ct(i),o=ct(t),r=ct(e),a=ct(o-n),l=ct(r-n),h=ct(n-o),c=ct(n-r);return n===o||n===r||s&&o===r||a>l&&h<c}function tt(i,t,e){return Math.max(t,Math.min(e,i))}function Fo(i){return tt(i,-32768,32767)}function Et(i,t,e,s=1e-6){return i>=Math.min(t,e)-s&&i<=Math.max(t,e)+s}function Zi(i,t,e){e=e||(r=>i[r]<t);let s=i.length-1,n=0,o;for(;s-n>1;)o=n+s>>1,e(o)?n=o:s=o;return{lo:n,hi:s}}var Pt=(i,t,e,s)=>Zi(i,e,s?n=>{let o=i[n][t];return o<e||o===e&&i[n+1][t]===e}:n=>i[n][t]<e),Ho=(i,t,e)=>Zi(i,e,s=>i[s][t]>=e);function No(i,t,e){let s=0,n=i.length;for(;s<n&&i[s]<t;)s++;for(;n>s&&i[n-1]>e;)n--;return s>0||n<i.length?i.slice(s,n):i}var Bo=["push","pop","shift","splice","unshift"];function zo(i,t){if(i._chartjs){i._chartjs.listeners.push(t);return}Object.defineProperty(i,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[t]}}),Bo.forEach(e=>{let s="_onData"+Ki(e),n=i[e];Object.defineProperty(i,e,{configurable:!0,enumerable:!1,value(...o){let r=n.apply(this,o);return i._chartjs.listeners.forEach(a=>{typeof a[s]=="function"&&a[s](...o)}),r}})})}function Zs(i,t){let e=i._chartjs;if(!e)return;let s=e.listeners,n=s.indexOf(t);n!==-1&&s.splice(n,1),!(s.length>0)&&(Bo.forEach(o=>{delete i[o]}),delete i._chartjs)}function Qs(i){let t=new Set(i);return t.size===i.length?i:Array.from(t)}var tn=function(){return typeof window>"u"?function(i){return i()}:window.requestAnimationFrame}();function en(i,t){let e=[],s=!1;return function(...n){e=n,s||(s=!0,tn.call(window,()=>{s=!1,i.apply(t,e)}))}}function jo(i,t){let e;return function(...s){return t?(clearTimeout(e),e=setTimeout(i,t,s)):i.apply(this,s),t}}var Qi=i=>i==="start"?"left":i==="end"?"right":"center",st=(i,t,e)=>i==="start"?t:i==="end"?e:(t+e)/2,Vo=(i,t,e,s)=>i===(s?"left":"right")?e:i==="center"?(t+e)/2:t;function sn(i,t,e){let s=t.length,n=0,o=s;if(i._sorted){let{iScale:r,vScale:a,_parsed:l}=i,h=i.dataset&&i.dataset.options?i.dataset.options.spanGaps:null,c=r.axis,{min:d,max:u,minDefined:g,maxDefined:f}=r.getUserBounds();if(g){if(n=Math.min(Pt(l,c,d).lo,e?s:Pt(t,c,r.getPixelForValue(d)).lo),h){let p=l.slice(0,n+1).reverse().findIndex(m=>!F(m[a.axis]));n-=Math.max(0,p)}n=tt(n,0,s-1)}if(f){let p=Math.max(Pt(l,r.axis,u,!0).hi+1,e?0:Pt(t,c,r.getPixelForValue(u),!0).hi+1);if(h){let m=l.slice(p-1).findIndex(v=>!F(v[a.axis]));p+=Math.max(0,m)}o=tt(p,n,s)-n}else o=s-n}return{start:n,count:o}}function nn(i){let{xScale:t,yScale:e,_scaleRanges:s}=i,n={xmin:t.min,xmax:t.max,ymin:e.min,ymax:e.max};if(!s)return i._scaleRanges=n,!0;let o=s.xmin!==t.min||s.xmax!==t.max||s.ymin!==e.min||s.ymax!==e.max;return Object.assign(s,n),o}var Vi=i=>i===0||i===1,wo=(i,t,e)=>-(Math.pow(2,10*(i-=1))*Math.sin((i-t)*X/e)),ko=(i,t,e)=>Math.pow(2,-10*i)*Math.sin((i-t)*X/e)+1,Me={linear:i=>i,easeInQuad:i=>i*i,easeOutQuad:i=>-i*(i-2),easeInOutQuad:i=>(i/=.5)<1?.5*i*i:-.5*(--i*(i-2)-1),easeInCubic:i=>i*i*i,easeOutCubic:i=>(i-=1)*i*i+1,easeInOutCubic:i=>(i/=.5)<1?.5*i*i*i:.5*((i-=2)*i*i+2),easeInQuart:i=>i*i*i*i,easeOutQuart:i=>-((i-=1)*i*i*i-1),easeInOutQuart:i=>(i/=.5)<1?.5*i*i*i*i:-.5*((i-=2)*i*i*i-2),easeInQuint:i=>i*i*i*i*i,easeOutQuint:i=>(i-=1)*i*i*i*i+1,easeInOutQuint:i=>(i/=.5)<1?.5*i*i*i*i*i:.5*((i-=2)*i*i*i*i+2),easeInSine:i=>-Math.cos(i*q)+1,easeOutSine:i=>Math.sin(i*q),easeInOutSine:i=>-.5*(Math.cos(U*i)-1),easeInExpo:i=>i===0?0:Math.pow(2,10*(i-1)),easeOutExpo:i=>i===1?1:-Math.pow(2,-10*i)+1,easeInOutExpo:i=>Vi(i)?i:i<.5?.5*Math.pow(2,10*(i*2-1)):.5*(-Math.pow(2,-10*(i*2-1))+2),easeInCirc:i=>i>=1?i:-(Math.sqrt(1-i*i)-1),easeOutCirc:i=>Math.sqrt(1-(i-=1)*i),easeInOutCirc:i=>(i/=.5)<1?-.5*(Math.sqrt(1-i*i)-1):.5*(Math.sqrt(1-(i-=2)*i)+1),easeInElastic:i=>Vi(i)?i:wo(i,.075,.3),easeOutElastic:i=>Vi(i)?i:ko(i,.075,.3),easeInOutElastic(i){return Vi(i)?i:i<.5?.5*wo(i*2,.1125,.45):.5+.5*ko(i*2-1,.1125,.45)},easeInBack(i){return i*i*((1.70158+1)*i-1.70158)},easeOutBack(i){return(i-=1)*i*((1.70158+1)*i+1.70158)+1},easeInOutBack(i){let t=1.70158;return(i/=.5)<1?.5*(i*i*(((t*=1.525)+1)*i-t)):.5*((i-=2)*i*(((t*=1.525)+1)*i+t)+2)},easeInBounce:i=>1-Me.easeOutBounce(1-i),easeOutBounce(i){return i<1/2.75?7.5625*i*i:i<2/2.75?7.5625*(i-=1.5/2.75)*i+.75:i<2.5/2.75?7.5625*(i-=2.25/2.75)*i+.9375:7.5625*(i-=2.625/2.75)*i+.984375},easeInOutBounce:i=>i<.5?Me.easeInBounce(i*2)*.5:Me.easeOutBounce(i*2-1)*.5+.5};function on(i){if(i&&typeof i=="object"){let t=i.toString();return t==="[object CanvasPattern]"||t==="[object CanvasGradient]"}return!1}function rn(i){return on(i)?i:new Qe(i)}function $s(i){return on(i)?i:new Qe(i).saturate(.5).darken(.1).hexString()}var $l=["x","y","borderWidth","radius","tension"],Wl=["color","borderColor","backgroundColor"];function Ul(i){i.set("animation",{delay:void 0,duration:1e3,easing:"easeOutQuart",fn:void 0,from:void 0,loop:void 0,to:void 0,type:void 0}),i.describe("animation",{_fallback:!1,_indexable:!1,_scriptable:t=>t!=="onProgress"&&t!=="onComplete"&&t!=="fn"}),i.set("animations",{colors:{type:"color",properties:Wl},numbers:{type:"number",properties:$l}}),i.describe("animations",{_fallback:"animation"}),i.set("transitions",{active:{animation:{duration:400}},resize:{animation:{duration:0}},show:{animations:{colors:{from:"transparent"},visible:{type:"boolean",duration:0}}},hide:{animations:{colors:{to:"transparent"},visible:{type:"boolean",easing:"linear",fn:t=>t|0}}}})}function Xl(i){i.set("layout",{autoPadding:!0,padding:{top:0,right:0,bottom:0,left:0}})}var So=new Map;function Yl(i,t){t=t||{};let e=i+JSON.stringify(t),s=So.get(e);return s||(s=new Intl.NumberFormat(i,t),So.set(e,s)),s}function Ie(i,t,e){return Yl(t,e).format(i)}var $o={values(i){return W(i)?i:""+i},numeric(i,t,e){if(i===0)return"0";let s=this.chart.options.locale,n,o=i;if(e.length>1){let h=Math.max(Math.abs(e[0].value),Math.abs(e[e.length-1].value));(h<1e-4||h>1e15)&&(n="scientific"),o=Jl(i,e)}let r=zt(Math.abs(o)),a=isNaN(r)?1:Math.max(Math.min(-1*Math.floor(r),20),0),l={notation:n,minimumFractionDigits:a,maximumFractionDigits:a};return Object.assign(l,this.options.ticks.format),Ie(i,s,l)},logarithmic(i,t,e){if(i===0)return"0";let s=e[t].significand||i/Math.pow(10,Math.floor(zt(i)));return[1,2,3,5,10,15].includes(s)||t>.8*e.length?$o.numeric.call(this,i,t,e):""}};function Jl(i,t){let e=t.length>3?t[2].value-t[1].value:t[1].value-t[0].value;return Math.abs(e)>=1&&i!==Math.floor(i)&&(e=i-Math.floor(i)),e}var ni={formatters:$o};function ql(i){i.set("scale",{display:!0,offset:!1,reverse:!1,beginAtZero:!1,bounds:"ticks",clip:!0,grace:0,grid:{display:!0,lineWidth:1,drawOnChartArea:!0,drawTicks:!0,tickLength:8,tickWidth:(t,e)=>e.lineWidth,tickColor:(t,e)=>e.color,offset:!1},border:{display:!0,dash:[],dashOffset:0,width:1},title:{display:!1,text:"",padding:{top:4,bottom:4}},ticks:{minRotation:0,maxRotation:50,mirror:!1,textStrokeWidth:0,textStrokeColor:"",padding:3,display:!0,autoSkip:!0,autoSkipPadding:3,labelOffset:0,callback:ni.formatters.values,minor:{},major:{},align:"center",crossAlign:"near",showLabelBackdrop:!1,backdropColor:"rgba(255, 255, 255, 0.75)",backdropPadding:2}}),i.route("scale.ticks","color","","color"),i.route("scale.grid","color","","borderColor"),i.route("scale.border","color","","borderColor"),i.route("scale.title","color","","color"),i.describe("scale",{_fallback:!1,_scriptable:t=>!t.startsWith("before")&&!t.startsWith("after")&&t!=="callback"&&t!=="parser",_indexable:t=>t!=="borderDash"&&t!=="tickBorderDash"&&t!=="dash"}),i.describe("scales",{_fallback:"scale"}),i.describe("scale.ticks",{_scriptable:t=>t!=="backdropPadding"&&t!=="callback",_indexable:t=>t!=="backdropPadding"})}var te=Object.create(null),ts=Object.create(null);function ei(i,t){if(!t)return i;let e=t.split(".");for(let s=0,n=e.length;s<n;++s){let o=e[s];i=i[o]||(i[o]=Object.create(null))}return i}function Ws(i,t,e){return typeof t=="string"?Te(ei(i,t),e):Te(ei(i,""),t)}var Us=class{constructor(t,e){this.animation=void 0,this.backgroundColor="rgba(0,0,0,0.1)",this.borderColor="rgba(0,0,0,0.1)",this.color="#666",this.datasets={},this.devicePixelRatio=s=>s.chart.platform.getDevicePixelRatio(),this.elements={},this.events=["mousemove","mouseout","click","touchstart","touchmove"],this.font={family:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",size:12,style:"normal",lineHeight:1.2,weight:null},this.hover={},this.hoverBackgroundColor=(s,n)=>$s(n.backgroundColor),this.hoverBorderColor=(s,n)=>$s(n.borderColor),this.hoverColor=(s,n)=>$s(n.color),this.indexAxis="x",this.interaction={mode:"nearest",intersect:!0,includeInvisible:!1},this.maintainAspectRatio=!0,this.onHover=null,this.onClick=null,this.parsing=!0,this.plugins={},this.responsive=!0,this.scale=void 0,this.scales={},this.showLine=!0,this.drawActiveElementsOnTop=!0,this.describe(t),this.apply(e)}set(t,e){return Ws(this,t,e)}get(t){return ei(this,t)}describe(t,e){return Ws(ts,t,e)}override(t,e){return Ws(te,t,e)}route(t,e,s,n){let o=ei(this,t),r=ei(this,s),a="_"+e;Object.defineProperties(o,{[a]:{value:o[e],writable:!0},[e]:{enumerable:!0,get(){let l=this[a],h=r[n];return H(l)?Object.assign({},h,l):O(l,h)},set(l){this[a]=l}}})}apply(t){t.forEach(e=>e(this))}},Y=new Us({_scriptable:i=>!i.startsWith("on"),_indexable:i=>i!=="events",hover:{_fallback:"interaction"},interaction:{_scriptable:!1,_indexable:!1}},[Ul,Xl,ql]);function Kl(i){return!i||F(i.size)||F(i.family)?null:(i.style?i.style+" ":"")+(i.weight?i.weight+" ":"")+i.size+"px "+i.family}function ii(i,t,e,s,n){let o=t[n];return o||(o=t[n]=i.measureText(n).width,e.push(n)),o>s&&(s=o),s}function Wo(i,t,e,s){s=s||{};let n=s.data=s.data||{},o=s.garbageCollect=s.garbageCollect||[];s.font!==t&&(n=s.data={},o=s.garbageCollect=[],s.font=t),i.save(),i.font=t;let r=0,a=e.length,l,h,c,d,u;for(l=0;l<a;l++)if(d=e[l],d!=null&&!W(d))r=ii(i,n,o,r,d);else if(W(d))for(h=0,c=d.length;h<c;h++)u=d[h],u!=null&&!W(u)&&(r=ii(i,n,o,r,u));i.restore();let g=o.length/2;if(g>e.length){for(l=0;l<g;l++)delete n[o[l]];o.splice(0,g)}return r}function ee(i,t,e){let s=i.currentDevicePixelRatio,n=e!==0?Math.max(e/2,.5):0;return Math.round((t-n)*s)/s+n}function an(i,t){!t&&!i||(t=t||i.getContext("2d"),t.save(),t.resetTransform(),t.clearRect(0,0,i.width,i.height),t.restore())}function es(i,t,e,s){ln(i,t,e,s,null)}function ln(i,t,e,s,n){let o,r,a,l,h,c,d,u,g=t.pointStyle,f=t.rotation,p=t.radius,m=(f||0)*zl;if(g&&typeof g=="object"&&(o=g.toString(),o==="[object HTMLImageElement]"||o==="[object HTMLCanvasElement]")){i.save(),i.translate(e,s),i.rotate(m),i.drawImage(g,-g.width/2,-g.height/2,g.width,g.height),i.restore();return}if(!(isNaN(p)||p<=0)){switch(i.beginPath(),g){default:n?i.ellipse(e,s,n/2,p,0,0,X):i.arc(e,s,p,0,X),i.closePath();break;case"triangle":c=n?n/2:p,i.moveTo(e+Math.sin(m)*c,s-Math.cos(m)*p),m+=yo,i.lineTo(e+Math.sin(m)*c,s-Math.cos(m)*p),m+=yo,i.lineTo(e+Math.sin(m)*c,s-Math.cos(m)*p),i.closePath();break;case"rectRounded":h=p*.516,l=p-h,r=Math.cos(m+he)*l,d=Math.cos(m+he)*(n?n/2-h:l),a=Math.sin(m+he)*l,u=Math.sin(m+he)*(n?n/2-h:l),i.arc(e-d,s-a,h,m-U,m-q),i.arc(e+u,s-r,h,m-q,m),i.arc(e+d,s+a,h,m,m+q),i.arc(e-u,s+r,h,m+q,m+U),i.closePath();break;case"rect":if(!f){l=Math.SQRT1_2*p,c=n?n/2:l,i.rect(e-c,s-l,2*c,2*l);break}m+=he;case"rectRot":d=Math.cos(m)*(n?n/2:p),r=Math.cos(m)*p,a=Math.sin(m)*p,u=Math.sin(m)*(n?n/2:p),i.moveTo(e-d,s-a),i.lineTo(e+u,s-r),i.lineTo(e+d,s+a),i.lineTo(e-u,s+r),i.closePath();break;case"crossRot":m+=he;case"cross":d=Math.cos(m)*(n?n/2:p),r=Math.cos(m)*p,a=Math.sin(m)*p,u=Math.sin(m)*(n?n/2:p),i.moveTo(e-d,s-a),i.lineTo(e+d,s+a),i.moveTo(e+u,s-r),i.lineTo(e-u,s+r);break;case"star":d=Math.cos(m)*(n?n/2:p),r=Math.cos(m)*p,a=Math.sin(m)*p,u=Math.sin(m)*(n?n/2:p),i.moveTo(e-d,s-a),i.lineTo(e+d,s+a),i.moveTo(e+u,s-r),i.lineTo(e-u,s+r),m+=he,d=Math.cos(m)*(n?n/2:p),r=Math.cos(m)*p,a=Math.sin(m)*p,u=Math.sin(m)*(n?n/2:p),i.moveTo(e-d,s-a),i.lineTo(e+d,s+a),i.moveTo(e+u,s-r),i.lineTo(e-u,s+r);break;case"line":r=n?n/2:Math.cos(m)*p,a=Math.sin(m)*p,i.moveTo(e-r,s-a),i.lineTo(e+r,s+a);break;case"dash":i.moveTo(e,s),i.lineTo(e+Math.cos(m)*(n?n/2:p),s+Math.sin(m)*p);break;case!1:i.closePath();break}i.fill(),t.borderWidth>0&&i.stroke()}}function Mt(i,t,e){return e=e||.5,!t||i&&i.x>t.left-e&&i.x<t.right+e&&i.y>t.top-e&&i.y<t.bottom+e}function oi(i,t){i.save(),i.beginPath(),i.rect(t.left,t.top,t.right-t.left,t.bottom-t.top),i.clip()}function ri(i){i.restore()}function Uo(i,t,e,s,n){if(!t)return i.lineTo(e.x,e.y);if(n==="middle"){let o=(t.x+e.x)/2;i.lineTo(o,t.y),i.lineTo(o,e.y)}else n==="after"!=!!s?i.lineTo(t.x,e.y):i.lineTo(e.x,t.y);i.lineTo(e.x,e.y)}function Xo(i,t,e,s){if(!t)return i.lineTo(e.x,e.y);i.bezierCurveTo(s?t.cp1x:t.cp2x,s?t.cp1y:t.cp2y,s?e.cp2x:e.cp1x,s?e.cp2y:e.cp1y,e.x,e.y)}function Gl(i,t){t.translation&&i.translate(t.translation[0],t.translation[1]),F(t.rotation)||i.rotate(t.rotation),t.color&&(i.fillStyle=t.color),t.textAlign&&(i.textAlign=t.textAlign),t.textBaseline&&(i.textBaseline=t.textBaseline)}function Zl(i,t,e,s,n){if(n.strikethrough||n.underline){let o=i.measureText(s),r=t-o.actualBoundingBoxLeft,a=t+o.actualBoundingBoxRight,l=e-o.actualBoundingBoxAscent,h=e+o.actualBoundingBoxDescent,c=n.strikethrough?(l+h)/2:h;i.strokeStyle=i.fillStyle,i.beginPath(),i.lineWidth=n.decorationWidth||2,i.moveTo(r,c),i.lineTo(a,c),i.stroke()}}function Ql(i,t){let e=i.fillStyle;i.fillStyle=t.color,i.fillRect(t.left,t.top,t.width,t.height),i.fillStyle=e}function ie(i,t,e,s,n,o={}){let r=W(t)?t:[t],a=o.strokeWidth>0&&o.strokeColor!=="",l,h;for(i.save(),i.font=n.string,Gl(i,o),l=0;l<r.length;++l)h=r[l],o.backdrop&&Ql(i,o.backdrop),a&&(o.strokeColor&&(i.strokeStyle=o.strokeColor),F(o.strokeWidth)||(i.lineWidth=o.strokeWidth),i.strokeText(h,e,s,o.maxWidth)),i.fillText(h,e,s,o.maxWidth),Zl(i,e,s,h,o),s+=Number(n.lineHeight);i.restore()}function Fe(i,t){let{x:e,y:s,w:n,h:o,radius:r}=t;i.arc(e+r.topLeft,s+r.topLeft,r.topLeft,1.5*U,U,!0),i.lineTo(e,s+o-r.bottomLeft),i.arc(e+r.bottomLeft,s+o-r.bottomLeft,r.bottomLeft,U,q,!0),i.lineTo(e+n-r.bottomRight,s+o),i.arc(e+n-r.bottomRight,s+o-r.bottomRight,r.bottomRight,q,0,!0),i.lineTo(e+n,s+r.topRight),i.arc(e+n-r.topRight,s+r.topRight,r.topRight,0,-q,!0),i.lineTo(e+r.topLeft,s)}var th=/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/,eh=/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;function ih(i,t){let e=(""+i).match(th);if(!e||e[1]==="normal")return t*1.2;switch(i=+e[2],e[3]){case"px":return i;case"%":i/=100;break}return t*i}var sh=i=>+i||0;function is(i,t){let e={},s=H(t),n=s?Object.keys(t):t,o=H(i)?s?r=>O(i[r],i[t[r]]):r=>i[r]:()=>i;for(let r of n)e[r]=sh(o(r));return e}function hn(i){return is(i,{top:"y",right:"x",bottom:"y",left:"x"})}function se(i){return is(i,["topLeft","topRight","bottomLeft","bottomRight"])}function nt(i){let t=hn(i);return t.width=t.left+t.right,t.height=t.top+t.bottom,t}function Z(i,t){i=i||{},t=t||Y.font;let e=O(i.size,t.size);typeof e=="string"&&(e=parseInt(e,10));let s=O(i.style,t.style);s&&!(""+s).match(eh)&&(console.warn('Invalid font style specified: "'+s+'"'),s=void 0);let n={family:O(i.family,t.family),lineHeight:ih(O(i.lineHeight,t.lineHeight),e),size:e,style:s,weight:O(i.weight,t.weight),string:""};return n.string=Kl(n),n}function He(i,t,e,s){let n=!0,o,r,a;for(o=0,r=i.length;o<r;++o)if(a=i[o],a!==void 0&&(t!==void 0&&typeof a=="function"&&(a=a(t),n=!1),e!==void 0&&W(a)&&(a=a[e%a.length],n=!1),a!==void 0))return s&&!n&&(s.cacheable=!1),a}function Yo(i,t,e){let{min:s,max:n}=i,o=Xs(t,(n-s)/2),r=(a,l)=>e&&a===0?0:a+l;return{min:r(s,-Math.abs(o)),max:r(n,o)}}function Vt(i,t){return Object.assign(Object.create(i),t)}function ss(i,t=[""],e,s,n=()=>i[0]){let o=e||i;typeof s>"u"&&(s=Ko("_fallback",i));let r={[Symbol.toStringTag]:"Object",_cacheable:!0,_scopes:i,_rootScopes:o,_fallback:s,_getTarget:n,override:a=>ss([a,...i],t,o,s)};return new Proxy(r,{deleteProperty(a,l){return delete a[l],delete a._keys,delete i[0][l],!0},get(a,l){return Jo(a,l,()=>dh(l,t,i,a))},getOwnPropertyDescriptor(a,l){return Reflect.getOwnPropertyDescriptor(a._scopes[0],l)},getPrototypeOf(){return Reflect.getPrototypeOf(i[0])},has(a,l){return Co(a).includes(l)},ownKeys(a){return Co(a)},set(a,l,h){let c=a._storage||(a._storage=n());return a[l]=c[l]=h,delete a._keys,!0}})}function de(i,t,e,s){let n={_cacheable:!1,_proxy:i,_context:t,_subProxy:e,_stack:new Set,_descriptors:cn(i,s),setContext:o=>de(i,o,e,s),override:o=>de(i.override(o),t,e,s)};return new Proxy(n,{deleteProperty(o,r){return delete o[r],delete i[r],!0},get(o,r,a){return Jo(o,r,()=>oh(o,r,a))},getOwnPropertyDescriptor(o,r){return o._descriptors.allKeys?Reflect.has(i,r)?{enumerable:!0,configurable:!0}:void 0:Reflect.getOwnPropertyDescriptor(i,r)},getPrototypeOf(){return Reflect.getPrototypeOf(i)},has(o,r){return Reflect.has(i,r)},ownKeys(){return Reflect.ownKeys(i)},set(o,r,a){return i[r]=a,delete o[r],!0}})}function cn(i,t={scriptable:!0,indexable:!0}){let{_scriptable:e=t.scriptable,_indexable:s=t.indexable,_allKeys:n=t.allKeys}=i;return{allKeys:n,scriptable:e,indexable:s,isScriptable:Bt(e)?e:()=>e,isIndexable:Bt(s)?s:()=>s}}var nh=(i,t)=>i?i+Ki(t):t,dn=(i,t)=>H(t)&&i!=="adapters"&&(Object.getPrototypeOf(t)===null||t.constructor===Object);function Jo(i,t,e){if(Object.prototype.hasOwnProperty.call(i,t)||t==="constructor")return i[t];let s=e();return i[t]=s,s}function oh(i,t,e){let{_proxy:s,_context:n,_subProxy:o,_descriptors:r}=i,a=s[t];return Bt(a)&&r.isScriptable(t)&&(a=rh(t,a,i,e)),W(a)&&a.length&&(a=ah(t,a,i,r.isIndexable)),dn(t,a)&&(a=de(a,n,o&&o[t],r)),a}function rh(i,t,e,s){let{_proxy:n,_context:o,_subProxy:r,_stack:a}=e;if(a.has(i))throw new Error("Recursion detected: "+Array.from(a).join("->")+"->"+i);a.add(i);let l=t(o,r||s);return a.delete(i),dn(i,l)&&(l=un(n._scopes,n,i,l)),l}function ah(i,t,e,s){let{_proxy:n,_context:o,_subProxy:r,_descriptors:a}=e;if(typeof o.index<"u"&&s(i))return t[o.index%t.length];if(H(t[0])){let l=t,h=n._scopes.filter(c=>c!==l);t=[];for(let c of l){let d=un(h,n,i,c);t.push(de(d,o,r&&r[i],a))}}return t}function qo(i,t,e){return Bt(i)?i(t,e):i}var lh=(i,t)=>i===!0?t:typeof i=="string"?jt(t,i):void 0;function hh(i,t,e,s,n){for(let o of t){let r=lh(e,o);if(r){i.add(r);let a=qo(r._fallback,e,n);if(typeof a<"u"&&a!==e&&a!==s)return a}else if(r===!1&&typeof s<"u"&&e!==s)return null}return!1}function un(i,t,e,s){let n=t._rootScopes,o=qo(t._fallback,e,s),r=[...i,...n],a=new Set;a.add(s);let l=Ao(a,r,e,o||e,s);return l===null||typeof o<"u"&&o!==e&&(l=Ao(a,r,o,l,s),l===null)?!1:ss(Array.from(a),[""],n,o,()=>ch(t,e,s))}function Ao(i,t,e,s,n){for(;e;)e=hh(i,t,e,s,n);return e}function ch(i,t,e){let s=i._getTarget();t in s||(s[t]={});let n=s[t];return W(n)&&H(e)?e:n||{}}function dh(i,t,e,s){let n;for(let o of t)if(n=Ko(nh(o,i),e),typeof n<"u")return dn(i,n)?un(e,s,i,n):n}function Ko(i,t){for(let e of t){if(!e)continue;let s=e[i];if(typeof s<"u")return s}}function Co(i){let t=i._keys;return t||(t=i._keys=uh(i._scopes)),t}function uh(i){let t=new Set;for(let e of i)for(let s of Object.keys(e).filter(n=>!n.startsWith("_")))t.add(s);return Array.from(t)}function fn(i,t,e,s){let{iScale:n}=i,{key:o="r"}=this._parsing,r=new Array(s),a,l,h,c;for(a=0,l=s;a<l;++a)h=a+e,c=t[h],r[a]={r:n.parse(jt(c,o),h)};return r}var fh=Number.EPSILON||1e-14,Ee=(i,t)=>t<i.length&&!i[t].skip&&i[t],Go=i=>i==="x"?"y":"x";function gh(i,t,e,s){let n=i.skip?t:i,o=t,r=e.skip?t:e,a=Ji(o,n),l=Ji(r,o),h=a/(a+l),c=l/(a+l);h=isNaN(h)?0:h,c=isNaN(c)?0:c;let d=s*h,u=s*c;return{previous:{x:o.x-d*(r.x-n.x),y:o.y-d*(r.y-n.y)},next:{x:o.x+u*(r.x-n.x),y:o.y+u*(r.y-n.y)}}}function ph(i,t,e){let s=i.length,n,o,r,a,l,h=Ee(i,0);for(let c=0;c<s-1;++c)if(l=h,h=Ee(i,c+1),!(!l||!h)){if(Oe(t[c],0,fh)){e[c]=e[c+1]=0;continue}n=e[c]/t[c],o=e[c+1]/t[c],a=Math.pow(n,2)+Math.pow(o,2),!(a<=9)&&(r=3/Math.sqrt(a),e[c]=n*r*t[c],e[c+1]=o*r*t[c])}}function mh(i,t,e="x"){let s=Go(e),n=i.length,o,r,a,l=Ee(i,0);for(let h=0;h<n;++h){if(r=a,a=l,l=Ee(i,h+1),!a)continue;let c=a[e],d=a[s];r&&(o=(c-r[e])/3,a[`cp1${e}`]=c-o,a[`cp1${s}`]=d-o*t[h]),l&&(o=(l[e]-c)/3,a[`cp2${e}`]=c+o,a[`cp2${s}`]=d+o*t[h])}}function bh(i,t="x"){let e=Go(t),s=i.length,n=Array(s).fill(0),o=Array(s),r,a,l,h=Ee(i,0);for(r=0;r<s;++r)if(a=l,l=h,h=Ee(i,r+1),!!l){if(h){let c=h[t]-l[t];n[r]=c!==0?(h[e]-l[e])/c:0}o[r]=a?h?St(n[r-1])!==St(n[r])?0:(n[r-1]+n[r])/2:n[r-1]:n[r]}ph(i,n,o),mh(i,o,t)}function $i(i,t,e){return Math.max(Math.min(i,e),t)}function vh(i,t){let e,s,n,o,r,a=Mt(i[0],t);for(e=0,s=i.length;e<s;++e)r=o,o=a,a=e<s-1&&Mt(i[e+1],t),o&&(n=i[e],r&&(n.cp1x=$i(n.cp1x,t.left,t.right),n.cp1y=$i(n.cp1y,t.top,t.bottom)),a&&(n.cp2x=$i(n.cp2x,t.left,t.right),n.cp2y=$i(n.cp2y,t.top,t.bottom)))}function Zo(i,t,e,s,n){let o,r,a,l;if(t.spanGaps&&(i=i.filter(h=>!h.skip)),t.cubicInterpolationMode==="monotone")bh(i,n);else{let h=s?i[i.length-1]:i[0];for(o=0,r=i.length;o<r;++o)a=i[o],l=gh(h,a,i[Math.min(o+1,r-(s?0:1))%r],t.tension),a.cp1x=l.previous.x,a.cp1y=l.previous.y,a.cp2x=l.next.x,a.cp2y=l.next.y,h=a}t.capBezierPoints&&vh(i,e)}function ns(){return typeof window<"u"&&typeof document<"u"}function os(i){let t=i.parentNode;return t&&t.toString()==="[object ShadowRoot]"&&(t=t.host),t}function qi(i,t,e){let s;return typeof i=="string"?(s=parseInt(i,10),i.indexOf("%")!==-1&&(s=s/100*t.parentNode[e])):s=i,s}var rs=i=>i.ownerDocument.defaultView.getComputedStyle(i,null);function _h(i,t){return rs(i).getPropertyValue(t)}var xh=["top","right","bottom","left"];function ce(i,t,e){let s={};e=e?"-"+e:"";for(let n=0;n<4;n++){let o=xh[n];s[o]=parseFloat(i[t+"-"+o+e])||0}return s.width=s.left+s.right,s.height=s.top+s.bottom,s}var yh=(i,t,e)=>(i>0||t>0)&&(!e||!e.shadowRoot);function wh(i,t){let e=i.touches,s=e&&e.length?e[0]:i,{offsetX:n,offsetY:o}=s,r=!1,a,l;if(yh(n,o,i.target))a=n,l=o;else{let h=t.getBoundingClientRect();a=s.clientX-h.left,l=s.clientY-h.top,r=!0}return{x:a,y:l,box:r}}function ne(i,t){if("native"in i)return i;let{canvas:e,currentDevicePixelRatio:s}=t,n=rs(e),o=n.boxSizing==="border-box",r=ce(n,"padding"),a=ce(n,"border","width"),{x:l,y:h,box:c}=wh(i,e),d=r.left+(c&&a.left),u=r.top+(c&&a.top),{width:g,height:f}=t;return o&&(g-=r.width+a.width,f-=r.height+a.height),{x:Math.round((l-d)/g*e.width/s),y:Math.round((h-u)/f*e.height/s)}}function kh(i,t,e){let s,n;if(t===void 0||e===void 0){let o=i&&os(i);if(!o)t=i.clientWidth,e=i.clientHeight;else{let r=o.getBoundingClientRect(),a=rs(o),l=ce(a,"border","width"),h=ce(a,"padding");t=r.width-h.width-l.width,e=r.height-h.height-l.height,s=qi(a.maxWidth,o,"clientWidth"),n=qi(a.maxHeight,o,"clientHeight")}}return{width:t,height:e,maxWidth:s||Yi,maxHeight:n||Yi}}var Wi=i=>Math.round(i*10)/10;function Qo(i,t,e,s){let n=rs(i),o=ce(n,"margin"),r=qi(n.maxWidth,i,"clientWidth")||Yi,a=qi(n.maxHeight,i,"clientHeight")||Yi,l=kh(i,t,e),{width:h,height:c}=l;if(n.boxSizing==="content-box"){let u=ce(n,"border","width"),g=ce(n,"padding");h-=g.width+u.width,c-=g.height+u.height}return h=Math.max(0,h-o.width),c=Math.max(0,s?h/s:c-o.height),h=Wi(Math.min(h,r,l.maxWidth)),c=Wi(Math.min(c,a,l.maxHeight)),h&&!c&&(c=Wi(h/2)),(t!==void 0||e!==void 0)&&s&&l.height&&c>l.height&&(c=l.height,h=Wi(Math.floor(c*s))),{width:h,height:c}}function gn(i,t,e){let s=t||1,n=Math.floor(i.height*s),o=Math.floor(i.width*s);i.height=Math.floor(i.height),i.width=Math.floor(i.width);let r=i.canvas;return r.style&&(e||!r.style.height&&!r.style.width)&&(r.style.height=`${i.height}px`,r.style.width=`${i.width}px`),i.currentDevicePixelRatio!==s||r.height!==n||r.width!==o?(i.currentDevicePixelRatio=s,r.height=n,r.width=o,i.ctx.setTransform(s,0,0,s,0,0),!0):!1}var tr=function(){let i=!1;try{let t={get passive(){return i=!0,!1}};ns()&&(window.addEventListener("test",null,t),window.removeEventListener("test",null,t))}catch{}return i}();function pn(i,t){let e=_h(i,t),s=e&&e.match(/^(\d+)(\.\d+)?px$/);return s?+s[1]:void 0}function Qt(i,t,e,s){return{x:i.x+e*(t.x-i.x),y:i.y+e*(t.y-i.y)}}function er(i,t,e,s){return{x:i.x+e*(t.x-i.x),y:s==="middle"?e<.5?i.y:t.y:s==="after"?e<1?i.y:t.y:e>0?t.y:i.y}}function ir(i,t,e,s){let n={x:i.cp2x,y:i.cp2y},o={x:t.cp1x,y:t.cp1y},r=Qt(i,n,e),a=Qt(n,o,e),l=Qt(o,t,e),h=Qt(r,a,e),c=Qt(a,l,e);return Qt(h,c,e)}var Sh=function(i,t){return{x(e){return i+i+t-e},setWidth(e){t=e},textAlign(e){return e==="center"?e:e==="right"?"left":"right"},xPlus(e,s){return e-s},leftForLtr(e,s){return e-s}}},Ah=function(){return{x(i){return i},setWidth(i){},textAlign(i){return i},xPlus(i,t){return i+t},leftForLtr(i,t){return i}}};function fe(i,t,e){return i?Sh(t,e):Ah()}function mn(i,t){let e,s;(t==="ltr"||t==="rtl")&&(e=i.canvas.style,s=[e.getPropertyValue("direction"),e.getPropertyPriority("direction")],e.setProperty("direction",t,"important"),i.prevTextDirection=s)}function bn(i,t){t!==void 0&&(delete i.prevTextDirection,i.canvas.style.setProperty("direction",t[0],t[1]))}function sr(i){return i==="angle"?{between:Le,compare:Vl,normalize:ct}:{between:Et,compare:(t,e)=>t-e,normalize:t=>t}}function Po({start:i,end:t,count:e,loop:s,style:n}){return{start:i%e,end:t%e,loop:s&&(t-i+1)%e===0,style:n}}function Ch(i,t,e){let{property:s,start:n,end:o}=e,{between:r,normalize:a}=sr(s),l=t.length,{start:h,end:c,loop:d}=i,u,g;if(d){for(h+=l,c+=l,u=0,g=l;u<g&&r(a(t[h%l][s]),n,o);++u)h--,c--;h%=l,c%=l}return c<h&&(c+=l),{start:h,end:c,loop:d,style:i.style}}function vn(i,t,e){if(!e)return[i];let{property:s,start:n,end:o}=e,r=t.length,{compare:a,between:l,normalize:h}=sr(s),{start:c,end:d,loop:u,style:g}=Ch(i,t,e),f=[],p=!1,m=null,v,_,k,S=()=>l(n,k,v)&&a(n,k)!==0,y=()=>a(o,v)===0||l(o,k,v),b=()=>p||S(),w=()=>!p||y();for(let A=c,P=c;A<=d;++A)_=t[A%r],!_.skip&&(v=h(_[s]),v!==k&&(p=l(v,n,o),m===null&&b()&&(m=a(v,n)===0?A:P),m!==null&&w()&&(f.push(Po({start:m,end:A,loop:u,count:r,style:g})),m=null),P=A,k=v));return m!==null&&f.push(Po({start:m,end:d,loop:u,count:r,style:g})),f}function _n(i,t){let e=[],s=i.segments;for(let n=0;n<s.length;n++){let o=vn(s[n],i.points,t);o.length&&e.push(...o)}return e}function Ph(i,t,e,s){let n=0,o=t-1;if(e&&!s)for(;n<t&&!i[n].skip;)n++;for(;n<t&&i[n].skip;)n++;for(n%=t,e&&(o+=n);o>n&&i[o%t].skip;)o--;return o%=t,{start:n,end:o}}function Mh(i,t,e,s){let n=i.length,o=[],r=t,a=i[t],l;for(l=t+1;l<=e;++l){let h=i[l%n];h.skip||h.stop?a.skip||(s=!1,o.push({start:t%n,end:(l-1)%n,loop:s}),t=r=h.stop?l:null):(r=l,a.skip&&(t=l)),a=h}return r!==null&&o.push({start:t%n,end:r%n,loop:s}),o}function nr(i,t){let e=i.points,s=i.options.spanGaps,n=e.length;if(!n)return[];let o=!!i._loop,{start:r,end:a}=Ph(e,n,o,s);if(s===!0)return Mo(i,[{start:r,end:a,loop:o}],e,t);let l=a<r?a+n:a,h=!!i._fullLoop&&r===0&&a===n-1;return Mo(i,Mh(e,r,l,h),e,t)}function Mo(i,t,e,s){return!s||!s.setContext||!e?t:Th(i,t,e,s)}function Th(i,t,e,s){let n=i._chart.getContext(),o=To(i.options),{_datasetIndex:r,options:{spanGaps:a}}=i,l=e.length,h=[],c=o,d=t[0].start,u=d;function g(f,p,m,v){let _=a?-1:1;if(f!==p){for(f+=l;e[f%l].skip;)f-=_;for(;e[p%l].skip;)p+=_;f%l!==p%l&&(h.push({start:f%l,end:p%l,loop:m,style:v}),c=v,d=p%l)}}for(let f of t){d=a?d:f.start;let p=e[d%l],m;for(u=d+1;u<=f.end;u++){let v=e[u%l];m=To(s.setContext(Vt(n,{type:"segment",p0:p,p1:v,p0DataIndex:(u-1)%l,p1DataIndex:u%l,datasetIndex:r}))),Eh(m,c)&&g(d,u-1,f.loop,c),p=v,c=m}d<u-1&&g(d,u-1,f.loop,c)}return h}function To(i){return{backgroundColor:i.backgroundColor,borderCapStyle:i.borderCapStyle,borderDash:i.borderDash,borderDashOffset:i.borderDashOffset,borderJoinStyle:i.borderJoinStyle,borderWidth:i.borderWidth,borderColor:i.borderColor}}function Eh(i,t){if(!t)return!1;let e=[],s=function(n,o){return on(o)?(e.includes(o)||e.push(o),e.indexOf(o)):o};return JSON.stringify(i,s)!==JSON.stringify(t,s)}function Ui(i,t,e){return i.options.clip?i[e]:t[e]}function Rh(i,t){let{xScale:e,yScale:s}=i;return e&&s?{left:Ui(e,t,"left"),right:Ui(e,t,"right"),top:Ui(s,t,"top"),bottom:Ui(s,t,"bottom")}:t}function xn(i,t){let e=t._clip;if(e.disabled)return!1;let s=Rh(t,i.chartArea);return{left:e.left===!1?0:s.left-(e.left===!0?0:e.left),right:e.right===!1?i.width:s.right+(e.right===!0?0:e.right),top:e.top===!1?0:s.top-(e.top===!0?0:e.top),bottom:e.bottom===!1?i.height:s.bottom+(e.bottom===!0?0:e.bottom)}}var Rn=class{constructor(){this._request=null,this._charts=new Map,this._running=!1,this._lastDate=void 0}_notify(t,e,s,n){let o=e.listeners[n],r=e.duration;o.forEach(a=>a({chart:t,initial:e.initial,numSteps:r,currentStep:Math.min(s-e.start,r)}))}_refresh(){this._request||(this._running=!0,this._request=tn.call(window,()=>{this._update(),this._request=null,this._running&&this._refresh()}))}_update(t=Date.now()){let e=0;this._charts.forEach((s,n)=>{if(!s.running||!s.items.length)return;let o=s.items,r=o.length-1,a=!1,l;for(;r>=0;--r)l=o[r],l._active?(l._total>s.duration&&(s.duration=l._total),l.tick(t),a=!0):(o[r]=o[o.length-1],o.pop());a&&(n.draw(),this._notify(n,s,t,"progress")),o.length||(s.running=!1,this._notify(n,s,t,"complete"),s.initial=!1),e+=o.length}),this._lastDate=t,e===0&&(this._running=!1)}_getAnims(t){let e=this._charts,s=e.get(t);return s||(s={running:!1,initial:!0,items:[],listeners:{complete:[],progress:[]}},e.set(t,s)),s}listen(t,e,s){this._getAnims(t).listeners[e].push(s)}add(t,e){!e||!e.length||this._getAnims(t).items.push(...e)}has(t){return this._getAnims(t).items.length>0}start(t){let e=this._charts.get(t);e&&(e.running=!0,e.start=Date.now(),e.duration=e.items.reduce((s,n)=>Math.max(s,n._duration),0),this._refresh())}running(t){if(!this._running)return!1;let e=this._charts.get(t);return!(!e||!e.running||!e.items.length)}stop(t){let e=this._charts.get(t);if(!e||!e.items.length)return;let s=e.items,n=s.length-1;for(;n>=0;--n)s[n].cancel();e.items=[],this._notify(t,e,Date.now(),"complete")}remove(t){return this._charts.delete(t)}},$t=new Rn,or="transparent",Dh={boolean(i,t,e){return e>.5?t:i},color(i,t,e){let s=rn(i||or),n=s.valid&&rn(t||or);return n&&n.valid?n.mix(s,e).hexString():t},number(i,t,e){return i+(t-i)*e}},Dn=class{constructor(t,e,s,n){let o=e[s];n=He([t.to,n,o,t.from]);let r=He([t.from,o,n]);this._active=!0,this._fn=t.fn||Dh[t.type||typeof r],this._easing=Me[t.easing]||Me.linear,this._start=Math.floor(Date.now()+(t.delay||0)),this._duration=this._total=Math.floor(t.duration),this._loop=!!t.loop,this._target=e,this._prop=s,this._from=r,this._to=n,this._promises=void 0}active(){return this._active}update(t,e,s){if(this._active){this._notify(!1);let n=this._target[this._prop],o=s-this._start,r=this._duration-o;this._start=s,this._duration=Math.floor(Math.max(r,t.duration)),this._total+=o,this._loop=!!t.loop,this._to=He([t.to,e,n,t.from]),this._from=He([t.from,n,e])}}cancel(){this._active&&(this.tick(Date.now()),this._active=!1,this._notify(!1))}tick(t){let e=t-this._start,s=this._duration,n=this._prop,o=this._from,r=this._loop,a=this._to,l;if(this._active=o!==a&&(r||e<s),!this._active){this._target[n]=a,this._notify(!0);return}if(e<0){this._target[n]=o;return}l=e/s%2,l=r&&l>1?2-l:l,l=this._easing(Math.min(1,Math.max(0,l))),this._target[n]=this._fn(o,a,l)}wait(){let t=this._promises||(this._promises=[]);return new Promise((e,s)=>{t.push({res:e,rej:s})})}_notify(t){let e=t?"res":"rej",s=this._promises||[];for(let n=0;n<s.length;n++)s[n][e]()}},ps=class{constructor(t,e){this._chart=t,this._properties=new Map,this.configure(e)}configure(t){if(!H(t))return;let e=Object.keys(Y.animation),s=this._properties;Object.getOwnPropertyNames(t).forEach(n=>{let o=t[n];if(!H(o))return;let r={};for(let a of e)r[a]=o[a];(W(o.properties)&&o.properties||[n]).forEach(a=>{(a===n||!s.has(a))&&s.set(a,r)})})}_animateOptions(t,e){let s=e.options,n=Lh(t,s);if(!n)return[];let o=this._createAnimations(n,s);return s.$shared&&Oh(t.options.$animations,s).then(()=>{t.options=s},()=>{}),o}_createAnimations(t,e){let s=this._properties,n=[],o=t.$animations||(t.$animations={}),r=Object.keys(e),a=Date.now(),l;for(l=r.length-1;l>=0;--l){let h=r[l];if(h.charAt(0)==="$")continue;if(h==="options"){n.push(...this._animateOptions(t,e));continue}let c=e[h],d=o[h],u=s.get(h);if(d)if(u&&d.active()){d.update(u,c,a);continue}else d.cancel();if(!u||!u.duration){t[h]=c;continue}o[h]=d=new Dn(u,t,h,c),n.push(d)}return n}update(t,e){if(this._properties.size===0){Object.assign(t,e);return}let s=this._createAnimations(t,e);if(s.length)return $t.add(this._chart,s),!0}};function Oh(i,t){let e=[],s=Object.keys(t);for(let n=0;n<s.length;n++){let o=i[s[n]];o&&o.active()&&e.push(o.wait())}return Promise.all(e)}function Lh(i,t){if(!t)return;let e=i.options;if(!e){i.options=t;return}return e.$shared&&(i.options=e=Object.assign({},e,{$shared:!1,$animations:{}})),e}function rr(i,t){let e=i&&i.options||{},s=e.reverse,n=e.min===void 0?t:0,o=e.max===void 0?t:0;return{start:s?o:n,end:s?n:o}}function Ih(i,t,e){if(e===!1)return!1;let s=rr(i,e),n=rr(t,e);return{top:n.end,right:s.end,bottom:n.start,left:s.start}}function Fh(i){let t,e,s,n;return H(i)?(t=i.top,e=i.right,s=i.bottom,n=i.left):t=e=s=n=i,{top:t,right:e,bottom:s,left:n,disabled:i===!1}}function na(i,t){let e=[],s=i._getSortedDatasetMetas(t),n,o;for(n=0,o=s.length;n<o;++n)e.push(s[n].index);return e}function ar(i,t,e,s={}){let n=i.keys,o=s.mode==="single",r,a,l,h;if(t===null)return;let c=!1;for(r=0,a=n.length;r<a;++r){if(l=+n[r],l===e){if(c=!0,s.all)continue;break}h=i.values[l],J(h)&&(o||t===0||St(t)===St(h))&&(t+=h)}return!c&&!s.all?0:t}function Hh(i,t){let{iScale:e,vScale:s}=t,n=e.axis==="x"?"x":"y",o=s.axis==="x"?"x":"y",r=Object.keys(i),a=new Array(r.length),l,h,c;for(l=0,h=r.length;l<h;++l)c=r[l],a[l]={[n]:c,[o]:i[c]};return a}function yn(i,t){let e=i&&i.options.stacked;return e||e===void 0&&t.stack!==void 0}function Nh(i,t,e){return`${i.id}.${t.id}.${e.stack||e.type}`}function Bh(i){let{min:t,max:e,minDefined:s,maxDefined:n}=i.getUserBounds();return{min:s?t:Number.NEGATIVE_INFINITY,max:n?e:Number.POSITIVE_INFINITY}}function zh(i,t,e){let s=i[t]||(i[t]={});return s[e]||(s[e]={})}function lr(i,t,e,s){for(let n of t.getMatchingVisibleMetas(s).reverse()){let o=i[n.index];if(e&&o>0||!e&&o<0)return n.index}return null}function hr(i,t){let{chart:e,_cachedMeta:s}=i,n=e._stacks||(e._stacks={}),{iScale:o,vScale:r,index:a}=s,l=o.axis,h=r.axis,c=Nh(o,r,s),d=t.length,u;for(let g=0;g<d;++g){let f=t[g],{[l]:p,[h]:m}=f,v=f._stacks||(f._stacks={});u=v[h]=zh(n,c,p),u[a]=m,u._top=lr(u,r,!0,s.type),u._bottom=lr(u,r,!1,s.type);let _=u._visualValues||(u._visualValues={});_[a]=m}}function wn(i,t){let e=i.scales;return Object.keys(e).filter(s=>e[s].axis===t).shift()}function jh(i,t){return Vt(i,{active:!1,dataset:void 0,datasetIndex:t,index:t,mode:"default",type:"dataset"})}function Vh(i,t,e){return Vt(i,{active:!1,dataIndex:t,parsed:void 0,raw:void 0,element:e,index:t,mode:"default",type:"data"})}function ai(i,t){let e=i.controller.index,s=i.vScale&&i.vScale.axis;if(s){t=t||i._parsed;for(let n of t){let o=n._stacks;if(!o||o[s]===void 0||o[s][e]===void 0)return;delete o[s][e],o[s]._visualValues!==void 0&&o[s]._visualValues[e]!==void 0&&delete o[s]._visualValues[e]}}}var kn=i=>i==="reset"||i==="none",cr=(i,t)=>t?i:Object.assign({},i),$h=(i,t,e)=>i&&!t.hidden&&t._stacked&&{keys:na(e,!0),values:null},bt=class{constructor(t,e){this.chart=t,this._ctx=t.ctx,this.index=e,this._cachedDataOpts={},this._cachedMeta=this.getMeta(),this._type=this._cachedMeta.type,this.options=void 0,this._parsing=!1,this._data=void 0,this._objectData=void 0,this._sharedOptions=void 0,this._drawStart=void 0,this._drawCount=void 0,this.enableOptionSharing=!1,this.supportsDecimation=!1,this.$context=void 0,this._syncList=[],this.datasetElementType=new.target.datasetElementType,this.dataElementType=new.target.dataElementType,this.initialize()}initialize(){let t=this._cachedMeta;this.configure(),this.linkScales(),t._stacked=yn(t.vScale,t),this.addElements(),this.options.fill&&!this.chart.isPluginEnabled("filler")&&console.warn("Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options")}updateIndex(t){this.index!==t&&ai(this._cachedMeta),this.index=t}linkScales(){let t=this.chart,e=this._cachedMeta,s=this.getDataset(),n=(d,u,g,f)=>d==="x"?u:d==="r"?f:g,o=e.xAxisID=O(s.xAxisID,wn(t,"x")),r=e.yAxisID=O(s.yAxisID,wn(t,"y")),a=e.rAxisID=O(s.rAxisID,wn(t,"r")),l=e.indexAxis,h=e.iAxisID=n(l,o,r,a),c=e.vAxisID=n(l,r,o,a);e.xScale=this.getScaleForId(o),e.yScale=this.getScaleForId(r),e.rScale=this.getScaleForId(a),e.iScale=this.getScaleForId(h),e.vScale=this.getScaleForId(c)}getDataset(){return this.chart.data.datasets[this.index]}getMeta(){return this.chart.getDatasetMeta(this.index)}getScaleForId(t){return this.chart.scales[t]}_getOtherScale(t){let e=this._cachedMeta;return t===e.iScale?e.vScale:e.iScale}reset(){this._update("reset")}_destroy(){let t=this._cachedMeta;this._data&&Zs(this._data,this),t._stacked&&ai(t)}_dataCheck(){let t=this.getDataset(),e=t.data||(t.data=[]),s=this._data;if(H(e)){let n=this._cachedMeta;this._data=Hh(e,n)}else if(s!==e){if(s){Zs(s,this);let n=this._cachedMeta;ai(n),n._parsed=[]}e&&Object.isExtensible(e)&&zo(e,this),this._syncList=[],this._data=e}}addElements(){let t=this._cachedMeta;this._dataCheck(),this.datasetElementType&&(t.dataset=new this.datasetElementType)}buildOrUpdateElements(t){let e=this._cachedMeta,s=this.getDataset(),n=!1;this._dataCheck();let o=e._stacked;e._stacked=yn(e.vScale,e),e.stack!==s.stack&&(n=!0,ai(e),e.stack=s.stack),this._resyncElements(t),(n||o!==e._stacked)&&(hr(this,e._parsed),e._stacked=yn(e.vScale,e))}configure(){let t=this.chart.config,e=t.datasetScopeKeys(this._type),s=t.getOptionScopes(this.getDataset(),e,!0);this.options=t.createResolver(s,this.getContext()),this._parsing=this.options.parsing,this._cachedDataOpts={}}parse(t,e){let{_cachedMeta:s,_data:n}=this,{iScale:o,_stacked:r}=s,a=o.axis,l=t===0&&e===n.length?!0:s._sorted,h=t>0&&s._parsed[t-1],c,d,u;if(this._parsing===!1)s._parsed=n,s._sorted=!0,u=n;else{W(n[t])?u=this.parseArrayData(s,n,t,e):H(n[t])?u=this.parseObjectData(s,n,t,e):u=this.parsePrimitiveData(s,n,t,e);let g=()=>d[a]===null||h&&d[a]<h[a];for(c=0;c<e;++c)s._parsed[c+t]=d=u[c],l&&(g()&&(l=!1),h=d);s._sorted=l}r&&hr(this,u)}parsePrimitiveData(t,e,s,n){let{iScale:o,vScale:r}=t,a=o.axis,l=r.axis,h=o.getLabels(),c=o===r,d=new Array(n),u,g,f;for(u=0,g=n;u<g;++u)f=u+s,d[u]={[a]:c||o.parse(h[f],f),[l]:r.parse(e[f],f)};return d}parseArrayData(t,e,s,n){let{xScale:o,yScale:r}=t,a=new Array(n),l,h,c,d;for(l=0,h=n;l<h;++l)c=l+s,d=e[c],a[l]={x:o.parse(d[0],c),y:r.parse(d[1],c)};return a}parseObjectData(t,e,s,n){let{xScale:o,yScale:r}=t,{xAxisKey:a="x",yAxisKey:l="y"}=this._parsing,h=new Array(n),c,d,u,g;for(c=0,d=n;c<d;++c)u=c+s,g=e[u],h[c]={x:o.parse(jt(g,a),u),y:r.parse(jt(g,l),u)};return h}getParsed(t){return this._cachedMeta._parsed[t]}getDataElement(t){return this._cachedMeta.data[t]}applyStack(t,e,s){let n=this.chart,o=this._cachedMeta,r=e[t.axis],a={keys:na(n,!0),values:e._stacks[t.axis]._visualValues};return ar(a,r,o.index,{mode:s})}updateRangeFromParsed(t,e,s,n){let o=s[e.axis],r=o===null?NaN:o,a=n&&s._stacks[e.axis];n&&a&&(n.values=a,r=ar(n,o,this._cachedMeta.index)),t.min=Math.min(t.min,r),t.max=Math.max(t.max,r)}getMinMax(t,e){let s=this._cachedMeta,n=s._parsed,o=s._sorted&&t===s.iScale,r=n.length,a=this._getOtherScale(t),l=$h(e,s,this.chart),h={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY},{min:c,max:d}=Bh(a),u,g;function f(){g=n[u];let p=g[a.axis];return!J(g[t.axis])||c>p||d<p}for(u=0;u<r&&!(!f()&&(this.updateRangeFromParsed(h,t,g,l),o));++u);if(o){for(u=r-1;u>=0;--u)if(!f()){this.updateRangeFromParsed(h,t,g,l);break}}return h}getAllParsedValues(t){let e=this._cachedMeta._parsed,s=[],n,o,r;for(n=0,o=e.length;n<o;++n)r=e[n][t.axis],J(r)&&s.push(r);return s}getMaxOverflow(){return!1}getLabelAndValue(t){let e=this._cachedMeta,s=e.iScale,n=e.vScale,o=this.getParsed(t);return{label:s?""+s.getLabelForValue(o[s.axis]):"",value:n?""+n.getLabelForValue(o[n.axis]):""}}_update(t){let e=this._cachedMeta;this.update(t||"default"),e._clip=Fh(O(this.options.clip,Ih(e.xScale,e.yScale,this.getMaxOverflow())))}update(t){}draw(){let t=this._ctx,e=this.chart,s=this._cachedMeta,n=s.data||[],o=e.chartArea,r=[],a=this._drawStart||0,l=this._drawCount||n.length-a,h=this.options.drawActiveElementsOnTop,c;for(s.dataset&&s.dataset.draw(t,o,a,l),c=a;c<a+l;++c){let d=n[c];d.hidden||(d.active&&h?r.push(d):d.draw(t,o))}for(c=0;c<r.length;++c)r[c].draw(t,o)}getStyle(t,e){let s=e?"active":"default";return t===void 0&&this._cachedMeta.dataset?this.resolveDatasetElementOptions(s):this.resolveDataElementOptions(t||0,s)}getContext(t,e,s){let n=this.getDataset(),o;if(t>=0&&t<this._cachedMeta.data.length){let r=this._cachedMeta.data[t];o=r.$context||(r.$context=Vh(this.getContext(),t,r)),o.parsed=this.getParsed(t),o.raw=n.data[t],o.index=o.dataIndex=t}else o=this.$context||(this.$context=jh(this.chart.getContext(),this.index)),o.dataset=n,o.index=o.datasetIndex=this.index;return o.active=!!e,o.mode=s,o}resolveDatasetElementOptions(t){return this._resolveElementOptions(this.datasetElementType.id,t)}resolveDataElementOptions(t,e){return this._resolveElementOptions(this.dataElementType.id,e,t)}_resolveElementOptions(t,e="default",s){let n=e==="active",o=this._cachedDataOpts,r=t+"-"+e,a=o[r],l=this.enableOptionSharing&&De(s);if(a)return cr(a,l);let h=this.chart.config,c=h.datasetElementScopeKeys(this._type,t),d=n?[`${t}Hover`,"hover",t,""]:[t,""],u=h.getOptionScopes(this.getDataset(),c),g=Object.keys(Y.elements[t]),f=()=>this.getContext(s,n,e),p=h.resolveNamedOptions(u,g,f,d);return p.$shared&&(p.$shared=l,o[r]=Object.freeze(cr(p,l))),p}_resolveAnimations(t,e,s){let n=this.chart,o=this._cachedDataOpts,r=`animation-${e}`,a=o[r];if(a)return a;let l;if(n.options.animation!==!1){let c=this.chart.config,d=c.datasetAnimationScopeKeys(this._type,e),u=c.getOptionScopes(this.getDataset(),d);l=c.createResolver(u,this.getContext(t,s,e))}let h=new ps(n,l&&l.animations);return l&&l._cacheable&&(o[r]=Object.freeze(h)),h}getSharedOptions(t){if(t.$shared)return this._sharedOptions||(this._sharedOptions=Object.assign({},t))}includeOptions(t,e){return!e||kn(t)||this.chart._animationsDisabled}_getSharedOptions(t,e){let s=this.resolveDataElementOptions(t,e),n=this._sharedOptions,o=this.getSharedOptions(s),r=this.includeOptions(e,o)||o!==n;return this.updateSharedOptions(o,e,s),{sharedOptions:o,includeOptions:r}}updateElement(t,e,s,n){kn(n)?Object.assign(t,s):this._resolveAnimations(e,n).update(t,s)}updateSharedOptions(t,e,s){t&&!kn(e)&&this._resolveAnimations(void 0,e).update(t,s)}_setStyle(t,e,s,n){t.active=n;let o=this.getStyle(e,n);this._resolveAnimations(e,s,n).update(t,{options:!n&&this.getSharedOptions(o)||o})}removeHoverStyle(t,e,s){this._setStyle(t,s,"active",!1)}setHoverStyle(t,e,s){this._setStyle(t,s,"active",!0)}_removeDatasetHoverStyle(){let t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!1)}_setDatasetHoverStyle(){let t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!0)}_resyncElements(t){let e=this._data,s=this._cachedMeta.data;for(let[a,l,h]of this._syncList)this[a](l,h);this._syncList=[];let n=s.length,o=e.length,r=Math.min(o,n);r&&this.parse(0,r),o>n?this._insertElements(n,o-n,t):o<n&&this._removeElements(o,n-o)}_insertElements(t,e,s=!0){let n=this._cachedMeta,o=n.data,r=t+e,a,l=h=>{for(h.length+=e,a=h.length-1;a>=r;a--)h[a]=h[a-e]};for(l(o),a=t;a<r;++a)o[a]=new this.dataElementType;this._parsing&&l(n._parsed),this.parse(t,e),s&&this.updateElements(o,t,e,"reset")}updateElements(t,e,s,n){}_removeElements(t,e){let s=this._cachedMeta;if(this._parsing){let n=s._parsed.splice(t,e);s._stacked&&ai(s,n)}s.data.splice(t,e)}_sync(t){if(this._parsing)this._syncList.push(t);else{let[e,s,n]=t;this[e](s,n)}this.chart._dataChanges.push([this.index,...t])}_onDataPush(){let t=arguments.length;this._sync(["_insertElements",this.getDataset().data.length-t,t])}_onDataPop(){this._sync(["_removeElements",this._cachedMeta.data.length-1,1])}_onDataShift(){this._sync(["_removeElements",0,1])}_onDataSplice(t,e){e&&this._sync(["_removeElements",t,e]);let s=arguments.length-2;s&&this._sync(["_insertElements",t,s])}_onDataUnshift(){this._sync(["_insertElements",0,arguments.length])}};C(bt,"defaults",{}),C(bt,"datasetElementType",null),C(bt,"dataElementType",null);function Wh(i,t){if(!i._cache.$bar){let e=i.getMatchingVisibleMetas(t),s=[];for(let n=0,o=e.length;n<o;n++)s=s.concat(e[n].controller.getAllParsedValues(i));i._cache.$bar=Qs(s.sort((n,o)=>n-o))}return i._cache.$bar}function Uh(i){let t=i.iScale,e=Wh(t,i.type),s=t._length,n,o,r,a,l=()=>{r===32767||r===-32768||(De(a)&&(s=Math.min(s,Math.abs(r-a)||s)),a=r)};for(n=0,o=e.length;n<o;++n)r=t.getPixelForValue(e[n]),l();for(a=void 0,n=0,o=t.ticks.length;n<o;++n)r=t.getPixelForTick(n),l();return s}function Xh(i,t,e,s){let n=e.barThickness,o,r;return F(n)?(o=t.min*e.categoryPercentage,r=e.barPercentage):(o=n*s,r=1),{chunk:o/s,ratio:r,start:t.pixels[i]-o/2}}function Yh(i,t,e,s){let n=t.pixels,o=n[i],r=i>0?n[i-1]:null,a=i<n.length-1?n[i+1]:null,l=e.categoryPercentage;r===null&&(r=o-(a===null?t.end-t.start:a-o)),a===null&&(a=o+o-r);let h=o-(o-Math.min(r,a))/2*l;return{chunk:Math.abs(a-r)/2*l/s,ratio:e.barPercentage,start:h}}function Jh(i,t,e,s){let n=e.parse(i[0],s),o=e.parse(i[1],s),r=Math.min(n,o),a=Math.max(n,o),l=r,h=a;Math.abs(r)>Math.abs(a)&&(l=a,h=r),t[e.axis]=h,t._custom={barStart:l,barEnd:h,start:n,end:o,min:r,max:a}}function oa(i,t,e,s){return W(i)?Jh(i,t,e,s):t[e.axis]=e.parse(i,s),t}function dr(i,t,e,s){let n=i.iScale,o=i.vScale,r=n.getLabels(),a=n===o,l=[],h,c,d,u;for(h=e,c=e+s;h<c;++h)u=t[h],d={},d[n.axis]=a||n.parse(r[h],h),l.push(oa(u,d,o,h));return l}function Sn(i){return i&&i.barStart!==void 0&&i.barEnd!==void 0}function qh(i,t,e){return i!==0?St(i):(t.isHorizontal()?1:-1)*(t.min>=e?1:-1)}function Kh(i){let t,e,s,n,o;return i.horizontal?(t=i.base>i.x,e="left",s="right"):(t=i.base<i.y,e="bottom",s="top"),t?(n="end",o="start"):(n="start",o="end"),{start:e,end:s,reverse:t,top:n,bottom:o}}function Gh(i,t,e,s){let n=t.borderSkipped,o={};if(!n){i.borderSkipped=o;return}if(n===!0){i.borderSkipped={top:!0,right:!0,bottom:!0,left:!0};return}let{start:r,end:a,reverse:l,top:h,bottom:c}=Kh(i);n==="middle"&&e&&(i.enableBorderRadius=!0,(e._top||0)===s?n=h:(e._bottom||0)===s?n=c:(o[ur(c,r,a,l)]=!0,n=h)),o[ur(n,r,a,l)]=!0,i.borderSkipped=o}function ur(i,t,e,s){return s?(i=Zh(i,t,e),i=fr(i,e,t)):i=fr(i,t,e),i}function Zh(i,t,e){return i===t?e:i===e?t:i}function fr(i,t,e){return i==="start"?t:i==="end"?e:i}function Qh(i,{inflateAmount:t},e){i.inflateAmount=t==="auto"?e===1?.33:0:t}var Be=class extends bt{parsePrimitiveData(t,e,s,n){return dr(t,e,s,n)}parseArrayData(t,e,s,n){return dr(t,e,s,n)}parseObjectData(t,e,s,n){let{iScale:o,vScale:r}=t,{xAxisKey:a="x",yAxisKey:l="y"}=this._parsing,h=o.axis==="x"?a:l,c=r.axis==="x"?a:l,d=[],u,g,f,p;for(u=s,g=s+n;u<g;++u)p=e[u],f={},f[o.axis]=o.parse(jt(p,h),u),d.push(oa(jt(p,c),f,r,u));return d}updateRangeFromParsed(t,e,s,n){super.updateRangeFromParsed(t,e,s,n);let o=s._custom;o&&e===this._cachedMeta.vScale&&(t.min=Math.min(t.min,o.min),t.max=Math.max(t.max,o.max))}getMaxOverflow(){return 0}getLabelAndValue(t){let e=this._cachedMeta,{iScale:s,vScale:n}=e,o=this.getParsed(t),r=o._custom,a=Sn(r)?"["+r.start+", "+r.end+"]":""+n.getLabelForValue(o[n.axis]);return{label:""+s.getLabelForValue(o[s.axis]),value:a}}initialize(){this.enableOptionSharing=!0,super.initialize();let t=this._cachedMeta;t.stack=this.getDataset().stack}update(t){let e=this._cachedMeta;this.updateElements(e.data,0,e.data.length,t)}updateElements(t,e,s,n){let o=n==="reset",{index:r,_cachedMeta:{vScale:a}}=this,l=a.getBasePixel(),h=a.isHorizontal(),c=this._getRuler(),{sharedOptions:d,includeOptions:u}=this._getSharedOptions(e,n);for(let g=e;g<e+s;g++){let f=this.getParsed(g),p=o||F(f[a.axis])?{base:l,head:l}:this._calculateBarValuePixels(g),m=this._calculateBarIndexPixels(g,c),v=(f._stacks||{})[a.axis],_={horizontal:h,base:p.base,enableBorderRadius:!v||Sn(f._custom)||r===v._top||r===v._bottom,x:h?p.head:m.center,y:h?m.center:p.head,height:h?m.size:Math.abs(p.size),width:h?Math.abs(p.size):m.size};u&&(_.options=d||this.resolveDataElementOptions(g,t[g].active?"active":n));let k=_.options||t[g].options;Gh(_,k,v,r),Qh(_,k,c.ratio),this.updateElement(t[g],g,_,n)}}_getStacks(t,e){let{iScale:s}=this._cachedMeta,n=s.getMatchingVisibleMetas(this._type).filter(c=>c.controller.options.grouped),o=s.options.stacked,r=[],a=this._cachedMeta.controller.getParsed(e),l=a&&a[s.axis],h=c=>{let d=c._parsed.find(g=>g[s.axis]===l),u=d&&d[c.vScale.axis];if(F(u)||isNaN(u))return!0};for(let c of n)if(!(e!==void 0&&h(c))&&((o===!1||r.indexOf(c.stack)===-1||o===void 0&&c.stack===void 0)&&r.push(c.stack),c.index===t))break;return r.length||r.push(void 0),r}_getStackCount(t){return this._getStacks(void 0,t).length}_getStackIndex(t,e,s){let n=this._getStacks(t,s),o=e!==void 0?n.indexOf(e):-1;return o===-1?n.length-1:o}_getRuler(){let t=this.options,e=this._cachedMeta,s=e.iScale,n=[],o,r;for(o=0,r=e.data.length;o<r;++o)n.push(s.getPixelForValue(this.getParsed(o)[s.axis],o));let a=t.barThickness;return{min:a||Uh(e),pixels:n,start:s._startPixel,end:s._endPixel,stackCount:this._getStackCount(),scale:s,grouped:t.grouped,ratio:a?1:t.categoryPercentage*t.barPercentage}}_calculateBarValuePixels(t){let{_cachedMeta:{vScale:e,_stacked:s,index:n},options:{base:o,minBarLength:r}}=this,a=o||0,l=this.getParsed(t),h=l._custom,c=Sn(h),d=l[e.axis],u=0,g=s?this.applyStack(e,l,s):d,f,p;g!==d&&(u=g-d,g=d),c&&(d=h.barStart,g=h.barEnd-h.barStart,d!==0&&St(d)!==St(h.barEnd)&&(u=0),u+=d);let m=!F(o)&&!c?o:u,v=e.getPixelForValue(m);if(this.chart.getDataVisibility(t)?f=e.getPixelForValue(u+g):f=v,p=f-v,Math.abs(p)<r){p=qh(p,e,a)*r,d===a&&(v-=p/2);let _=e.getPixelForDecimal(0),k=e.getPixelForDecimal(1),S=Math.min(_,k),y=Math.max(_,k);v=Math.max(Math.min(v,y),S),f=v+p,s&&!c&&(l._stacks[e.axis]._visualValues[n]=e.getValueForPixel(f)-e.getValueForPixel(v))}if(v===e.getPixelForValue(a)){let _=St(p)*e.getLineWidthForValue(a)/2;v+=_,p-=_}return{size:p,base:v,head:f,center:f+p/2}}_calculateBarIndexPixels(t,e){let s=e.scale,n=this.options,o=n.skipNull,r=O(n.maxBarThickness,1/0),a,l;if(e.grouped){let h=o?this._getStackCount(t):e.stackCount,c=n.barThickness==="flex"?Yh(t,e,n,h):Xh(t,e,n,h),d=this._getStackIndex(this.index,this._cachedMeta.stack,o?t:void 0);a=c.start+c.chunk*d+c.chunk/2,l=Math.min(r,c.chunk*c.ratio)}else a=s.getPixelForValue(this.getParsed(t)[s.axis],t),l=Math.min(r,e.min*e.ratio);return{base:a-l/2,head:a+l/2,center:a,size:l}}draw(){let t=this._cachedMeta,e=t.vScale,s=t.data,n=s.length,o=0;for(;o<n;++o)this.getParsed(o)[e.axis]!==null&&!s[o].hidden&&s[o].draw(this._ctx)}};C(Be,"id","bar"),C(Be,"defaults",{datasetElementType:!1,dataElementType:"bar",categoryPercentage:.8,barPercentage:.9,grouped:!0,animations:{numbers:{type:"number",properties:["x","y","base","width","height"]}}}),C(Be,"overrides",{scales:{_index_:{type:"category",offset:!0,grid:{offset:!0}},_value_:{type:"linear",beginAtZero:!0}}});var ze=class extends bt{initialize(){this.enableOptionSharing=!0,super.initialize()}parsePrimitiveData(t,e,s,n){let o=super.parsePrimitiveData(t,e,s,n);for(let r=0;r<o.length;r++)o[r]._custom=this.resolveDataElementOptions(r+s).radius;return o}parseArrayData(t,e,s,n){let o=super.parseArrayData(t,e,s,n);for(let r=0;r<o.length;r++){let a=e[s+r];o[r]._custom=O(a[2],this.resolveDataElementOptions(r+s).radius)}return o}parseObjectData(t,e,s,n){let o=super.parseObjectData(t,e,s,n);for(let r=0;r<o.length;r++){let a=e[s+r];o[r]._custom=O(a&&a.r&&+a.r,this.resolveDataElementOptions(r+s).radius)}return o}getMaxOverflow(){let t=this._cachedMeta.data,e=0;for(let s=t.length-1;s>=0;--s)e=Math.max(e,t[s].size(this.resolveDataElementOptions(s))/2);return e>0&&e}getLabelAndValue(t){let e=this._cachedMeta,s=this.chart.data.labels||[],{xScale:n,yScale:o}=e,r=this.getParsed(t),a=n.getLabelForValue(r.x),l=o.getLabelForValue(r.y),h=r._custom;return{label:s[t]||"",value:"("+a+", "+l+(h?", "+h:"")+")"}}update(t){let e=this._cachedMeta.data;this.updateElements(e,0,e.length,t)}updateElements(t,e,s,n){let o=n==="reset",{iScale:r,vScale:a}=this._cachedMeta,{sharedOptions:l,includeOptions:h}=this._getSharedOptions(e,n),c=r.axis,d=a.axis;for(let u=e;u<e+s;u++){let g=t[u],f=!o&&this.getParsed(u),p={},m=p[c]=o?r.getPixelForDecimal(.5):r.getPixelForValue(f[c]),v=p[d]=o?a.getBasePixel():a.getPixelForValue(f[d]);p.skip=isNaN(m)||isNaN(v),h&&(p.options=l||this.resolveDataElementOptions(u,g.active?"active":n),o&&(p.options.radius=0)),this.updateElement(g,u,p,n)}}resolveDataElementOptions(t,e){let s=this.getParsed(t),n=super.resolveDataElementOptions(t,e);n.$shared&&(n=Object.assign({},n,{$shared:!1}));let o=n.radius;return e!=="active"&&(n.radius=0),n.radius+=O(s&&s._custom,o),n}};C(ze,"id","bubble"),C(ze,"defaults",{datasetElementType:!1,dataElementType:"point",animations:{numbers:{type:"number",properties:["x","y","borderWidth","radius"]}}}),C(ze,"overrides",{scales:{x:{type:"linear"},y:{type:"linear"}}});function tc(i,t,e){let s=1,n=1,o=0,r=0;if(t<X){let a=i,l=a+t,h=Math.cos(a),c=Math.sin(a),d=Math.cos(l),u=Math.sin(l),g=(k,S,y)=>Le(k,a,l,!0)?1:Math.max(S,S*e,y,y*e),f=(k,S,y)=>Le(k,a,l,!0)?-1:Math.min(S,S*e,y,y*e),p=g(0,h,d),m=g(q,c,u),v=f(U,h,d),_=f(U+q,c,u);s=(p-v)/2,n=(m-_)/2,o=-(p+v)/2,r=-(m+_)/2}return{ratioX:s,ratioY:n,offsetX:o,offsetY:r}}var Ut=class extends bt{constructor(t,e){super(t,e),this.enableOptionSharing=!0,this.innerRadius=void 0,this.outerRadius=void 0,this.offsetX=void 0,this.offsetY=void 0}linkScales(){}parse(t,e){let s=this.getDataset().data,n=this._cachedMeta;if(this._parsing===!1)n._parsed=s;else{let o=l=>+s[l];if(H(s[t])){let{key:l="value"}=this._parsing;o=h=>+jt(s[h],l)}let r,a;for(r=t,a=t+e;r<a;++r)n._parsed[r]=o(r)}}_getRotation(){return wt(this.options.rotation-90)}_getCircumference(){return wt(this.options.circumference)}_getRotationExtents(){let t=X,e=-X;for(let s=0;s<this.chart.data.datasets.length;++s)if(this.chart.isDatasetVisible(s)&&this.chart.getDatasetMeta(s).type===this._type){let n=this.chart.getDatasetMeta(s).controller,o=n._getRotation(),r=n._getCircumference();t=Math.min(t,o),e=Math.max(e,o+r)}return{rotation:t,circumference:e-t}}update(t){let e=this.chart,{chartArea:s}=e,n=this._cachedMeta,o=n.data,r=this.getMaxBorderWidth()+this.getMaxOffset(o)+this.options.spacing,a=Math.max((Math.min(s.width,s.height)-r)/2,0),l=Math.min(Ro(this.options.cutout,a),1),h=this._getRingWeight(this.index),{circumference:c,rotation:d}=this._getRotationExtents(),{ratioX:u,ratioY:g,offsetX:f,offsetY:p}=tc(d,c,l),m=(s.width-r)/u,v=(s.height-r)/g,_=Math.max(Math.min(m,v)/2,0),k=Xs(this.options.radius,_),S=Math.max(k*l,0),y=(k-S)/this._getVisibleDatasetWeightTotal();this.offsetX=f*k,this.offsetY=p*k,n.total=this.calculateTotal(),this.outerRadius=k-y*this._getRingWeightOffset(this.index),this.innerRadius=Math.max(this.outerRadius-y*h,0),this.updateElements(o,0,o.length,t)}_circumference(t,e){let s=this.options,n=this._cachedMeta,o=this._getCircumference();return e&&s.animation.animateRotate||!this.chart.getDataVisibility(t)||n._parsed[t]===null||n.data[t].hidden?0:this.calculateCircumference(n._parsed[t]*o/X)}updateElements(t,e,s,n){let o=n==="reset",r=this.chart,a=r.chartArea,h=r.options.animation,c=(a.left+a.right)/2,d=(a.top+a.bottom)/2,u=o&&h.animateScale,g=u?0:this.innerRadius,f=u?0:this.outerRadius,{sharedOptions:p,includeOptions:m}=this._getSharedOptions(e,n),v=this._getRotation(),_;for(_=0;_<e;++_)v+=this._circumference(_,o);for(_=e;_<e+s;++_){let k=this._circumference(_,o),S=t[_],y={x:c+this.offsetX,y:d+this.offsetY,startAngle:v,endAngle:v+k,circumference:k,outerRadius:f,innerRadius:g};m&&(y.options=p||this.resolveDataElementOptions(_,S.active?"active":n)),v+=k,this.updateElement(S,_,y,n)}}calculateTotal(){let t=this._cachedMeta,e=t.data,s=0,n;for(n=0;n<e.length;n++){let o=t._parsed[n];o!==null&&!isNaN(o)&&this.chart.getDataVisibility(n)&&!e[n].hidden&&(s+=Math.abs(o))}return s}calculateCircumference(t){let e=this._cachedMeta.total;return e>0&&!isNaN(t)?X*(Math.abs(t)/e):0}getLabelAndValue(t){let e=this._cachedMeta,s=this.chart,n=s.data.labels||[],o=Ie(e._parsed[t],s.options.locale);return{label:n[t]||"",value:o}}getMaxBorderWidth(t){let e=0,s=this.chart,n,o,r,a,l;if(!t){for(n=0,o=s.data.datasets.length;n<o;++n)if(s.isDatasetVisible(n)){r=s.getDatasetMeta(n),t=r.data,a=r.controller;break}}if(!t)return 0;for(n=0,o=t.length;n<o;++n)l=a.resolveDataElementOptions(n),l.borderAlign!=="inner"&&(e=Math.max(e,l.borderWidth||0,l.hoverBorderWidth||0));return e}getMaxOffset(t){let e=0;for(let s=0,n=t.length;s<n;++s){let o=this.resolveDataElementOptions(s);e=Math.max(e,o.offset||0,o.hoverOffset||0)}return e}_getRingWeightOffset(t){let e=0;for(let s=0;s<t;++s)this.chart.isDatasetVisible(s)&&(e+=this._getRingWeight(s));return e}_getRingWeight(t){return Math.max(O(this.chart.data.datasets[t].weight,1),0)}_getVisibleDatasetWeightTotal(){return this._getRingWeightOffset(this.chart.data.datasets.length)||1}};C(Ut,"id","doughnut"),C(Ut,"defaults",{datasetElementType:!1,dataElementType:"arc",animation:{animateRotate:!0,animateScale:!1},animations:{numbers:{type:"number",properties:["circumference","endAngle","innerRadius","outerRadius","startAngle","x","y","offset","borderWidth","spacing"]}},cutout:"50%",rotation:0,circumference:360,radius:"100%",spacing:0,indexAxis:"r"}),C(Ut,"descriptors",{_scriptable:t=>t!=="spacing",_indexable:t=>t!=="spacing"&&!t.startsWith("borderDash")&&!t.startsWith("hoverBorderDash")}),C(Ut,"overrides",{aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){let e=t.data;if(e.labels.length&&e.datasets.length){let{labels:{pointStyle:s,color:n}}=t.legend.options;return e.labels.map((o,r)=>{let l=t.getDatasetMeta(0).controller.getStyle(r);return{text:o,fillStyle:l.backgroundColor,strokeStyle:l.borderColor,fontColor:n,lineWidth:l.borderWidth,pointStyle:s,hidden:!t.getDataVisibility(r),index:r}})}return[]}},onClick(t,e,s){s.chart.toggleDataVisibility(e.index),s.chart.update()}}}});var je=class extends bt{initialize(){this.enableOptionSharing=!0,this.supportsDecimation=!0,super.initialize()}update(t){let e=this._cachedMeta,{dataset:s,data:n=[],_dataset:o}=e,r=this.chart._animationsDisabled,{start:a,count:l}=sn(e,n,r);this._drawStart=a,this._drawCount=l,nn(e)&&(a=0,l=n.length),s._chart=this.chart,s._datasetIndex=this.index,s._decimated=!!o._decimated,s.points=n;let h=this.resolveDatasetElementOptions(t);this.options.showLine||(h.borderWidth=0),h.segment=this.options.segment,this.updateElement(s,void 0,{animated:!r,options:h},t),this.updateElements(n,a,l,t)}updateElements(t,e,s,n){let o=n==="reset",{iScale:r,vScale:a,_stacked:l,_dataset:h}=this._cachedMeta,{sharedOptions:c,includeOptions:d}=this._getSharedOptions(e,n),u=r.axis,g=a.axis,{spanGaps:f,segment:p}=this.options,m=ue(f)?f:Number.POSITIVE_INFINITY,v=this.chart._animationsDisabled||o||n==="none",_=e+s,k=t.length,S=e>0&&this.getParsed(e-1);for(let y=0;y<k;++y){let b=t[y],w=v?b:{};if(y<e||y>=_){w.skip=!0;continue}let A=this.getParsed(y),P=F(A[g]),E=w[u]=r.getPixelForValue(A[u],y),T=w[g]=o||P?a.getBasePixel():a.getPixelForValue(l?this.applyStack(a,A,l):A[g],y);w.skip=isNaN(E)||isNaN(T)||P,w.stop=y>0&&Math.abs(A[u]-S[u])>m,p&&(w.parsed=A,w.raw=h.data[y]),d&&(w.options=c||this.resolveDataElementOptions(y,b.active?"active":n)),v||this.updateElement(b,y,w,n),S=A}}getMaxOverflow(){let t=this._cachedMeta,e=t.dataset,s=e.options&&e.options.borderWidth||0,n=t.data||[];if(!n.length)return s;let o=n[0].size(this.resolveDataElementOptions(0)),r=n[n.length-1].size(this.resolveDataElementOptions(n.length-1));return Math.max(s,o,r)/2}draw(){let t=this._cachedMeta;t.dataset.updateControlPoints(this.chart.chartArea,t.iScale.axis),super.draw()}};C(je,"id","line"),C(je,"defaults",{datasetElementType:"line",dataElementType:"point",showLine:!0,spanGaps:!1}),C(je,"overrides",{scales:{_index_:{type:"category"},_value_:{type:"linear"}}});var ve=class extends bt{constructor(t,e){super(t,e),this.innerRadius=void 0,this.outerRadius=void 0}getLabelAndValue(t){let e=this._cachedMeta,s=this.chart,n=s.data.labels||[],o=Ie(e._parsed[t].r,s.options.locale);return{label:n[t]||"",value:o}}parseObjectData(t,e,s,n){return fn.bind(this)(t,e,s,n)}update(t){let e=this._cachedMeta.data;this._updateRadius(),this.updateElements(e,0,e.length,t)}getMinMax(){let t=this._cachedMeta,e={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY};return t.data.forEach((s,n)=>{let o=this.getParsed(n).r;!isNaN(o)&&this.chart.getDataVisibility(n)&&(o<e.min&&(e.min=o),o>e.max&&(e.max=o))}),e}_updateRadius(){let t=this.chart,e=t.chartArea,s=t.options,n=Math.min(e.right-e.left,e.bottom-e.top),o=Math.max(n/2,0),r=Math.max(s.cutoutPercentage?o/100*s.cutoutPercentage:1,0),a=(o-r)/t.getVisibleDatasetCount();this.outerRadius=o-a*this.index,this.innerRadius=this.outerRadius-a}updateElements(t,e,s,n){let o=n==="reset",r=this.chart,l=r.options.animation,h=this._cachedMeta.rScale,c=h.xCenter,d=h.yCenter,u=h.getIndexAngle(0)-.5*U,g=u,f,p=360/this.countVisibleElements();for(f=0;f<e;++f)g+=this._computeAngle(f,n,p);for(f=e;f<e+s;f++){let m=t[f],v=g,_=g+this._computeAngle(f,n,p),k=r.getDataVisibility(f)?h.getDistanceFromCenterForValue(this.getParsed(f).r):0;g=_,o&&(l.animateScale&&(k=0),l.animateRotate&&(v=_=u));let S={x:c,y:d,innerRadius:0,outerRadius:k,startAngle:v,endAngle:_,options:this.resolveDataElementOptions(f,m.active?"active":n)};this.updateElement(m,f,S,n)}}countVisibleElements(){let t=this._cachedMeta,e=0;return t.data.forEach((s,n)=>{!isNaN(this.getParsed(n).r)&&this.chart.getDataVisibility(n)&&e++}),e}_computeAngle(t,e,s){return this.chart.getDataVisibility(t)?wt(this.resolveDataElementOptions(t,e).angle||s):0}};C(ve,"id","polarArea"),C(ve,"defaults",{dataElementType:"arc",animation:{animateRotate:!0,animateScale:!0},animations:{numbers:{type:"number",properties:["x","y","startAngle","endAngle","innerRadius","outerRadius"]}},indexAxis:"r",startAngle:0}),C(ve,"overrides",{aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){let e=t.data;if(e.labels.length&&e.datasets.length){let{labels:{pointStyle:s,color:n}}=t.legend.options;return e.labels.map((o,r)=>{let l=t.getDatasetMeta(0).controller.getStyle(r);return{text:o,fillStyle:l.backgroundColor,strokeStyle:l.borderColor,fontColor:n,lineWidth:l.borderWidth,pointStyle:s,hidden:!t.getDataVisibility(r),index:r}})}return[]}},onClick(t,e,s){s.chart.toggleDataVisibility(e.index),s.chart.update()}}},scales:{r:{type:"radialLinear",angleLines:{display:!1},beginAtZero:!0,grid:{circular:!0},pointLabels:{display:!1},startAngle:0}}});var ui=class extends Ut{};C(ui,"id","pie"),C(ui,"defaults",{cutout:0,rotation:0,circumference:360,radius:"100%"});var Ve=class extends bt{getLabelAndValue(t){let e=this._cachedMeta.vScale,s=this.getParsed(t);return{label:e.getLabels()[t],value:""+e.getLabelForValue(s[e.axis])}}parseObjectData(t,e,s,n){return fn.bind(this)(t,e,s,n)}update(t){let e=this._cachedMeta,s=e.dataset,n=e.data||[],o=e.iScale.getLabels();if(s.points=n,t!=="resize"){let r=this.resolveDatasetElementOptions(t);this.options.showLine||(r.borderWidth=0);let a={_loop:!0,_fullLoop:o.length===n.length,options:r};this.updateElement(s,void 0,a,t)}this.updateElements(n,0,n.length,t)}updateElements(t,e,s,n){let o=this._cachedMeta.rScale,r=n==="reset";for(let a=e;a<e+s;a++){let l=t[a],h=this.resolveDataElementOptions(a,l.active?"active":n),c=o.getPointPositionForValue(a,this.getParsed(a).r),d=r?o.xCenter:c.x,u=r?o.yCenter:c.y,g={x:d,y:u,angle:c.angle,skip:isNaN(d)||isNaN(u),options:h};this.updateElement(l,a,g,n)}}};C(Ve,"id","radar"),C(Ve,"defaults",{datasetElementType:"line",dataElementType:"point",indexAxis:"r",showLine:!0,elements:{line:{fill:"start"}}}),C(Ve,"overrides",{aspectRatio:1,scales:{r:{type:"radialLinear"}}});var $e=class extends bt{getLabelAndValue(t){let e=this._cachedMeta,s=this.chart.data.labels||[],{xScale:n,yScale:o}=e,r=this.getParsed(t),a=n.getLabelForValue(r.x),l=o.getLabelForValue(r.y);return{label:s[t]||"",value:"("+a+", "+l+")"}}update(t){let e=this._cachedMeta,{data:s=[]}=e,n=this.chart._animationsDisabled,{start:o,count:r}=sn(e,s,n);if(this._drawStart=o,this._drawCount=r,nn(e)&&(o=0,r=s.length),this.options.showLine){this.datasetElementType||this.addElements();let{dataset:a,_dataset:l}=e;a._chart=this.chart,a._datasetIndex=this.index,a._decimated=!!l._decimated,a.points=s;let h=this.resolveDatasetElementOptions(t);h.segment=this.options.segment,this.updateElement(a,void 0,{animated:!n,options:h},t)}else this.datasetElementType&&(delete e.dataset,this.datasetElementType=!1);this.updateElements(s,o,r,t)}addElements(){let{showLine:t}=this.options;!this.datasetElementType&&t&&(this.datasetElementType=this.chart.registry.getElement("line")),super.addElements()}updateElements(t,e,s,n){let o=n==="reset",{iScale:r,vScale:a,_stacked:l,_dataset:h}=this._cachedMeta,c=this.resolveDataElementOptions(e,n),d=this.getSharedOptions(c),u=this.includeOptions(n,d),g=r.axis,f=a.axis,{spanGaps:p,segment:m}=this.options,v=ue(p)?p:Number.POSITIVE_INFINITY,_=this.chart._animationsDisabled||o||n==="none",k=e>0&&this.getParsed(e-1);for(let S=e;S<e+s;++S){let y=t[S],b=this.getParsed(S),w=_?y:{},A=F(b[f]),P=w[g]=r.getPixelForValue(b[g],S),E=w[f]=o||A?a.getBasePixel():a.getPixelForValue(l?this.applyStack(a,b,l):b[f],S);w.skip=isNaN(P)||isNaN(E)||A,w.stop=S>0&&Math.abs(b[g]-k[g])>v,m&&(w.parsed=b,w.raw=h.data[S]),u&&(w.options=d||this.resolveDataElementOptions(S,y.active?"active":n)),_||this.updateElement(y,S,w,n),k=b}this.updateSharedOptions(d,n,c)}getMaxOverflow(){let t=this._cachedMeta,e=t.data||[];if(!this.options.showLine){let a=0;for(let l=e.length-1;l>=0;--l)a=Math.max(a,e[l].size(this.resolveDataElementOptions(l))/2);return a>0&&a}let s=t.dataset,n=s.options&&s.options.borderWidth||0;if(!e.length)return n;let o=e[0].size(this.resolveDataElementOptions(0)),r=e[e.length-1].size(this.resolveDataElementOptions(e.length-1));return Math.max(n,o,r)/2}};C($e,"id","scatter"),C($e,"defaults",{datasetElementType:!1,dataElementType:"point",showLine:!1,fill:!1}),C($e,"overrides",{interaction:{mode:"point"},scales:{x:{type:"linear"},y:{type:"linear"}}});var ec=Object.freeze({__proto__:null,BarController:Be,BubbleController:ze,DoughnutController:Ut,LineController:je,PieController:ui,PolarAreaController:ve,RadarController:Ve,ScatterController:$e});function ge(){throw new Error("This method is not implemented: Check that a complete date adapter is provided.")}var On=class i{constructor(t){C(this,"options");this.options=t||{}}static override(t){Object.assign(i.prototype,t)}init(){}formats(){return ge()}parse(){return ge()}format(){return ge()}add(){return ge()}diff(){return ge()}startOf(){return ge()}endOf(){return ge()}},ic={_date:On};function sc(i,t,e,s){let{controller:n,data:o,_sorted:r}=i,a=n._cachedMeta.iScale,l=i.dataset&&i.dataset.options?i.dataset.options.spanGaps:null;if(a&&t===a.axis&&t!=="r"&&r&&o.length){let h=a._reversePixels?Ho:Pt;if(s){if(n._sharedOptions){let c=o[0],d=typeof c.getRange=="function"&&c.getRange(t);if(d){let u=h(o,t,e-d),g=h(o,t,e+d);return{lo:u.lo,hi:g.hi}}}}else{let c=h(o,t,e);if(l){let{vScale:d}=n._cachedMeta,{_parsed:u}=i,g=u.slice(0,c.lo+1).reverse().findIndex(p=>!F(p[d.axis]));c.lo-=Math.max(0,g);let f=u.slice(c.hi).findIndex(p=>!F(p[d.axis]));c.hi+=Math.max(0,f)}return c}}return{lo:0,hi:o.length-1}}function ki(i,t,e,s,n){let o=i.getSortedVisibleDatasetMetas(),r=e[t];for(let a=0,l=o.length;a<l;++a){let{index:h,data:c}=o[a],{lo:d,hi:u}=sc(o[a],t,r,n);for(let g=d;g<=u;++g){let f=c[g];f.skip||s(f,h,g)}}}function nc(i){let t=i.indexOf("x")!==-1,e=i.indexOf("y")!==-1;return function(s,n){let o=t?Math.abs(s.x-n.x):0,r=e?Math.abs(s.y-n.y):0;return Math.sqrt(Math.pow(o,2)+Math.pow(r,2))}}function An(i,t,e,s,n){let o=[];return!n&&!i.isPointInArea(t)||ki(i,e,t,function(a,l,h){!n&&!Mt(a,i.chartArea,0)||a.inRange(t.x,t.y,s)&&o.push({element:a,datasetIndex:l,index:h})},!0),o}function oc(i,t,e,s){let n=[];function o(r,a,l){let{startAngle:h,endAngle:c}=r.getProps(["startAngle","endAngle"],s),{angle:d}=Gs(r,{x:t.x,y:t.y});Le(d,h,c)&&n.push({element:r,datasetIndex:a,index:l})}return ki(i,e,t,o),n}function rc(i,t,e,s,n,o){let r=[],a=nc(e),l=Number.POSITIVE_INFINITY;function h(c,d,u){let g=c.inRange(t.x,t.y,n);if(s&&!g)return;let f=c.getCenterPoint(n);if(!(!!o||i.isPointInArea(f))&&!g)return;let m=a(t,f);m<l?(r=[{element:c,datasetIndex:d,index:u}],l=m):m===l&&r.push({element:c,datasetIndex:d,index:u})}return ki(i,e,t,h),r}function Cn(i,t,e,s,n,o){return!o&&!i.isPointInArea(t)?[]:e==="r"&&!s?oc(i,t,e,n):rc(i,t,e,s,n,o)}function gr(i,t,e,s,n){let o=[],r=e==="x"?"inXRange":"inYRange",a=!1;return ki(i,e,t,(l,h,c)=>{l[r]&&l[r](t[e],n)&&(o.push({element:l,datasetIndex:h,index:c}),a=a||l.inRange(t.x,t.y,n))}),s&&!a?[]:o}var ac={evaluateInteractionItems:ki,modes:{index(i,t,e,s){let n=ne(t,i),o=e.axis||"x",r=e.includeInvisible||!1,a=e.intersect?An(i,n,o,s,r):Cn(i,n,o,!1,s,r),l=[];return a.length?(i.getSortedVisibleDatasetMetas().forEach(h=>{let c=a[0].index,d=h.data[c];d&&!d.skip&&l.push({element:d,datasetIndex:h.index,index:c})}),l):[]},dataset(i,t,e,s){let n=ne(t,i),o=e.axis||"xy",r=e.includeInvisible||!1,a=e.intersect?An(i,n,o,s,r):Cn(i,n,o,!1,s,r);if(a.length>0){let l=a[0].datasetIndex,h=i.getDatasetMeta(l).data;a=[];for(let c=0;c<h.length;++c)a.push({element:h[c],datasetIndex:l,index:c})}return a},point(i,t,e,s){let n=ne(t,i),o=e.axis||"xy",r=e.includeInvisible||!1;return An(i,n,o,s,r)},nearest(i,t,e,s){let n=ne(t,i),o=e.axis||"xy",r=e.includeInvisible||!1;return Cn(i,n,o,e.intersect,s,r)},x(i,t,e,s){let n=ne(t,i);return gr(i,n,"x",e.intersect,s)},y(i,t,e,s){let n=ne(t,i);return gr(i,n,"y",e.intersect,s)}}},ra=["left","top","right","bottom"];function li(i,t){return i.filter(e=>e.pos===t)}function pr(i,t){return i.filter(e=>ra.indexOf(e.pos)===-1&&e.box.axis===t)}function hi(i,t){return i.sort((e,s)=>{let n=t?s:e,o=t?e:s;return n.weight===o.weight?n.index-o.index:n.weight-o.weight})}function lc(i){let t=[],e,s,n,o,r,a;for(e=0,s=(i||[]).length;e<s;++e)n=i[e],{position:o,options:{stack:r,stackWeight:a=1}}=n,t.push({index:e,box:n,pos:o,horizontal:n.isHorizontal(),weight:n.weight,stack:r&&o+r,stackWeight:a});return t}function hc(i){let t={};for(let e of i){let{stack:s,pos:n,stackWeight:o}=e;if(!s||!ra.includes(n))continue;let r=t[s]||(t[s]={count:0,placed:0,weight:0,size:0});r.count++,r.weight+=o}return t}function cc(i,t){let e=hc(i),{vBoxMaxWidth:s,hBoxMaxHeight:n}=t,o,r,a;for(o=0,r=i.length;o<r;++o){a=i[o];let{fullSize:l}=a.box,h=e[a.stack],c=h&&a.stackWeight/h.weight;a.horizontal?(a.width=c?c*s:l&&t.availableWidth,a.height=n):(a.width=s,a.height=c?c*n:l&&t.availableHeight)}return e}function dc(i){let t=lc(i),e=hi(t.filter(h=>h.box.fullSize),!0),s=hi(li(t,"left"),!0),n=hi(li(t,"right")),o=hi(li(t,"top"),!0),r=hi(li(t,"bottom")),a=pr(t,"x"),l=pr(t,"y");return{fullSize:e,leftAndTop:s.concat(o),rightAndBottom:n.concat(l).concat(r).concat(a),chartArea:li(t,"chartArea"),vertical:s.concat(n).concat(l),horizontal:o.concat(r).concat(a)}}function mr(i,t,e,s){return Math.max(i[e],t[e])+Math.max(i[s],t[s])}function aa(i,t){i.top=Math.max(i.top,t.top),i.left=Math.max(i.left,t.left),i.bottom=Math.max(i.bottom,t.bottom),i.right=Math.max(i.right,t.right)}function uc(i,t,e,s){let{pos:n,box:o}=e,r=i.maxPadding;if(!H(n)){e.size&&(i[n]-=e.size);let d=s[e.stack]||{size:0,count:1};d.size=Math.max(d.size,e.horizontal?o.height:o.width),e.size=d.size/d.count,i[n]+=e.size}o.getPadding&&aa(r,o.getPadding());let a=Math.max(0,t.outerWidth-mr(r,i,"left","right")),l=Math.max(0,t.outerHeight-mr(r,i,"top","bottom")),h=a!==i.w,c=l!==i.h;return i.w=a,i.h=l,e.horizontal?{same:h,other:c}:{same:c,other:h}}function fc(i){let t=i.maxPadding;function e(s){let n=Math.max(t[s]-i[s],0);return i[s]+=n,n}i.y+=e("top"),i.x+=e("left"),e("right"),e("bottom")}function gc(i,t){let e=t.maxPadding;function s(n){let o={left:0,top:0,right:0,bottom:0};return n.forEach(r=>{o[r]=Math.max(t[r],e[r])}),o}return s(i?["left","right"]:["top","bottom"])}function fi(i,t,e,s){let n=[],o,r,a,l,h,c;for(o=0,r=i.length,h=0;o<r;++o){a=i[o],l=a.box,l.update(a.width||t.w,a.height||t.h,gc(a.horizontal,t));let{same:d,other:u}=uc(t,e,a,s);h|=d&&n.length,c=c||u,l.fullSize||n.push(a)}return h&&fi(n,t,e,s)||c}function as(i,t,e,s,n){i.top=e,i.left=t,i.right=t+s,i.bottom=e+n,i.width=s,i.height=n}function br(i,t,e,s){let n=e.padding,{x:o,y:r}=t;for(let a of i){let l=a.box,h=s[a.stack]||{count:1,placed:0,weight:1},c=a.stackWeight/h.weight||1;if(a.horizontal){let d=t.w*c,u=h.size||l.height;De(h.start)&&(r=h.start),l.fullSize?as(l,n.left,r,e.outerWidth-n.right-n.left,u):as(l,t.left+h.placed,r,d,u),h.start=r,h.placed+=d,r=l.bottom}else{let d=t.h*c,u=h.size||l.width;De(h.start)&&(o=h.start),l.fullSize?as(l,o,n.top,u,e.outerHeight-n.bottom-n.top):as(l,o,t.top+h.placed,u,d),h.start=o,h.placed+=d,o=l.right}}t.x=o,t.y=r}var rt={addBox(i,t){i.boxes||(i.boxes=[]),t.fullSize=t.fullSize||!1,t.position=t.position||"top",t.weight=t.weight||0,t._layers=t._layers||function(){return[{z:0,draw(e){t.draw(e)}}]},i.boxes.push(t)},removeBox(i,t){let e=i.boxes?i.boxes.indexOf(t):-1;e!==-1&&i.boxes.splice(e,1)},configure(i,t,e){t.fullSize=e.fullSize,t.position=e.position,t.weight=e.weight},update(i,t,e,s){if(!i)return;let n=nt(i.options.layout.padding),o=Math.max(t-n.width,0),r=Math.max(e-n.height,0),a=dc(i.boxes),l=a.vertical,h=a.horizontal;z(i.boxes,p=>{typeof p.beforeLayout=="function"&&p.beforeLayout()});let c=l.reduce((p,m)=>m.box.options&&m.box.options.display===!1?p:p+1,0)||1,d=Object.freeze({outerWidth:t,outerHeight:e,padding:n,availableWidth:o,availableHeight:r,vBoxMaxWidth:o/2/c,hBoxMaxHeight:r/2}),u=Object.assign({},n);aa(u,nt(s));let g=Object.assign({maxPadding:u,w:o,h:r,x:n.left,y:n.top},n),f=cc(l.concat(h),d);fi(a.fullSize,g,d,f),fi(l,g,d,f),fi(h,g,d,f)&&fi(l,g,d,f),fc(g),br(a.leftAndTop,g,d,f),g.x+=g.w,g.y+=g.h,br(a.rightAndBottom,g,d,f),i.chartArea={left:g.left,top:g.top,right:g.left+g.w,bottom:g.top+g.h,height:g.h,width:g.w},z(a.chartArea,p=>{let m=p.box;Object.assign(m,i.chartArea),m.update(g.w,g.h,{left:0,top:0,right:0,bottom:0})})}},ms=class{acquireContext(t,e){}releaseContext(t){return!1}addEventListener(t,e,s){}removeEventListener(t,e,s){}getDevicePixelRatio(){return 1}getMaximumSize(t,e,s,n){return e=Math.max(0,e||t.width),s=s||t.height,{width:e,height:Math.max(0,n?Math.floor(e/n):s)}}isAttached(t){return!0}updateConfig(t){}},Ln=class extends ms{acquireContext(t){return t&&t.getContext&&t.getContext("2d")||null}updateConfig(t){t.options.animation=!1}},fs="$chartjs",pc={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"},vr=i=>i===null||i==="";function mc(i,t){let e=i.style,s=i.getAttribute("height"),n=i.getAttribute("width");if(i[fs]={initial:{height:s,width:n,style:{display:e.display,height:e.height,width:e.width}}},e.display=e.display||"block",e.boxSizing=e.boxSizing||"border-box",vr(n)){let o=pn(i,"width");o!==void 0&&(i.width=o)}if(vr(s))if(i.style.height==="")i.height=i.width/(t||2);else{let o=pn(i,"height");o!==void 0&&(i.height=o)}return i}var la=tr?{passive:!0}:!1;function bc(i,t,e){i&&i.addEventListener(t,e,la)}function vc(i,t,e){i&&i.canvas&&i.canvas.removeEventListener(t,e,la)}function _c(i,t){let e=pc[i.type]||i.type,{x:s,y:n}=ne(i,t);return{type:e,chart:t,native:i,x:s!==void 0?s:null,y:n!==void 0?n:null}}function bs(i,t){for(let e of i)if(e===t||e.contains(t))return!0}function xc(i,t,e){let s=i.canvas,n=new MutationObserver(o=>{let r=!1;for(let a of o)r=r||bs(a.addedNodes,s),r=r&&!bs(a.removedNodes,s);r&&e()});return n.observe(document,{childList:!0,subtree:!0}),n}function yc(i,t,e){let s=i.canvas,n=new MutationObserver(o=>{let r=!1;for(let a of o)r=r||bs(a.removedNodes,s),r=r&&!bs(a.addedNodes,s);r&&e()});return n.observe(document,{childList:!0,subtree:!0}),n}var xi=new Map,_r=0;function ha(){let i=window.devicePixelRatio;i!==_r&&(_r=i,xi.forEach((t,e)=>{e.currentDevicePixelRatio!==i&&t()}))}function wc(i,t){xi.size||window.addEventListener("resize",ha),xi.set(i,t)}function kc(i){xi.delete(i),xi.size||window.removeEventListener("resize",ha)}function Sc(i,t,e){let s=i.canvas,n=s&&os(s);if(!n)return;let o=en((a,l)=>{let h=n.clientWidth;e(a,l),h<n.clientWidth&&e()},window),r=new ResizeObserver(a=>{let l=a[0],h=l.contentRect.width,c=l.contentRect.height;h===0&&c===0||o(h,c)});return r.observe(n),wc(i,o),r}function Pn(i,t,e){e&&e.disconnect(),t==="resize"&&kc(i)}function Ac(i,t,e){let s=i.canvas,n=en(o=>{i.ctx!==null&&e(_c(o,i))},i);return bc(s,t,n),n}var In=class extends ms{acquireContext(t,e){let s=t&&t.getContext&&t.getContext("2d");return s&&s.canvas===t?(mc(t,e),s):null}releaseContext(t){let e=t.canvas;if(!e[fs])return!1;let s=e[fs].initial;["height","width"].forEach(o=>{let r=s[o];F(r)?e.removeAttribute(o):e.setAttribute(o,r)});let n=s.style||{};return Object.keys(n).forEach(o=>{e.style[o]=n[o]}),e.width=e.width,delete e[fs],!0}addEventListener(t,e,s){this.removeEventListener(t,e);let n=t.$proxies||(t.$proxies={}),r={attach:xc,detach:yc,resize:Sc}[e]||Ac;n[e]=r(t,e,s)}removeEventListener(t,e){let s=t.$proxies||(t.$proxies={}),n=s[e];if(!n)return;({attach:Pn,detach:Pn,resize:Pn}[e]||vc)(t,e,n),s[e]=void 0}getDevicePixelRatio(){return window.devicePixelRatio}getMaximumSize(t,e,s,n){return Qo(t,e,s,n)}isAttached(t){let e=t&&os(t);return!!(e&&e.isConnected)}};function Cc(i){return!ns()||typeof OffscreenCanvas<"u"&&i instanceof OffscreenCanvas?Ln:In}var vt=class{constructor(){C(this,"x");C(this,"y");C(this,"active",!1);C(this,"options");C(this,"$animations")}tooltipPosition(t){let{x:e,y:s}=this.getProps(["x","y"],t);return{x:e,y:s}}hasValue(){return ue(this.x)&&ue(this.y)}getProps(t,e){let s=this.$animations;if(!e||!s)return this;let n={};return t.forEach(o=>{n[o]=s[o]&&s[o].active()?s[o]._to:this[o]}),n}};C(vt,"defaults",{}),C(vt,"defaultRoutes");function Pc(i,t){let e=i.options.ticks,s=Mc(i),n=Math.min(e.maxTicksLimit||s,s),o=e.major.enabled?Ec(t):[],r=o.length,a=o[0],l=o[r-1],h=[];if(r>n)return Rc(t,h,o,r/n),h;let c=Tc(o,t,n);if(r>0){let d,u,g=r>1?Math.round((l-a)/(r-1)):null;for(ls(t,h,c,F(g)?0:a-g,a),d=0,u=r-1;d<u;d++)ls(t,h,c,o[d],o[d+1]);return ls(t,h,c,l,F(g)?t.length:l+g),h}return ls(t,h,c),h}function Mc(i){let t=i.options.offset,e=i._tickSize(),s=i._length/e+(t?0:1),n=i._maxLength/e;return Math.floor(Math.min(s,n))}function Tc(i,t,e){let s=Dc(i),n=t.length/e;if(!s)return Math.max(n,1);let o=Lo(s);for(let r=0,a=o.length-1;r<a;r++){let l=o[r];if(l>n)return l}return Math.max(n,1)}function Ec(i){let t=[],e,s;for(e=0,s=i.length;e<s;e++)i[e].major&&t.push(e);return t}function Rc(i,t,e,s){let n=0,o=e[0],r;for(s=Math.ceil(s),r=0;r<i.length;r++)r===o&&(t.push(i[r]),n++,o=e[n*s])}function ls(i,t,e,s,n){let o=O(s,0),r=Math.min(O(n,i.length),i.length),a=0,l,h,c;for(e=Math.ceil(e),n&&(l=n-s,e=l/Math.floor(l/e)),c=o;c<0;)a++,c=Math.round(o+a*e);for(h=Math.max(o,0);h<r;h++)h===c&&(t.push(i[h]),a++,c=Math.round(o+a*e))}function Dc(i){let t=i.length,e,s;if(t<2)return!1;for(s=i[0],e=1;e<t;++e)if(i[e]-i[e-1]!==s)return!1;return s}var Oc=i=>i==="left"?"right":i==="right"?"left":i,xr=(i,t,e)=>t==="top"||t==="left"?i[t]+e:i[t]-e,yr=(i,t)=>Math.min(t||i,i);function wr(i,t){let e=[],s=i.length/t,n=i.length,o=0;for(;o<n;o+=s)e.push(i[Math.floor(o)]);return e}function Lc(i,t,e){let s=i.ticks.length,n=Math.min(t,s-1),o=i._startPixel,r=i._endPixel,a=1e-6,l=i.getPixelForTick(n),h;if(!(e&&(s===1?h=Math.max(l-o,r-l):t===0?h=(i.getPixelForTick(1)-l)/2:h=(l-i.getPixelForTick(n-1))/2,l+=n<t?h:-h,l<o-a||l>r+a)))return l}function Ic(i,t){z(i,e=>{let s=e.gc,n=s.length/2,o;if(n>t){for(o=0;o<n;++o)delete e.data[s[o]];s.splice(0,n)}})}function ci(i){return i.drawTicks?i.tickLength:0}function kr(i,t){if(!i.display)return 0;let e=Z(i.font,t),s=nt(i.padding);return(W(i.text)?i.text.length:1)*e.lineHeight+s.height}function Fc(i,t){return Vt(i,{scale:t,type:"scale"})}function Hc(i,t,e){return Vt(i,{tick:e,index:t,type:"tick"})}function Nc(i,t,e){let s=Qi(i);return(e&&t!=="right"||!e&&t==="right")&&(s=Oc(s)),s}function Bc(i,t,e,s){let{top:n,left:o,bottom:r,right:a,chart:l}=i,{chartArea:h,scales:c}=l,d=0,u,g,f,p=r-n,m=a-o;if(i.isHorizontal()){if(g=st(s,o,a),H(e)){let v=Object.keys(e)[0],_=e[v];f=c[v].getPixelForValue(_)+p-t}else e==="center"?f=(h.bottom+h.top)/2+p-t:f=xr(i,e,t);u=a-o}else{if(H(e)){let v=Object.keys(e)[0],_=e[v];g=c[v].getPixelForValue(_)-m+t}else e==="center"?g=(h.left+h.right)/2-m+t:g=xr(i,e,t);f=st(s,r,n),d=e==="left"?-q:q}return{titleX:g,titleY:f,maxWidth:u,rotation:d}}var xe=class i extends vt{constructor(t){super(),this.id=t.id,this.type=t.type,this.options=void 0,this.ctx=t.ctx,this.chart=t.chart,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this._margins={left:0,right:0,top:0,bottom:0},this.maxWidth=void 0,this.maxHeight=void 0,this.paddingTop=void 0,this.paddingBottom=void 0,this.paddingLeft=void 0,this.paddingRight=void 0,this.axis=void 0,this.labelRotation=void 0,this.min=void 0,this.max=void 0,this._range=void 0,this.ticks=[],this._gridLineItems=null,this._labelItems=null,this._labelSizes=null,this._length=0,this._maxLength=0,this._longestTextCache={},this._startPixel=void 0,this._endPixel=void 0,this._reversePixels=!1,this._userMax=void 0,this._userMin=void 0,this._suggestedMax=void 0,this._suggestedMin=void 0,this._ticksLength=0,this._borderValue=0,this._cache={},this._dataLimitsCached=!1,this.$context=void 0}init(t){this.options=t.setContext(this.getContext()),this.axis=t.axis,this._userMin=this.parse(t.min),this._userMax=this.parse(t.max),this._suggestedMin=this.parse(t.suggestedMin),this._suggestedMax=this.parse(t.suggestedMax)}parse(t,e){return t}getUserBounds(){let{_userMin:t,_userMax:e,_suggestedMin:s,_suggestedMax:n}=this;return t=dt(t,Number.POSITIVE_INFINITY),e=dt(e,Number.NEGATIVE_INFINITY),s=dt(s,Number.POSITIVE_INFINITY),n=dt(n,Number.NEGATIVE_INFINITY),{min:dt(t,s),max:dt(e,n),minDefined:J(t),maxDefined:J(e)}}getMinMax(t){let{min:e,max:s,minDefined:n,maxDefined:o}=this.getUserBounds(),r;if(n&&o)return{min:e,max:s};let a=this.getMatchingVisibleMetas();for(let l=0,h=a.length;l<h;++l)r=a[l].controller.getMinMax(this,t),n||(e=Math.min(e,r.min)),o||(s=Math.max(s,r.max));return e=o&&e>s?s:e,s=n&&e>s?e:s,{min:dt(e,dt(s,e)),max:dt(s,dt(e,s))}}getPadding(){return{left:this.paddingLeft||0,top:this.paddingTop||0,right:this.paddingRight||0,bottom:this.paddingBottom||0}}getTicks(){return this.ticks}getLabels(){let t=this.chart.data;return this.options.labels||(this.isHorizontal()?t.xLabels:t.yLabels)||t.labels||[]}getLabelItems(t=this.chart.chartArea){return this._labelItems||(this._labelItems=this._computeLabelItems(t))}beforeLayout(){this._cache={},this._dataLimitsCached=!1}beforeUpdate(){V(this.options.beforeUpdate,[this])}update(t,e,s){let{beginAtZero:n,grace:o,ticks:r}=this.options,a=r.sampleSize;this.beforeUpdate(),this.maxWidth=t,this.maxHeight=e,this._margins=s=Object.assign({left:0,right:0,top:0,bottom:0},s),this.ticks=null,this._labelSizes=null,this._gridLineItems=null,this._labelItems=null,this.beforeSetDimensions(),this.setDimensions(),this.afterSetDimensions(),this._maxLength=this.isHorizontal()?this.width+s.left+s.right:this.height+s.top+s.bottom,this._dataLimitsCached||(this.beforeDataLimits(),this.determineDataLimits(),this.afterDataLimits(),this._range=Yo(this,o,n),this._dataLimitsCached=!0),this.beforeBuildTicks(),this.ticks=this.buildTicks()||[],this.afterBuildTicks();let l=a<this.ticks.length;this._convertTicksToLabels(l?wr(this.ticks,a):this.ticks),this.configure(),this.beforeCalculateLabelRotation(),this.calculateLabelRotation(),this.afterCalculateLabelRotation(),r.display&&(r.autoSkip||r.source==="auto")&&(this.ticks=Pc(this,this.ticks),this._labelSizes=null,this.afterAutoSkip()),l&&this._convertTicksToLabels(this.ticks),this.beforeFit(),this.fit(),this.afterFit(),this.afterUpdate()}configure(){let t=this.options.reverse,e,s;this.isHorizontal()?(e=this.left,s=this.right):(e=this.top,s=this.bottom,t=!t),this._startPixel=e,this._endPixel=s,this._reversePixels=t,this._length=s-e,this._alignToPixels=this.options.alignToPixels}afterUpdate(){V(this.options.afterUpdate,[this])}beforeSetDimensions(){V(this.options.beforeSetDimensions,[this])}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=0,this.right=this.width):(this.height=this.maxHeight,this.top=0,this.bottom=this.height),this.paddingLeft=0,this.paddingTop=0,this.paddingRight=0,this.paddingBottom=0}afterSetDimensions(){V(this.options.afterSetDimensions,[this])}_callHooks(t){this.chart.notifyPlugins(t,this.getContext()),V(this.options[t],[this])}beforeDataLimits(){this._callHooks("beforeDataLimits")}determineDataLimits(){}afterDataLimits(){this._callHooks("afterDataLimits")}beforeBuildTicks(){this._callHooks("beforeBuildTicks")}buildTicks(){return[]}afterBuildTicks(){this._callHooks("afterBuildTicks")}beforeTickToLabelConversion(){V(this.options.beforeTickToLabelConversion,[this])}generateTickLabels(t){let e=this.options.ticks,s,n,o;for(s=0,n=t.length;s<n;s++)o=t[s],o.label=V(e.callback,[o.value,s,t],this)}afterTickToLabelConversion(){V(this.options.afterTickToLabelConversion,[this])}beforeCalculateLabelRotation(){V(this.options.beforeCalculateLabelRotation,[this])}calculateLabelRotation(){let t=this.options,e=t.ticks,s=yr(this.ticks.length,t.ticks.maxTicksLimit),n=e.minRotation||0,o=e.maxRotation,r=n,a,l,h;if(!this._isVisible()||!e.display||n>=o||s<=1||!this.isHorizontal()){this.labelRotation=n;return}let c=this._getLabelSizes(),d=c.widest.width,u=c.highest.height,g=tt(this.chart.width-d,0,this.maxWidth);a=t.offset?this.maxWidth/s:g/(s-1),d+6>a&&(a=g/(s-(t.offset?.5:1)),l=this.maxHeight-ci(t.grid)-e.padding-kr(t.title,this.chart.options.font),h=Math.sqrt(d*d+u*u),r=Gi(Math.min(Math.asin(tt((c.highest.height+6)/a,-1,1)),Math.asin(tt(l/h,-1,1))-Math.asin(tt(u/h,-1,1)))),r=Math.max(n,Math.min(o,r))),this.labelRotation=r}afterCalculateLabelRotation(){V(this.options.afterCalculateLabelRotation,[this])}afterAutoSkip(){}beforeFit(){V(this.options.beforeFit,[this])}fit(){let t={width:0,height:0},{chart:e,options:{ticks:s,title:n,grid:o}}=this,r=this._isVisible(),a=this.isHorizontal();if(r){let l=kr(n,e.options.font);if(a?(t.width=this.maxWidth,t.height=ci(o)+l):(t.height=this.maxHeight,t.width=ci(o)+l),s.display&&this.ticks.length){let{first:h,last:c,widest:d,highest:u}=this._getLabelSizes(),g=s.padding*2,f=wt(this.labelRotation),p=Math.cos(f),m=Math.sin(f);if(a){let v=s.mirror?0:m*d.width+p*u.height;t.height=Math.min(this.maxHeight,t.height+v+g)}else{let v=s.mirror?0:p*d.width+m*u.height;t.width=Math.min(this.maxWidth,t.width+v+g)}this._calculatePadding(h,c,m,p)}}this._handleMargins(),a?(this.width=this._length=e.width-this._margins.left-this._margins.right,this.height=t.height):(this.width=t.width,this.height=this._length=e.height-this._margins.top-this._margins.bottom)}_calculatePadding(t,e,s,n){let{ticks:{align:o,padding:r},position:a}=this.options,l=this.labelRotation!==0,h=a!=="top"&&this.axis==="x";if(this.isHorizontal()){let c=this.getPixelForTick(0)-this.left,d=this.right-this.getPixelForTick(this.ticks.length-1),u=0,g=0;l?h?(u=n*t.width,g=s*e.height):(u=s*t.height,g=n*e.width):o==="start"?g=e.width:o==="end"?u=t.width:o!=="inner"&&(u=t.width/2,g=e.width/2),this.paddingLeft=Math.max((u-c+r)*this.width/(this.width-c),0),this.paddingRight=Math.max((g-d+r)*this.width/(this.width-d),0)}else{let c=e.height/2,d=t.height/2;o==="start"?(c=0,d=t.height):o==="end"&&(c=e.height,d=0),this.paddingTop=c+r,this.paddingBottom=d+r}}_handleMargins(){this._margins&&(this._margins.left=Math.max(this.paddingLeft,this._margins.left),this._margins.top=Math.max(this.paddingTop,this._margins.top),this._margins.right=Math.max(this.paddingRight,this._margins.right),this._margins.bottom=Math.max(this.paddingBottom,this._margins.bottom))}afterFit(){V(this.options.afterFit,[this])}isHorizontal(){let{axis:t,position:e}=this.options;return e==="top"||e==="bottom"||t==="x"}isFullSize(){return this.options.fullSize}_convertTicksToLabels(t){this.beforeTickToLabelConversion(),this.generateTickLabels(t);let e,s;for(e=0,s=t.length;e<s;e++)F(t[e].label)&&(t.splice(e,1),s--,e--);this.afterTickToLabelConversion()}_getLabelSizes(){let t=this._labelSizes;if(!t){let e=this.options.ticks.sampleSize,s=this.ticks;e<s.length&&(s=wr(s,e)),this._labelSizes=t=this._computeLabelSizes(s,s.length,this.options.ticks.maxTicksLimit)}return t}_computeLabelSizes(t,e,s){let{ctx:n,_longestTextCache:o}=this,r=[],a=[],l=Math.floor(e/yr(e,s)),h=0,c=0,d,u,g,f,p,m,v,_,k,S,y;for(d=0;d<e;d+=l){if(f=t[d].label,p=this._resolveTickFontOptions(d),n.font=m=p.string,v=o[m]=o[m]||{data:{},gc:[]},_=p.lineHeight,k=S=0,!F(f)&&!W(f))k=ii(n,v.data,v.gc,k,f),S=_;else if(W(f))for(u=0,g=f.length;u<g;++u)y=f[u],!F(y)&&!W(y)&&(k=ii(n,v.data,v.gc,k,y),S+=_);r.push(k),a.push(S),h=Math.max(k,h),c=Math.max(S,c)}Ic(o,e);let b=r.indexOf(h),w=a.indexOf(c),A=P=>({width:r[P]||0,height:a[P]||0});return{first:A(0),last:A(e-1),widest:A(b),highest:A(w),widths:r,heights:a}}getLabelForValue(t){return t}getPixelForValue(t,e){return NaN}getValueForPixel(t){}getPixelForTick(t){let e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getPixelForDecimal(t){this._reversePixels&&(t=1-t);let e=this._startPixel+t*this._length;return Fo(this._alignToPixels?ee(this.chart,e,0):e)}getDecimalForPixel(t){let e=(t-this._startPixel)/this._length;return this._reversePixels?1-e:e}getBasePixel(){return this.getPixelForValue(this.getBaseValue())}getBaseValue(){let{min:t,max:e}=this;return t<0&&e<0?e:t>0&&e>0?t:0}getContext(t){let e=this.ticks||[];if(t>=0&&t<e.length){let s=e[t];return s.$context||(s.$context=Hc(this.getContext(),t,s))}return this.$context||(this.$context=Fc(this.chart.getContext(),this))}_tickSize(){let t=this.options.ticks,e=wt(this.labelRotation),s=Math.abs(Math.cos(e)),n=Math.abs(Math.sin(e)),o=this._getLabelSizes(),r=t.autoSkipPadding||0,a=o?o.widest.width+r:0,l=o?o.highest.height+r:0;return this.isHorizontal()?l*s>a*n?a/s:l/n:l*n<a*s?l/s:a/n}_isVisible(){let t=this.options.display;return t!=="auto"?!!t:this.getMatchingVisibleMetas().length>0}_computeGridLineItems(t){let e=this.axis,s=this.chart,n=this.options,{grid:o,position:r,border:a}=n,l=o.offset,h=this.isHorizontal(),d=this.ticks.length+(l?1:0),u=ci(o),g=[],f=a.setContext(this.getContext()),p=f.display?f.width:0,m=p/2,v=function(j){return ee(s,j,p)},_,k,S,y,b,w,A,P,E,T,D,G;if(r==="top")_=v(this.bottom),w=this.bottom-u,P=_-m,T=v(t.top)+m,G=t.bottom;else if(r==="bottom")_=v(this.top),T=t.top,G=v(t.bottom)-m,w=_+m,P=this.top+u;else if(r==="left")_=v(this.right),b=this.right-u,A=_-m,E=v(t.left)+m,D=t.right;else if(r==="right")_=v(this.left),E=t.left,D=v(t.right)-m,b=_+m,A=this.left+u;else if(e==="x"){if(r==="center")_=v((t.top+t.bottom)/2+.5);else if(H(r)){let j=Object.keys(r)[0],M=r[j];_=v(this.chart.scales[j].getPixelForValue(M))}T=t.top,G=t.bottom,w=_+m,P=w+u}else if(e==="y"){if(r==="center")_=v((t.left+t.right)/2);else if(H(r)){let j=Object.keys(r)[0],M=r[j];_=v(this.chart.scales[j].getPixelForValue(M))}b=_-m,A=b-u,E=t.left,D=t.right}let it=O(n.ticks.maxTicksLimit,d),B=Math.max(1,Math.ceil(d/it));for(k=0;k<d;k+=B){let j=this.getContext(k),M=o.setContext(j),R=a.setContext(j),I=M.lineWidth,L=M.color,N=R.dash||[],mt=R.dashOffset,at=M.tickWidth,ht=M.tickColor,Ct=M.tickBorderDash||[],ot=M.tickBorderDashOffset;S=Lc(this,k,l),S!==void 0&&(y=ee(s,S,I),h?b=A=E=D=y:w=P=T=G=y,g.push({tx1:b,ty1:w,tx2:A,ty2:P,x1:E,y1:T,x2:D,y2:G,width:I,color:L,borderDash:N,borderDashOffset:mt,tickWidth:at,tickColor:ht,tickBorderDash:Ct,tickBorderDashOffset:ot}))}return this._ticksLength=d,this._borderValue=_,g}_computeLabelItems(t){let e=this.axis,s=this.options,{position:n,ticks:o}=s,r=this.isHorizontal(),a=this.ticks,{align:l,crossAlign:h,padding:c,mirror:d}=o,u=ci(s.grid),g=u+c,f=d?-c:g,p=-wt(this.labelRotation),m=[],v,_,k,S,y,b,w,A,P,E,T,D,G="middle";if(n==="top")b=this.bottom-f,w=this._getXAxisLabelAlignment();else if(n==="bottom")b=this.top+f,w=this._getXAxisLabelAlignment();else if(n==="left"){let B=this._getYAxisLabelAlignment(u);w=B.textAlign,y=B.x}else if(n==="right"){let B=this._getYAxisLabelAlignment(u);w=B.textAlign,y=B.x}else if(e==="x"){if(n==="center")b=(t.top+t.bottom)/2+g;else if(H(n)){let B=Object.keys(n)[0],j=n[B];b=this.chart.scales[B].getPixelForValue(j)+g}w=this._getXAxisLabelAlignment()}else if(e==="y"){if(n==="center")y=(t.left+t.right)/2-g;else if(H(n)){let B=Object.keys(n)[0],j=n[B];y=this.chart.scales[B].getPixelForValue(j)}w=this._getYAxisLabelAlignment(u).textAlign}e==="y"&&(l==="start"?G="top":l==="end"&&(G="bottom"));let it=this._getLabelSizes();for(v=0,_=a.length;v<_;++v){k=a[v],S=k.label;let B=o.setContext(this.getContext(v));A=this.getPixelForTick(v)+o.labelOffset,P=this._resolveTickFontOptions(v),E=P.lineHeight,T=W(S)?S.length:1;let j=T/2,M=B.color,R=B.textStrokeColor,I=B.textStrokeWidth,L=w;r?(y=A,w==="inner"&&(v===_-1?L=this.options.reverse?"left":"right":v===0?L=this.options.reverse?"right":"left":L="center"),n==="top"?h==="near"||p!==0?D=-T*E+E/2:h==="center"?D=-it.highest.height/2-j*E+E:D=-it.highest.height+E/2:h==="near"||p!==0?D=E/2:h==="center"?D=it.highest.height/2-j*E:D=it.highest.height-T*E,d&&(D*=-1),p!==0&&!B.showLabelBackdrop&&(y+=E/2*Math.sin(p))):(b=A,D=(1-T)*E/2);let N;if(B.showLabelBackdrop){let mt=nt(B.backdropPadding),at=it.heights[v],ht=it.widths[v],Ct=D-mt.top,ot=0-mt.left;switch(G){case"middle":Ct-=at/2;break;case"bottom":Ct-=at;break}switch(w){case"center":ot-=ht/2;break;case"right":ot-=ht;break;case"inner":v===_-1?ot-=ht:v>0&&(ot-=ht/2);break}N={left:ot,top:Ct,width:ht+mt.width,height:at+mt.height,color:B.backdropColor}}m.push({label:S,font:P,textOffset:D,options:{rotation:p,color:M,strokeColor:R,strokeWidth:I,textAlign:L,textBaseline:G,translation:[y,b],backdrop:N}})}return m}_getXAxisLabelAlignment(){let{position:t,ticks:e}=this.options;if(-wt(this.labelRotation))return t==="top"?"left":"right";let n="center";return e.align==="start"?n="left":e.align==="end"?n="right":e.align==="inner"&&(n="inner"),n}_getYAxisLabelAlignment(t){let{position:e,ticks:{crossAlign:s,mirror:n,padding:o}}=this.options,r=this._getLabelSizes(),a=t+o,l=r.widest.width,h,c;return e==="left"?n?(c=this.right+o,s==="near"?h="left":s==="center"?(h="center",c+=l/2):(h="right",c+=l)):(c=this.right-a,s==="near"?h="right":s==="center"?(h="center",c-=l/2):(h="left",c=this.left)):e==="right"?n?(c=this.left+o,s==="near"?h="right":s==="center"?(h="center",c-=l/2):(h="left",c-=l)):(c=this.left+a,s==="near"?h="left":s==="center"?(h="center",c+=l/2):(h="right",c=this.right)):h="right",{textAlign:h,x:c}}_computeLabelArea(){if(this.options.ticks.mirror)return;let t=this.chart,e=this.options.position;if(e==="left"||e==="right")return{top:0,left:this.left,bottom:t.height,right:this.right};if(e==="top"||e==="bottom")return{top:this.top,left:0,bottom:this.bottom,right:t.width}}drawBackground(){let{ctx:t,options:{backgroundColor:e},left:s,top:n,width:o,height:r}=this;e&&(t.save(),t.fillStyle=e,t.fillRect(s,n,o,r),t.restore())}getLineWidthForValue(t){let e=this.options.grid;if(!this._isVisible()||!e.display)return 0;let n=this.ticks.findIndex(o=>o.value===t);return n>=0?e.setContext(this.getContext(n)).lineWidth:0}drawGrid(t){let e=this.options.grid,s=this.ctx,n=this._gridLineItems||(this._gridLineItems=this._computeGridLineItems(t)),o,r,a=(l,h,c)=>{!c.width||!c.color||(s.save(),s.lineWidth=c.width,s.strokeStyle=c.color,s.setLineDash(c.borderDash||[]),s.lineDashOffset=c.borderDashOffset,s.beginPath(),s.moveTo(l.x,l.y),s.lineTo(h.x,h.y),s.stroke(),s.restore())};if(e.display)for(o=0,r=n.length;o<r;++o){let l=n[o];e.drawOnChartArea&&a({x:l.x1,y:l.y1},{x:l.x2,y:l.y2},l),e.drawTicks&&a({x:l.tx1,y:l.ty1},{x:l.tx2,y:l.ty2},{color:l.tickColor,width:l.tickWidth,borderDash:l.tickBorderDash,borderDashOffset:l.tickBorderDashOffset})}}drawBorder(){let{chart:t,ctx:e,options:{border:s,grid:n}}=this,o=s.setContext(this.getContext()),r=s.display?o.width:0;if(!r)return;let a=n.setContext(this.getContext(0)).lineWidth,l=this._borderValue,h,c,d,u;this.isHorizontal()?(h=ee(t,this.left,r)-r/2,c=ee(t,this.right,a)+a/2,d=u=l):(d=ee(t,this.top,r)-r/2,u=ee(t,this.bottom,a)+a/2,h=c=l),e.save(),e.lineWidth=o.width,e.strokeStyle=o.color,e.beginPath(),e.moveTo(h,d),e.lineTo(c,u),e.stroke(),e.restore()}drawLabels(t){if(!this.options.ticks.display)return;let s=this.ctx,n=this._computeLabelArea();n&&oi(s,n);let o=this.getLabelItems(t);for(let r of o){let a=r.options,l=r.font,h=r.label,c=r.textOffset;ie(s,h,0,c,l,a)}n&&ri(s)}drawTitle(){let{ctx:t,options:{position:e,title:s,reverse:n}}=this;if(!s.display)return;let o=Z(s.font),r=nt(s.padding),a=s.align,l=o.lineHeight/2;e==="bottom"||e==="center"||H(e)?(l+=r.bottom,W(s.text)&&(l+=o.lineHeight*(s.text.length-1))):l+=r.top;let{titleX:h,titleY:c,maxWidth:d,rotation:u}=Bc(this,l,e,a);ie(t,s.text,0,0,o,{color:s.color,maxWidth:d,rotation:u,textAlign:Nc(a,e,n),textBaseline:"middle",translation:[h,c]})}draw(t){this._isVisible()&&(this.drawBackground(),this.drawGrid(t),this.drawBorder(),this.drawTitle(),this.drawLabels(t))}_layers(){let t=this.options,e=t.ticks&&t.ticks.z||0,s=O(t.grid&&t.grid.z,-1),n=O(t.border&&t.border.z,0);return!this._isVisible()||this.draw!==i.prototype.draw?[{z:e,draw:o=>{this.draw(o)}}]:[{z:s,draw:o=>{this.drawBackground(),this.drawGrid(o),this.drawTitle()}},{z:n,draw:()=>{this.drawBorder()}},{z:e,draw:o=>{this.drawLabels(o)}}]}getMatchingVisibleMetas(t){let e=this.chart.getSortedVisibleDatasetMetas(),s=this.axis+"AxisID",n=[],o,r;for(o=0,r=e.length;o<r;++o){let a=e[o];a[s]===this.id&&(!t||a.type===t)&&n.push(a)}return n}_resolveTickFontOptions(t){let e=this.options.ticks.setContext(this.getContext(t));return Z(e.font)}_maxDigits(){let t=this._resolveTickFontOptions(0).lineHeight;return(this.isHorizontal()?this.width:this.height)/t}},Xe=class{constructor(t,e,s){this.type=t,this.scope=e,this.override=s,this.items=Object.create(null)}isForType(t){return Object.prototype.isPrototypeOf.call(this.type.prototype,t.prototype)}register(t){let e=Object.getPrototypeOf(t),s;Vc(e)&&(s=this.register(e));let n=this.items,o=t.id,r=this.scope+"."+o;if(!o)throw new Error("class does not have id: "+t);return o in n||(n[o]=t,zc(t,r,s),this.override&&Y.override(t.id,t.overrides)),r}get(t){return this.items[t]}unregister(t){let e=this.items,s=t.id,n=this.scope;s in e&&delete e[s],n&&s in Y[n]&&(delete Y[n][s],this.override&&delete te[s])}};function zc(i,t,e){let s=Te(Object.create(null),[e?Y.get(e):{},Y.get(t),i.defaults]);Y.set(t,s),i.defaultRoutes&&jc(t,i.defaultRoutes),i.descriptors&&Y.describe(t,i.descriptors)}function jc(i,t){Object.keys(t).forEach(e=>{let s=e.split("."),n=s.pop(),o=[i].concat(s).join("."),r=t[e].split("."),a=r.pop(),l=r.join(".");Y.route(o,n,l,a)})}function Vc(i){return"id"in i&&"defaults"in i}var Fn=class{constructor(){this.controllers=new Xe(bt,"datasets",!0),this.elements=new Xe(vt,"elements"),this.plugins=new Xe(Object,"plugins"),this.scales=new Xe(xe,"scales"),this._typedRegistries=[this.controllers,this.scales,this.elements]}add(...t){this._each("register",t)}remove(...t){this._each("unregister",t)}addControllers(...t){this._each("register",t,this.controllers)}addElements(...t){this._each("register",t,this.elements)}addPlugins(...t){this._each("register",t,this.plugins)}addScales(...t){this._each("register",t,this.scales)}getController(t){return this._get(t,this.controllers,"controller")}getElement(t){return this._get(t,this.elements,"element")}getPlugin(t){return this._get(t,this.plugins,"plugin")}getScale(t){return this._get(t,this.scales,"scale")}removeControllers(...t){this._each("unregister",t,this.controllers)}removeElements(...t){this._each("unregister",t,this.elements)}removePlugins(...t){this._each("unregister",t,this.plugins)}removeScales(...t){this._each("unregister",t,this.scales)}_each(t,e,s){[...e].forEach(n=>{let o=s||this._getRegistryForType(n);s||o.isForType(n)||o===this.plugins&&n.id?this._exec(t,o,n):z(n,r=>{let a=s||this._getRegistryForType(r);this._exec(t,a,r)})})}_exec(t,e,s){let n=Ki(t);V(s["before"+n],[],s),e[t](s),V(s["after"+n],[],s)}_getRegistryForType(t){for(let e=0;e<this._typedRegistries.length;e++){let s=this._typedRegistries[e];if(s.isForType(t))return s}return this.plugins}_get(t,e,s){let n=e.get(t);if(n===void 0)throw new Error('"'+t+'" is not a registered '+s+".");return n}},Dt=new Fn,Hn=class{constructor(){this._init=[]}notify(t,e,s,n){e==="beforeInit"&&(this._init=this._createDescriptors(t,!0),this._notify(this._init,t,"install"));let o=n?this._descriptors(t).filter(n):this._descriptors(t),r=this._notify(o,t,e,s);return e==="afterDestroy"&&(this._notify(o,t,"stop"),this._notify(this._init,t,"uninstall")),r}_notify(t,e,s,n){n=n||{};for(let o of t){let r=o.plugin,a=r[s],l=[e,n,o.options];if(V(a,l,r)===!1&&n.cancelable)return!1}return!0}invalidate(){F(this._cache)||(this._oldCache=this._cache,this._cache=void 0)}_descriptors(t){if(this._cache)return this._cache;let e=this._cache=this._createDescriptors(t);return this._notifyStateChanges(t),e}_createDescriptors(t,e){let s=t&&t.config,n=O(s.options&&s.options.plugins,{}),o=$c(s);return n===!1&&!e?[]:Uc(t,o,n,e)}_notifyStateChanges(t){let e=this._oldCache||[],s=this._cache,n=(o,r)=>o.filter(a=>!r.some(l=>a.plugin.id===l.plugin.id));this._notify(n(e,s),t,"stop"),this._notify(n(s,e),t,"start")}};function $c(i){let t={},e=[],s=Object.keys(Dt.plugins.items);for(let o=0;o<s.length;o++)e.push(Dt.getPlugin(s[o]));let n=i.plugins||[];for(let o=0;o<n.length;o++){let r=n[o];e.indexOf(r)===-1&&(e.push(r),t[r.id]=!0)}return{plugins:e,localIds:t}}function Wc(i,t){return!t&&i===!1?null:i===!0?{}:i}function Uc(i,{plugins:t,localIds:e},s,n){let o=[],r=i.getContext();for(let a of t){let l=a.id,h=Wc(s[l],n);h!==null&&o.push({plugin:a,options:Xc(i.config,{plugin:a,local:e[l]},h,r)})}return o}function Xc(i,{plugin:t,local:e},s,n){let o=i.pluginScopeKeys(t),r=i.getOptionScopes(s,o);return e&&t.defaults&&r.push(t.defaults),i.createResolver(r,n,[""],{scriptable:!1,indexable:!1,allKeys:!0})}function Nn(i,t){let e=Y.datasets[i]||{};return((t.datasets||{})[i]||{}).indexAxis||t.indexAxis||e.indexAxis||"x"}function Yc(i,t){let e=i;return i==="_index_"?e=t:i==="_value_"&&(e=t==="x"?"y":"x"),e}function Jc(i,t){return i===t?"_index_":"_value_"}function Sr(i){if(i==="x"||i==="y"||i==="r")return i}function qc(i){if(i==="top"||i==="bottom")return"x";if(i==="left"||i==="right")return"y"}function Bn(i,...t){if(Sr(i))return i;for(let e of t){let s=e.axis||qc(e.position)||i.length>1&&Sr(i[0].toLowerCase());if(s)return s}throw new Error(`Cannot determine type of '${i}' axis. Please provide 'axis' or 'position' option.`)}function Ar(i,t,e){if(e[t+"AxisID"]===i)return{axis:t}}function Kc(i,t){if(t.data&&t.data.datasets){let e=t.data.datasets.filter(s=>s.xAxisID===i||s.yAxisID===i);if(e.length)return Ar(i,"x",e[0])||Ar(i,"y",e[0])}return{}}function Gc(i,t){let e=te[i.type]||{scales:{}},s=t.scales||{},n=Nn(i.type,t),o=Object.create(null);return Object.keys(s).forEach(r=>{let a=s[r];if(!H(a))return console.error(`Invalid scale configuration for scale: ${r}`);if(a._proxy)return console.warn(`Ignoring resolver passed as options for scale: ${r}`);let l=Bn(r,a,Kc(r,i),Y.scales[a.type]),h=Jc(l,n),c=e.scales||{};o[r]=Re(Object.create(null),[{axis:l},a,c[l],c[h]])}),i.data.datasets.forEach(r=>{let a=r.type||i.type,l=r.indexAxis||Nn(a,t),c=(te[a]||{}).scales||{};Object.keys(c).forEach(d=>{let u=Yc(d,l),g=r[u+"AxisID"]||u;o[g]=o[g]||Object.create(null),Re(o[g],[{axis:u},s[g],c[d]])})}),Object.keys(o).forEach(r=>{let a=o[r];Re(a,[Y.scales[a.type],Y.scale])}),o}function ca(i){let t=i.options||(i.options={});t.plugins=O(t.plugins,{}),t.scales=Gc(i,t)}function da(i){return i=i||{},i.datasets=i.datasets||[],i.labels=i.labels||[],i}function Zc(i){return i=i||{},i.data=da(i.data),ca(i),i}var Cr=new Map,ua=new Set;function hs(i,t){let e=Cr.get(i);return e||(e=t(),Cr.set(i,e),ua.add(e)),e}var di=(i,t,e)=>{let s=jt(t,e);s!==void 0&&i.add(s)},zn=class{constructor(t){this._config=Zc(t),this._scopeCache=new Map,this._resolverCache=new Map}get platform(){return this._config.platform}get type(){return this._config.type}set type(t){this._config.type=t}get data(){return this._config.data}set data(t){this._config.data=da(t)}get options(){return this._config.options}set options(t){this._config.options=t}get plugins(){return this._config.plugins}update(){let t=this._config;this.clearCache(),ca(t)}clearCache(){this._scopeCache.clear(),this._resolverCache.clear()}datasetScopeKeys(t){return hs(t,()=>[[`datasets.${t}`,""]])}datasetAnimationScopeKeys(t,e){return hs(`${t}.transition.${e}`,()=>[[`datasets.${t}.transitions.${e}`,`transitions.${e}`],[`datasets.${t}`,""]])}datasetElementScopeKeys(t,e){return hs(`${t}-${e}`,()=>[[`datasets.${t}.elements.${e}`,`datasets.${t}`,`elements.${e}`,""]])}pluginScopeKeys(t){let e=t.id,s=this.type;return hs(`${s}-plugin-${e}`,()=>[[`plugins.${e}`,...t.additionalOptionScopes||[]]])}_cachedScopes(t,e){let s=this._scopeCache,n=s.get(t);return(!n||e)&&(n=new Map,s.set(t,n)),n}getOptionScopes(t,e,s){let{options:n,type:o}=this,r=this._cachedScopes(t,s),a=r.get(e);if(a)return a;let l=new Set;e.forEach(c=>{t&&(l.add(t),c.forEach(d=>di(l,t,d))),c.forEach(d=>di(l,n,d)),c.forEach(d=>di(l,te[o]||{},d)),c.forEach(d=>di(l,Y,d)),c.forEach(d=>di(l,ts,d))});let h=Array.from(l);return h.length===0&&h.push(Object.create(null)),ua.has(e)&&r.set(e,h),h}chartOptionScopes(){let{options:t,type:e}=this;return[t,te[e]||{},Y.datasets[e]||{},{type:e},Y,ts]}resolveNamedOptions(t,e,s,n=[""]){let o={$shared:!0},{resolver:r,subPrefixes:a}=Pr(this._resolverCache,t,n),l=r;if(td(r,e)){o.$shared=!1,s=Bt(s)?s():s;let h=this.createResolver(t,s,a);l=de(r,s,h)}for(let h of e)o[h]=l[h];return o}createResolver(t,e,s=[""],n){let{resolver:o}=Pr(this._resolverCache,t,s);return H(e)?de(o,e,void 0,n):o}};function Pr(i,t,e){let s=i.get(t);s||(s=new Map,i.set(t,s));let n=e.join(),o=s.get(n);return o||(o={resolver:ss(t,e),subPrefixes:e.filter(a=>!a.toLowerCase().includes("hover"))},s.set(n,o)),o}var Qc=i=>H(i)&&Object.getOwnPropertyNames(i).some(t=>Bt(i[t]));function td(i,t){let{isScriptable:e,isIndexable:s}=cn(i);for(let n of t){let o=e(n),r=s(n),a=(r||o)&&i[n];if(o&&(Bt(a)||Qc(a))||r&&W(a))return!0}return!1}var ed="4.4.9",id=["top","bottom","left","right","chartArea"];function Mr(i,t){return i==="top"||i==="bottom"||id.indexOf(i)===-1&&t==="x"}function Tr(i,t){return function(e,s){return e[i]===s[i]?e[t]-s[t]:e[i]-s[i]}}function Er(i){let t=i.chart,e=t.options.animation;t.notifyPlugins("afterRender"),V(e&&e.onComplete,[i],t)}function sd(i){let t=i.chart,e=t.options.animation;V(e&&e.onProgress,[i],t)}function fa(i){return ns()&&typeof i=="string"?i=document.getElementById(i):i&&i.length&&(i=i[0]),i&&i.canvas&&(i=i.canvas),i}var gs={},Rr=i=>{let t=fa(i);return Object.values(gs).filter(e=>e.canvas===t).pop()};function nd(i,t,e){let s=Object.keys(i);for(let n of s){let o=+n;if(o>=t){let r=i[n];delete i[n],(e>0||o>t)&&(i[o+e]=r)}}}function od(i,t,e,s){return!e||i.type==="mouseout"?null:s?t:i}var At=class{static register(...t){Dt.add(...t),Dr()}static unregister(...t){Dt.remove(...t),Dr()}constructor(t,e){let s=this.config=new zn(e),n=fa(t),o=Rr(n);if(o)throw new Error("Canvas is already in use. Chart with ID '"+o.id+"' must be destroyed before the canvas with ID '"+o.canvas.id+"' can be reused.");let r=s.createResolver(s.chartOptionScopes(),this.getContext());this.platform=new(s.platform||Cc(n)),this.platform.updateConfig(s);let a=this.platform.acquireContext(n,r.aspectRatio),l=a&&a.canvas,h=l&&l.height,c=l&&l.width;if(this.id=Eo(),this.ctx=a,this.canvas=l,this.width=c,this.height=h,this._options=r,this._aspectRatio=this.aspectRatio,this._layers=[],this._metasets=[],this._stacks=void 0,this.boxes=[],this.currentDevicePixelRatio=void 0,this.chartArea=void 0,this._active=[],this._lastEvent=void 0,this._listeners={},this._responsiveListeners=void 0,this._sortedMetasets=[],this.scales={},this._plugins=new Hn,this.$proxies={},this._hiddenIndices={},this.attached=!1,this._animationsDisabled=void 0,this.$context=void 0,this._doResize=jo(d=>this.update(d),r.resizeDelay||0),this._dataChanges=[],gs[this.id]=this,!a||!l){console.error("Failed to create chart: can't acquire context from the given item");return}$t.listen(this,"complete",Er),$t.listen(this,"progress",sd),this._initialize(),this.attached&&this.update()}get aspectRatio(){let{options:{aspectRatio:t,maintainAspectRatio:e},width:s,height:n,_aspectRatio:o}=this;return F(t)?e&&o?o:n?s/n:null:t}get data(){return this.config.data}set data(t){this.config.data=t}get options(){return this._options}set options(t){this.config.options=t}get registry(){return Dt}_initialize(){return this.notifyPlugins("beforeInit"),this.options.responsive?this.resize():gn(this,this.options.devicePixelRatio),this.bindEvents(),this.notifyPlugins("afterInit"),this}clear(){return an(this.canvas,this.ctx),this}stop(){return $t.stop(this),this}resize(t,e){$t.running(this)?this._resizeBeforeDraw={width:t,height:e}:this._resize(t,e)}_resize(t,e){let s=this.options,n=this.canvas,o=s.maintainAspectRatio&&this.aspectRatio,r=this.platform.getMaximumSize(n,t,e,o),a=s.devicePixelRatio||this.platform.getDevicePixelRatio(),l=this.width?"resize":"attach";this.width=r.width,this.height=r.height,this._aspectRatio=this.aspectRatio,gn(this,a,!0)&&(this.notifyPlugins("resize",{size:r}),V(s.onResize,[this,r],this),this.attached&&this._doResize(l)&&this.render())}ensureScalesHaveIDs(){let e=this.options.scales||{};z(e,(s,n)=>{s.id=n})}buildOrUpdateScales(){let t=this.options,e=t.scales,s=this.scales,n=Object.keys(s).reduce((r,a)=>(r[a]=!1,r),{}),o=[];e&&(o=o.concat(Object.keys(e).map(r=>{let a=e[r],l=Bn(r,a),h=l==="r",c=l==="x";return{options:a,dposition:h?"chartArea":c?"bottom":"left",dtype:h?"radialLinear":c?"category":"linear"}}))),z(o,r=>{let a=r.options,l=a.id,h=Bn(l,a),c=O(a.type,r.dtype);(a.position===void 0||Mr(a.position,h)!==Mr(r.dposition))&&(a.position=r.dposition),n[l]=!0;let d=null;if(l in s&&s[l].type===c)d=s[l];else{let u=Dt.getScale(c);d=new u({id:l,type:c,ctx:this.ctx,chart:this}),s[d.id]=d}d.init(a,t)}),z(n,(r,a)=>{r||delete s[a]}),z(s,r=>{rt.configure(this,r,r.options),rt.addBox(this,r)})}_updateMetasets(){let t=this._metasets,e=this.data.datasets.length,s=t.length;if(t.sort((n,o)=>n.index-o.index),s>e){for(let n=e;n<s;++n)this._destroyDatasetMeta(n);t.splice(e,s-e)}this._sortedMetasets=t.slice(0).sort(Tr("order","index"))}_removeUnreferencedMetasets(){let{_metasets:t,data:{datasets:e}}=this;t.length>e.length&&delete this._stacks,t.forEach((s,n)=>{e.filter(o=>o===s._dataset).length===0&&this._destroyDatasetMeta(n)})}buildOrUpdateControllers(){let t=[],e=this.data.datasets,s,n;for(this._removeUnreferencedMetasets(),s=0,n=e.length;s<n;s++){let o=e[s],r=this.getDatasetMeta(s),a=o.type||this.config.type;if(r.type&&r.type!==a&&(this._destroyDatasetMeta(s),r=this.getDatasetMeta(s)),r.type=a,r.indexAxis=o.indexAxis||Nn(a,this.options),r.order=o.order||0,r.index=s,r.label=""+o.label,r.visible=this.isDatasetVisible(s),r.controller)r.controller.updateIndex(s),r.controller.linkScales();else{let l=Dt.getController(a),{datasetElementType:h,dataElementType:c}=Y.datasets[a];Object.assign(l,{dataElementType:Dt.getElement(c),datasetElementType:h&&Dt.getElement(h)}),r.controller=new l(this,s),t.push(r.controller)}}return this._updateMetasets(),t}_resetElements(){z(this.data.datasets,(t,e)=>{this.getDatasetMeta(e).controller.reset()},this)}reset(){this._resetElements(),this.notifyPlugins("reset")}update(t){let e=this.config;e.update();let s=this._options=e.createResolver(e.chartOptionScopes(),this.getContext()),n=this._animationsDisabled=!s.animation;if(this._updateScales(),this._checkEventBindings(),this._updateHiddenIndices(),this._plugins.invalidate(),this.notifyPlugins("beforeUpdate",{mode:t,cancelable:!0})===!1)return;let o=this.buildOrUpdateControllers();this.notifyPlugins("beforeElementsUpdate");let r=0;for(let h=0,c=this.data.datasets.length;h<c;h++){let{controller:d}=this.getDatasetMeta(h),u=!n&&o.indexOf(d)===-1;d.buildOrUpdateElements(u),r=Math.max(+d.getMaxOverflow(),r)}r=this._minPadding=s.layout.autoPadding?r:0,this._updateLayout(r),n||z(o,h=>{h.reset()}),this._updateDatasets(t),this.notifyPlugins("afterUpdate",{mode:t}),this._layers.sort(Tr("z","_idx"));let{_active:a,_lastEvent:l}=this;l?this._eventHandler(l,!0):a.length&&this._updateHoverStyles(a,a,!0),this.render()}_updateScales(){z(this.scales,t=>{rt.removeBox(this,t)}),this.ensureScalesHaveIDs(),this.buildOrUpdateScales()}_checkEventBindings(){let t=this.options,e=new Set(Object.keys(this._listeners)),s=new Set(t.events);(!Ys(e,s)||!!this._responsiveListeners!==t.responsive)&&(this.unbindEvents(),this.bindEvents())}_updateHiddenIndices(){let{_hiddenIndices:t}=this,e=this._getUniformDataChanges()||[];for(let{method:s,start:n,count:o}of e){let r=s==="_removeElements"?-o:o;nd(t,n,r)}}_getUniformDataChanges(){let t=this._dataChanges;if(!t||!t.length)return;this._dataChanges=[];let e=this.data.datasets.length,s=o=>new Set(t.filter(r=>r[0]===o).map((r,a)=>a+","+r.splice(1).join(","))),n=s(0);for(let o=1;o<e;o++)if(!Ys(n,s(o)))return;return Array.from(n).map(o=>o.split(",")).map(o=>({method:o[1],start:+o[2],count:+o[3]}))}_updateLayout(t){if(this.notifyPlugins("beforeLayout",{cancelable:!0})===!1)return;rt.update(this,this.width,this.height,t);let e=this.chartArea,s=e.width<=0||e.height<=0;this._layers=[],z(this.boxes,n=>{s&&n.position==="chartArea"||(n.configure&&n.configure(),this._layers.push(...n._layers()))},this),this._layers.forEach((n,o)=>{n._idx=o}),this.notifyPlugins("afterLayout")}_updateDatasets(t){if(this.notifyPlugins("beforeDatasetsUpdate",{mode:t,cancelable:!0})!==!1){for(let e=0,s=this.data.datasets.length;e<s;++e)this.getDatasetMeta(e).controller.configure();for(let e=0,s=this.data.datasets.length;e<s;++e)this._updateDataset(e,Bt(t)?t({datasetIndex:e}):t);this.notifyPlugins("afterDatasetsUpdate",{mode:t})}}_updateDataset(t,e){let s=this.getDatasetMeta(t),n={meta:s,index:t,mode:e,cancelable:!0};this.notifyPlugins("beforeDatasetUpdate",n)!==!1&&(s.controller._update(e),n.cancelable=!1,this.notifyPlugins("afterDatasetUpdate",n))}render(){this.notifyPlugins("beforeRender",{cancelable:!0})!==!1&&($t.has(this)?this.attached&&!$t.running(this)&&$t.start(this):(this.draw(),Er({chart:this})))}draw(){let t;if(this._resizeBeforeDraw){let{width:s,height:n}=this._resizeBeforeDraw;this._resizeBeforeDraw=null,this._resize(s,n)}if(this.clear(),this.width<=0||this.height<=0||this.notifyPlugins("beforeDraw",{cancelable:!0})===!1)return;let e=this._layers;for(t=0;t<e.length&&e[t].z<=0;++t)e[t].draw(this.chartArea);for(this._drawDatasets();t<e.length;++t)e[t].draw(this.chartArea);this.notifyPlugins("afterDraw")}_getSortedDatasetMetas(t){let e=this._sortedMetasets,s=[],n,o;for(n=0,o=e.length;n<o;++n){let r=e[n];(!t||r.visible)&&s.push(r)}return s}getSortedVisibleDatasetMetas(){return this._getSortedDatasetMetas(!0)}_drawDatasets(){if(this.notifyPlugins("beforeDatasetsDraw",{cancelable:!0})===!1)return;let t=this.getSortedVisibleDatasetMetas();for(let e=t.length-1;e>=0;--e)this._drawDataset(t[e]);this.notifyPlugins("afterDatasetsDraw")}_drawDataset(t){let e=this.ctx,s={meta:t,index:t.index,cancelable:!0},n=xn(this,t);this.notifyPlugins("beforeDatasetDraw",s)!==!1&&(n&&oi(e,n),t.controller.draw(),n&&ri(e),s.cancelable=!1,this.notifyPlugins("afterDatasetDraw",s))}isPointInArea(t){return Mt(t,this.chartArea,this._minPadding)}getElementsAtEventForMode(t,e,s,n){let o=ac.modes[e];return typeof o=="function"?o(this,t,s,n):[]}getDatasetMeta(t){let e=this.data.datasets[t],s=this._metasets,n=s.filter(o=>o&&o._dataset===e).pop();return n||(n={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null,order:e&&e.order||0,index:t,_dataset:e,_parsed:[],_sorted:!1},s.push(n)),n}getContext(){return this.$context||(this.$context=Vt(null,{chart:this,type:"chart"}))}getVisibleDatasetCount(){return this.getSortedVisibleDatasetMetas().length}isDatasetVisible(t){let e=this.data.datasets[t];if(!e)return!1;let s=this.getDatasetMeta(t);return typeof s.hidden=="boolean"?!s.hidden:!e.hidden}setDatasetVisibility(t,e){let s=this.getDatasetMeta(t);s.hidden=!e}toggleDataVisibility(t){this._hiddenIndices[t]=!this._hiddenIndices[t]}getDataVisibility(t){return!this._hiddenIndices[t]}_updateVisibility(t,e,s){let n=s?"show":"hide",o=this.getDatasetMeta(t),r=o.controller._resolveAnimations(void 0,n);De(e)?(o.data[e].hidden=!s,this.update()):(this.setDatasetVisibility(t,s),r.update(o,{visible:s}),this.update(a=>a.datasetIndex===t?n:void 0))}hide(t,e){this._updateVisibility(t,e,!1)}show(t,e){this._updateVisibility(t,e,!0)}_destroyDatasetMeta(t){let e=this._metasets[t];e&&e.controller&&e.controller._destroy(),delete this._metasets[t]}_stop(){let t,e;for(this.stop(),$t.remove(this),t=0,e=this.data.datasets.length;t<e;++t)this._destroyDatasetMeta(t)}destroy(){this.notifyPlugins("beforeDestroy");let{canvas:t,ctx:e}=this;this._stop(),this.config.clearCache(),t&&(this.unbindEvents(),an(t,e),this.platform.releaseContext(e),this.canvas=null,this.ctx=null),delete gs[this.id],this.notifyPlugins("afterDestroy")}toBase64Image(...t){return this.canvas.toDataURL(...t)}bindEvents(){this.bindUserEvents(),this.options.responsive?this.bindResponsiveEvents():this.attached=!0}bindUserEvents(){let t=this._listeners,e=this.platform,s=(o,r)=>{e.addEventListener(this,o,r),t[o]=r},n=(o,r,a)=>{o.offsetX=r,o.offsetY=a,this._eventHandler(o)};z(this.options.events,o=>s(o,n))}bindResponsiveEvents(){this._responsiveListeners||(this._responsiveListeners={});let t=this._responsiveListeners,e=this.platform,s=(l,h)=>{e.addEventListener(this,l,h),t[l]=h},n=(l,h)=>{t[l]&&(e.removeEventListener(this,l,h),delete t[l])},o=(l,h)=>{this.canvas&&this.resize(l,h)},r,a=()=>{n("attach",a),this.attached=!0,this.resize(),s("resize",o),s("detach",r)};r=()=>{this.attached=!1,n("resize",o),this._stop(),this._resize(0,0),s("attach",a)},e.isAttached(this.canvas)?a():r()}unbindEvents(){z(this._listeners,(t,e)=>{this.platform.removeEventListener(this,e,t)}),this._listeners={},z(this._responsiveListeners,(t,e)=>{this.platform.removeEventListener(this,e,t)}),this._responsiveListeners=void 0}updateHoverStyle(t,e,s){let n=s?"set":"remove",o,r,a,l;for(e==="dataset"&&(o=this.getDatasetMeta(t[0].datasetIndex),o.controller["_"+n+"DatasetHoverStyle"]()),a=0,l=t.length;a<l;++a){r=t[a];let h=r&&this.getDatasetMeta(r.datasetIndex).controller;h&&h[n+"HoverStyle"](r.element,r.datasetIndex,r.index)}}getActiveElements(){return this._active||[]}setActiveElements(t){let e=this._active||[],s=t.map(({datasetIndex:o,index:r})=>{let a=this.getDatasetMeta(o);if(!a)throw new Error("No dataset found at index "+o);return{datasetIndex:o,element:a.data[r],index:r}});!si(s,e)&&(this._active=s,this._lastEvent=null,this._updateHoverStyles(s,e))}notifyPlugins(t,e,s){return this._plugins.notify(this,t,e,s)}isPluginEnabled(t){return this._plugins._cache.filter(e=>e.plugin.id===t).length===1}_updateHoverStyles(t,e,s){let n=this.options.hover,o=(l,h)=>l.filter(c=>!h.some(d=>c.datasetIndex===d.datasetIndex&&c.index===d.index)),r=o(e,t),a=s?t:o(t,e);r.length&&this.updateHoverStyle(r,n.mode,!1),a.length&&n.mode&&this.updateHoverStyle(a,n.mode,!0)}_eventHandler(t,e){let s={event:t,replay:e,cancelable:!0,inChartArea:this.isPointInArea(t)},n=r=>(r.options.events||this.options.events).includes(t.native.type);if(this.notifyPlugins("beforeEvent",s,n)===!1)return;let o=this._handleEvent(t,e,s.inChartArea);return s.cancelable=!1,this.notifyPlugins("afterEvent",s,n),(o||s.changed)&&this.render(),this}_handleEvent(t,e,s){let{_active:n=[],options:o}=this,r=e,a=this._getActiveElements(t,n,s,r),l=Oo(t),h=od(t,this._lastEvent,s,l);s&&(this._lastEvent=null,V(o.onHover,[t,a,this],this),l&&V(o.onClick,[t,a,this],this));let c=!si(a,n);return(c||e)&&(this._active=a,this._updateHoverStyles(a,n,e)),this._lastEvent=h,c}_getActiveElements(t,e,s,n){if(t.type==="mouseout")return[];if(!s)return e;let o=this.options.hover;return this.getElementsAtEventForMode(t,o.mode,o,n)}};C(At,"defaults",Y),C(At,"instances",gs),C(At,"overrides",te),C(At,"registry",Dt),C(At,"version",ed),C(At,"getChart",Rr);function Dr(){return z(At.instances,i=>i._plugins.invalidate())}function rd(i,t,e){let{startAngle:s,pixelMargin:n,x:o,y:r,outerRadius:a,innerRadius:l}=t,h=n/a;i.beginPath(),i.arc(o,r,a,s-h,e+h),l>n?(h=n/l,i.arc(o,r,l,e+h,s-h,!0)):i.arc(o,r,n,e+q,s-q),i.closePath(),i.clip()}function ad(i){return is(i,["outerStart","outerEnd","innerStart","innerEnd"])}function ld(i,t,e,s){let n=ad(i.options.borderRadius),o=(e-t)/2,r=Math.min(o,s*t/2),a=l=>{let h=(e-Math.min(o,l))*s/2;return tt(l,0,Math.min(o,h))};return{outerStart:a(n.outerStart),outerEnd:a(n.outerEnd),innerStart:tt(n.innerStart,0,r),innerEnd:tt(n.innerEnd,0,r)}}function Ne(i,t,e,s){return{x:e+i*Math.cos(t),y:s+i*Math.sin(t)}}function vs(i,t,e,s,n,o){let{x:r,y:a,startAngle:l,pixelMargin:h,innerRadius:c}=t,d=Math.max(t.outerRadius+s+e-h,0),u=c>0?c+s+e+h:0,g=0,f=n-l;if(s){let B=c>0?c-s:0,j=d>0?d-s:0,M=(B+j)/2,R=M!==0?f*M/(M+s):f;g=(f-R)/2}let p=Math.max(.001,f*d-e/U)/d,m=(f-p)/2,v=l+m+g,_=n-m-g,{outerStart:k,outerEnd:S,innerStart:y,innerEnd:b}=ld(t,u,d,_-v),w=d-k,A=d-S,P=v+k/w,E=_-S/A,T=u+y,D=u+b,G=v+y/T,it=_-b/D;if(i.beginPath(),o){let B=(P+E)/2;if(i.arc(r,a,d,P,B),i.arc(r,a,d,B,E),S>0){let I=Ne(A,E,r,a);i.arc(I.x,I.y,S,E,_+q)}let j=Ne(D,_,r,a);if(i.lineTo(j.x,j.y),b>0){let I=Ne(D,it,r,a);i.arc(I.x,I.y,b,_+q,it+Math.PI)}let M=(_-b/u+(v+y/u))/2;if(i.arc(r,a,u,_-b/u,M,!0),i.arc(r,a,u,M,v+y/u,!0),y>0){let I=Ne(T,G,r,a);i.arc(I.x,I.y,y,G+Math.PI,v-q)}let R=Ne(w,v,r,a);if(i.lineTo(R.x,R.y),k>0){let I=Ne(w,P,r,a);i.arc(I.x,I.y,k,v-q,P)}}else{i.moveTo(r,a);let B=Math.cos(P)*d+r,j=Math.sin(P)*d+a;i.lineTo(B,j);let M=Math.cos(E)*d+r,R=Math.sin(E)*d+a;i.lineTo(M,R)}i.closePath()}function hd(i,t,e,s,n){let{fullCircles:o,startAngle:r,circumference:a}=t,l=t.endAngle;if(o){vs(i,t,e,s,l,n);for(let h=0;h<o;++h)i.fill();isNaN(a)||(l=r+(a%X||X))}return vs(i,t,e,s,l,n),i.fill(),l}function cd(i,t,e,s,n){let{fullCircles:o,startAngle:r,circumference:a,options:l}=t,{borderWidth:h,borderJoinStyle:c,borderDash:d,borderDashOffset:u}=l,g=l.borderAlign==="inner";if(!h)return;i.setLineDash(d||[]),i.lineDashOffset=u,g?(i.lineWidth=h*2,i.lineJoin=c||"round"):(i.lineWidth=h,i.lineJoin=c||"bevel");let f=t.endAngle;if(o){vs(i,t,e,s,f,n);for(let p=0;p<o;++p)i.stroke();isNaN(a)||(f=r+(a%X||X))}g&&rd(i,t,f),o||(vs(i,t,e,s,f,n),i.stroke())}var me=class extends vt{constructor(e){super();C(this,"circumference");C(this,"endAngle");C(this,"fullCircles");C(this,"innerRadius");C(this,"outerRadius");C(this,"pixelMargin");C(this,"startAngle");this.options=void 0,this.circumference=void 0,this.startAngle=void 0,this.endAngle=void 0,this.innerRadius=void 0,this.outerRadius=void 0,this.pixelMargin=0,this.fullCircles=0,e&&Object.assign(this,e)}inRange(e,s,n){let o=this.getProps(["x","y"],n),{angle:r,distance:a}=Gs(o,{x:e,y:s}),{startAngle:l,endAngle:h,innerRadius:c,outerRadius:d,circumference:u}=this.getProps(["startAngle","endAngle","innerRadius","outerRadius","circumference"],n),g=(this.options.spacing+this.options.borderWidth)/2,f=O(u,h-l),p=Le(r,l,h)&&l!==h,m=f>=X||p,v=Et(a,c+g,d+g);return m&&v}getCenterPoint(e){let{x:s,y:n,startAngle:o,endAngle:r,innerRadius:a,outerRadius:l}=this.getProps(["x","y","startAngle","endAngle","innerRadius","outerRadius"],e),{offset:h,spacing:c}=this.options,d=(o+r)/2,u=(a+l+c+h)/2;return{x:s+Math.cos(d)*u,y:n+Math.sin(d)*u}}tooltipPosition(e){return this.getCenterPoint(e)}draw(e){let{options:s,circumference:n}=this,o=(s.offset||0)/4,r=(s.spacing||0)/2,a=s.circular;if(this.pixelMargin=s.borderAlign==="inner"?.33:0,this.fullCircles=n>X?Math.floor(n/X):0,n===0||this.innerRadius<0||this.outerRadius<0)return;e.save();let l=(this.startAngle+this.endAngle)/2;e.translate(Math.cos(l)*o,Math.sin(l)*o);let h=1-Math.sin(Math.min(U,n||0)),c=o*h;e.fillStyle=s.backgroundColor,e.strokeStyle=s.borderColor,hd(e,this,c,r,a),cd(e,this,c,r,a),e.restore()}};C(me,"id","arc"),C(me,"defaults",{borderAlign:"center",borderColor:"#fff",borderDash:[],borderDashOffset:0,borderJoinStyle:void 0,borderRadius:0,borderWidth:2,offset:0,spacing:0,angle:void 0,circular:!0}),C(me,"defaultRoutes",{backgroundColor:"backgroundColor"}),C(me,"descriptors",{_scriptable:!0,_indexable:e=>e!=="borderDash"});function ga(i,t,e=t){i.lineCap=O(e.borderCapStyle,t.borderCapStyle),i.setLineDash(O(e.borderDash,t.borderDash)),i.lineDashOffset=O(e.borderDashOffset,t.borderDashOffset),i.lineJoin=O(e.borderJoinStyle,t.borderJoinStyle),i.lineWidth=O(e.borderWidth,t.borderWidth),i.strokeStyle=O(e.borderColor,t.borderColor)}function dd(i,t,e){i.lineTo(e.x,e.y)}function ud(i){return i.stepped?Uo:i.tension||i.cubicInterpolationMode==="monotone"?Xo:dd}function pa(i,t,e={}){let s=i.length,{start:n=0,end:o=s-1}=e,{start:r,end:a}=t,l=Math.max(n,r),h=Math.min(o,a),c=n<r&&o<r||n>a&&o>a;return{count:s,start:l,loop:t.loop,ilen:h<l&&!c?s+h-l:h-l}}function fd(i,t,e,s){let{points:n,options:o}=t,{count:r,start:a,loop:l,ilen:h}=pa(n,e,s),c=ud(o),{move:d=!0,reverse:u}=s||{},g,f,p;for(g=0;g<=h;++g)f=n[(a+(u?h-g:g))%r],!f.skip&&(d?(i.moveTo(f.x,f.y),d=!1):c(i,p,f,u,o.stepped),p=f);return l&&(f=n[(a+(u?h:0))%r],c(i,p,f,u,o.stepped)),!!l}function gd(i,t,e,s){let n=t.points,{count:o,start:r,ilen:a}=pa(n,e,s),{move:l=!0,reverse:h}=s||{},c=0,d=0,u,g,f,p,m,v,_=S=>(r+(h?a-S:S))%o,k=()=>{p!==m&&(i.lineTo(c,m),i.lineTo(c,p),i.lineTo(c,v))};for(l&&(g=n[_(0)],i.moveTo(g.x,g.y)),u=0;u<=a;++u){if(g=n[_(u)],g.skip)continue;let S=g.x,y=g.y,b=S|0;b===f?(y<p?p=y:y>m&&(m=y),c=(d*c+S)/++d):(k(),i.lineTo(S,y),f=b,d=0,p=m=y),v=y}k()}function jn(i){let t=i.options,e=t.borderDash&&t.borderDash.length;return!i._decimated&&!i._loop&&!t.tension&&t.cubicInterpolationMode!=="monotone"&&!t.stepped&&!e?gd:fd}function pd(i){return i.stepped?er:i.tension||i.cubicInterpolationMode==="monotone"?ir:Qt}function md(i,t,e,s){let n=t._path;n||(n=t._path=new Path2D,t.path(n,e,s)&&n.closePath()),ga(i,t.options),i.stroke(n)}function bd(i,t,e,s){let{segments:n,options:o}=t,r=jn(t);for(let a of n)ga(i,o,a.style),i.beginPath(),r(i,t,a,{start:e,end:e+s-1})&&i.closePath(),i.stroke()}var vd=typeof Path2D=="function";function _d(i,t,e,s){vd&&!t.options.segment?md(i,t,e,s):bd(i,t,e,s)}var Ot=class extends vt{constructor(t){super(),this.animated=!0,this.options=void 0,this._chart=void 0,this._loop=void 0,this._fullLoop=void 0,this._path=void 0,this._points=void 0,this._segments=void 0,this._decimated=!1,this._pointsUpdated=!1,this._datasetIndex=void 0,t&&Object.assign(this,t)}updateControlPoints(t,e){let s=this.options;if((s.tension||s.cubicInterpolationMode==="monotone")&&!s.stepped&&!this._pointsUpdated){let n=s.spanGaps?this._loop:this._fullLoop;Zo(this._points,s,t,n,e),this._pointsUpdated=!0}}set points(t){this._points=t,delete this._segments,delete this._path,this._pointsUpdated=!1}get points(){return this._points}get segments(){return this._segments||(this._segments=nr(this,this.options.segment))}first(){let t=this.segments,e=this.points;return t.length&&e[t[0].start]}last(){let t=this.segments,e=this.points,s=t.length;return s&&e[t[s-1].end]}interpolate(t,e){let s=this.options,n=t[e],o=this.points,r=_n(this,{property:e,start:n,end:n});if(!r.length)return;let a=[],l=pd(s),h,c;for(h=0,c=r.length;h<c;++h){let{start:d,end:u}=r[h],g=o[d],f=o[u];if(g===f){a.push(g);continue}let p=Math.abs((n-g[e])/(f[e]-g[e])),m=l(g,f,p,s.stepped);m[e]=t[e],a.push(m)}return a.length===1?a[0]:a}pathSegment(t,e,s){return jn(this)(t,this,e,s)}path(t,e,s){let n=this.segments,o=jn(this),r=this._loop;e=e||0,s=s||this.points.length-e;for(let a of n)r&=o(t,this,a,{start:e,end:e+s-1});return!!r}draw(t,e,s,n){let o=this.options||{};(this.points||[]).length&&o.borderWidth&&(t.save(),_d(t,this,s,n),t.restore()),this.animated&&(this._pointsUpdated=!1,this._path=void 0)}};C(Ot,"id","line"),C(Ot,"defaults",{borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderWidth:3,capBezierPoints:!0,cubicInterpolationMode:"default",fill:!1,spanGaps:!1,stepped:!1,tension:0}),C(Ot,"defaultRoutes",{backgroundColor:"backgroundColor",borderColor:"borderColor"}),C(Ot,"descriptors",{_scriptable:!0,_indexable:t=>t!=="borderDash"&&t!=="fill"});function Or(i,t,e,s){let n=i.options,{[e]:o}=i.getProps([e],s);return Math.abs(t-o)<n.radius+n.hitRadius}var We=class extends vt{constructor(e){super();C(this,"parsed");C(this,"skip");C(this,"stop");this.options=void 0,this.parsed=void 0,this.skip=void 0,this.stop=void 0,e&&Object.assign(this,e)}inRange(e,s,n){let o=this.options,{x:r,y:a}=this.getProps(["x","y"],n);return Math.pow(e-r,2)+Math.pow(s-a,2)<Math.pow(o.hitRadius+o.radius,2)}inXRange(e,s){return Or(this,e,"x",s)}inYRange(e,s){return Or(this,e,"y",s)}getCenterPoint(e){let{x:s,y:n}=this.getProps(["x","y"],e);return{x:s,y:n}}size(e){e=e||this.options||{};let s=e.radius||0;s=Math.max(s,s&&e.hoverRadius||0);let n=s&&e.borderWidth||0;return(s+n)*2}draw(e,s){let n=this.options;this.skip||n.radius<.1||!Mt(this,s,this.size(n)/2)||(e.strokeStyle=n.borderColor,e.lineWidth=n.borderWidth,e.fillStyle=n.backgroundColor,es(e,n,this.x,this.y))}getRange(){let e=this.options||{};return e.radius+e.hitRadius}};C(We,"id","point"),C(We,"defaults",{borderWidth:1,hitRadius:1,hoverBorderWidth:1,hoverRadius:4,pointStyle:"circle",radius:3,rotation:0}),C(We,"defaultRoutes",{backgroundColor:"backgroundColor",borderColor:"borderColor"});function ma(i,t){let{x:e,y:s,base:n,width:o,height:r}=i.getProps(["x","y","base","width","height"],t),a,l,h,c,d;return i.horizontal?(d=r/2,a=Math.min(e,n),l=Math.max(e,n),h=s-d,c=s+d):(d=o/2,a=e-d,l=e+d,h=Math.min(s,n),c=Math.max(s,n)),{left:a,top:h,right:l,bottom:c}}function oe(i,t,e,s){return i?0:tt(t,e,s)}function xd(i,t,e){let s=i.options.borderWidth,n=i.borderSkipped,o=hn(s);return{t:oe(n.top,o.top,0,e),r:oe(n.right,o.right,0,t),b:oe(n.bottom,o.bottom,0,e),l:oe(n.left,o.left,0,t)}}function yd(i,t,e){let{enableBorderRadius:s}=i.getProps(["enableBorderRadius"]),n=i.options.borderRadius,o=se(n),r=Math.min(t,e),a=i.borderSkipped,l=s||H(n);return{topLeft:oe(!l||a.top||a.left,o.topLeft,0,r),topRight:oe(!l||a.top||a.right,o.topRight,0,r),bottomLeft:oe(!l||a.bottom||a.left,o.bottomLeft,0,r),bottomRight:oe(!l||a.bottom||a.right,o.bottomRight,0,r)}}function wd(i){let t=ma(i),e=t.right-t.left,s=t.bottom-t.top,n=xd(i,e/2,s/2),o=yd(i,e/2,s/2);return{outer:{x:t.left,y:t.top,w:e,h:s,radius:o},inner:{x:t.left+n.l,y:t.top+n.t,w:e-n.l-n.r,h:s-n.t-n.b,radius:{topLeft:Math.max(0,o.topLeft-Math.max(n.t,n.l)),topRight:Math.max(0,o.topRight-Math.max(n.t,n.r)),bottomLeft:Math.max(0,o.bottomLeft-Math.max(n.b,n.l)),bottomRight:Math.max(0,o.bottomRight-Math.max(n.b,n.r))}}}}function Mn(i,t,e,s){let n=t===null,o=e===null,a=i&&!(n&&o)&&ma(i,s);return a&&(n||Et(t,a.left,a.right))&&(o||Et(e,a.top,a.bottom))}function kd(i){return i.topLeft||i.topRight||i.bottomLeft||i.bottomRight}function Sd(i,t){i.rect(t.x,t.y,t.w,t.h)}function Tn(i,t,e={}){let s=i.x!==e.x?-t:0,n=i.y!==e.y?-t:0,o=(i.x+i.w!==e.x+e.w?t:0)-s,r=(i.y+i.h!==e.y+e.h?t:0)-n;return{x:i.x+s,y:i.y+n,w:i.w+o,h:i.h+r,radius:i.radius}}var Ue=class extends vt{constructor(t){super(),this.options=void 0,this.horizontal=void 0,this.base=void 0,this.width=void 0,this.height=void 0,this.inflateAmount=void 0,t&&Object.assign(this,t)}draw(t){let{inflateAmount:e,options:{borderColor:s,backgroundColor:n}}=this,{inner:o,outer:r}=wd(this),a=kd(r.radius)?Fe:Sd;t.save(),(r.w!==o.w||r.h!==o.h)&&(t.beginPath(),a(t,Tn(r,e,o)),t.clip(),a(t,Tn(o,-e,r)),t.fillStyle=s,t.fill("evenodd")),t.beginPath(),a(t,Tn(o,e)),t.fillStyle=n,t.fill(),t.restore()}inRange(t,e,s){return Mn(this,t,e,s)}inXRange(t,e){return Mn(this,t,null,e)}inYRange(t,e){return Mn(this,null,t,e)}getCenterPoint(t){let{x:e,y:s,base:n,horizontal:o}=this.getProps(["x","y","base","horizontal"],t);return{x:o?(e+n)/2:e,y:o?s:(s+n)/2}}getRange(t){return t==="x"?this.width/2:this.height/2}};C(Ue,"id","bar"),C(Ue,"defaults",{borderSkipped:"start",borderWidth:0,borderRadius:0,inflateAmount:"auto",pointStyle:void 0}),C(Ue,"defaultRoutes",{backgroundColor:"backgroundColor",borderColor:"borderColor"});var Ad=Object.freeze({__proto__:null,ArcElement:me,BarElement:Ue,LineElement:Ot,PointElement:We}),Vn=["rgb(54, 162, 235)","rgb(255, 99, 132)","rgb(255, 159, 64)","rgb(255, 205, 86)","rgb(75, 192, 192)","rgb(153, 102, 255)","rgb(201, 203, 207)"],Lr=Vn.map(i=>i.replace("rgb(","rgba(").replace(")",", 0.5)"));function ba(i){return Vn[i%Vn.length]}function va(i){return Lr[i%Lr.length]}function Cd(i,t){return i.borderColor=ba(t),i.backgroundColor=va(t),++t}function Pd(i,t){return i.backgroundColor=i.data.map(()=>ba(t++)),t}function Md(i,t){return i.backgroundColor=i.data.map(()=>va(t++)),t}function Td(i){let t=0;return(e,s)=>{let n=i.getDatasetMeta(s).controller;n instanceof Ut?t=Pd(e,t):n instanceof ve?t=Md(e,t):n&&(t=Cd(e,t))}}function Ir(i){let t;for(t in i)if(i[t].borderColor||i[t].backgroundColor)return!0;return!1}function Ed(i){return i&&(i.borderColor||i.backgroundColor)}function Rd(){return Y.borderColor!=="rgba(0,0,0,0.1)"||Y.backgroundColor!=="rgba(0,0,0,0.1)"}var Dd={id:"colors",defaults:{enabled:!0,forceOverride:!1},beforeLayout(i,t,e){if(!e.enabled)return;let{data:{datasets:s},options:n}=i.config,{elements:o}=n,r=Ir(s)||Ed(n)||o&&Ir(o)||Rd();if(!e.forceOverride&&r)return;let a=Td(i);s.forEach(a)}};function Od(i,t,e,s,n){let o=n.samples||s;if(o>=e)return i.slice(t,t+e);let r=[],a=(e-2)/(o-2),l=0,h=t+e-1,c=t,d,u,g,f,p;for(r[l++]=i[c],d=0;d<o-2;d++){let m=0,v=0,_,k=Math.floor((d+1)*a)+1+t,S=Math.min(Math.floor((d+2)*a)+1,e)+t,y=S-k;for(_=k;_<S;_++)m+=i[_].x,v+=i[_].y;m/=y,v/=y;let b=Math.floor(d*a)+1+t,w=Math.min(Math.floor((d+1)*a)+1,e)+t,{x:A,y:P}=i[c];for(g=f=-1,_=b;_<w;_++)f=.5*Math.abs((A-m)*(i[_].y-P)-(A-i[_].x)*(v-P)),f>g&&(g=f,u=i[_],p=_);r[l++]=u,c=p}return r[l++]=i[h],r}function Ld(i,t,e,s){let n=0,o=0,r,a,l,h,c,d,u,g,f,p,m=[],v=t+e-1,_=i[t].x,S=i[v].x-_;for(r=t;r<t+e;++r){a=i[r],l=(a.x-_)/S*s,h=a.y;let y=l|0;if(y===c)h<f?(f=h,d=r):h>p&&(p=h,u=r),n=(o*n+a.x)/++o;else{let b=r-1;if(!F(d)&&!F(u)){let w=Math.min(d,u),A=Math.max(d,u);w!==g&&w!==b&&m.push({...i[w],x:n}),A!==g&&A!==b&&m.push({...i[A],x:n})}r>0&&b!==g&&m.push(i[b]),m.push(a),c=y,o=0,f=p=h,d=u=g=r}}return m}function _a(i){if(i._decimated){let t=i._data;delete i._decimated,delete i._data,Object.defineProperty(i,"data",{configurable:!0,enumerable:!0,writable:!0,value:t})}}function Fr(i){i.data.datasets.forEach(t=>{_a(t)})}function Id(i,t){let e=t.length,s=0,n,{iScale:o}=i,{min:r,max:a,minDefined:l,maxDefined:h}=o.getUserBounds();return l&&(s=tt(Pt(t,o.axis,r).lo,0,e-1)),h?n=tt(Pt(t,o.axis,a).hi+1,s,e)-s:n=e-s,{start:s,count:n}}var Fd={id:"decimation",defaults:{algorithm:"min-max",enabled:!1},beforeElementsUpdate:(i,t,e)=>{if(!e.enabled){Fr(i);return}let s=i.width;i.data.datasets.forEach((n,o)=>{let{_data:r,indexAxis:a}=n,l=i.getDatasetMeta(o),h=r||n.data;if(He([a,i.options.indexAxis])==="y"||!l.controller.supportsDecimation)return;let c=i.scales[l.xAxisID];if(c.type!=="linear"&&c.type!=="time"||i.options.parsing)return;let{start:d,count:u}=Id(l,h),g=e.threshold||4*s;if(u<=g){_a(n);return}F(r)&&(n._data=h,delete n.data,Object.defineProperty(n,"data",{configurable:!0,enumerable:!0,get:function(){return this._decimated},set:function(p){this._data=p}}));let f;switch(e.algorithm){case"lttb":f=Od(h,d,u,s,e);break;case"min-max":f=Ld(h,d,u,s);break;default:throw new Error(`Unsupported decimation algorithm '${e.algorithm}'`)}n._decimated=f})},destroy(i){Fr(i)}};function Hd(i,t,e){let s=i.segments,n=i.points,o=t.points,r=[];for(let a of s){let{start:l,end:h}=a;h=Un(l,h,n);let c=$n(e,n[l],n[h],a.loop);if(!t.segments){r.push({source:a,target:c,start:n[l],end:n[h]});continue}let d=_n(t,c);for(let u of d){let g=$n(e,o[u.start],o[u.end],u.loop),f=vn(a,n,g);for(let p of f)r.push({source:p,target:u,start:{[e]:Hr(c,g,"start",Math.max)},end:{[e]:Hr(c,g,"end",Math.min)}})}}return r}function $n(i,t,e,s){if(s)return;let n=t[i],o=e[i];return i==="angle"&&(n=ct(n),o=ct(o)),{property:i,start:n,end:o}}function Nd(i,t){let{x:e=null,y:s=null}=i||{},n=t.points,o=[];return t.segments.forEach(({start:r,end:a})=>{a=Un(r,a,n);let l=n[r],h=n[a];s!==null?(o.push({x:l.x,y:s}),o.push({x:h.x,y:s})):e!==null&&(o.push({x:e,y:l.y}),o.push({x:e,y:h.y}))}),o}function Un(i,t,e){for(;t>i;t--){let s=e[t];if(!isNaN(s.x)&&!isNaN(s.y))break}return t}function Hr(i,t,e,s){return i&&t?s(i[e],t[e]):i?i[e]:t?t[e]:0}function xa(i,t){let e=[],s=!1;return W(i)?(s=!0,e=i):e=Nd(i,t),e.length?new Ot({points:e,options:{tension:0},_loop:s,_fullLoop:s}):null}function Nr(i){return i&&i.fill!==!1}function Bd(i,t,e){let n=i[t].fill,o=[t],r;if(!e)return n;for(;n!==!1&&o.indexOf(n)===-1;){if(!J(n))return n;if(r=i[n],!r)return!1;if(r.visible)return n;o.push(n),n=r.fill}return!1}function zd(i,t,e){let s=Wd(i);if(H(s))return isNaN(s.value)?!1:s;let n=parseFloat(s);return J(n)&&Math.floor(n)===n?jd(s[0],t,n,e):["origin","start","end","stack","shape"].indexOf(s)>=0&&s}function jd(i,t,e,s){return(i==="-"||i==="+")&&(e=t+e),e===t||e<0||e>=s?!1:e}function Vd(i,t){let e=null;return i==="start"?e=t.bottom:i==="end"?e=t.top:H(i)?e=t.getPixelForValue(i.value):t.getBasePixel&&(e=t.getBasePixel()),e}function $d(i,t,e){let s;return i==="start"?s=e:i==="end"?s=t.options.reverse?t.min:t.max:H(i)?s=i.value:s=t.getBaseValue(),s}function Wd(i){let t=i.options,e=t.fill,s=O(e&&e.target,e);return s===void 0&&(s=!!t.backgroundColor),s===!1||s===null?!1:s===!0?"origin":s}function Ud(i){let{scale:t,index:e,line:s}=i,n=[],o=s.segments,r=s.points,a=Xd(t,e);a.push(xa({x:null,y:t.bottom},s));for(let l=0;l<o.length;l++){let h=o[l];for(let c=h.start;c<=h.end;c++)Yd(n,r[c],a)}return new Ot({points:n,options:{}})}function Xd(i,t){let e=[],s=i.getMatchingVisibleMetas("line");for(let n=0;n<s.length;n++){let o=s[n];if(o.index===t)break;o.hidden||e.unshift(o.dataset)}return e}function Yd(i,t,e){let s=[];for(let n=0;n<e.length;n++){let o=e[n],{first:r,last:a,point:l}=Jd(o,t,"x");if(!(!l||r&&a)){if(r)s.unshift(l);else if(i.push(l),!a)break}}i.push(...s)}function Jd(i,t,e){let s=i.interpolate(t,e);if(!s)return{};let n=s[e],o=i.segments,r=i.points,a=!1,l=!1;for(let h=0;h<o.length;h++){let c=o[h],d=r[c.start][e],u=r[c.end][e];if(Et(n,d,u)){a=n===d,l=n===u;break}}return{first:a,last:l,point:s}}var _s=class{constructor(t){this.x=t.x,this.y=t.y,this.radius=t.radius}pathSegment(t,e,s){let{x:n,y:o,radius:r}=this;return e=e||{start:0,end:X},t.arc(n,o,r,e.end,e.start,!0),!s.bounds}interpolate(t){let{x:e,y:s,radius:n}=this,o=t.angle;return{x:e+Math.cos(o)*n,y:s+Math.sin(o)*n,angle:o}}};function qd(i){let{chart:t,fill:e,line:s}=i;if(J(e))return Kd(t,e);if(e==="stack")return Ud(i);if(e==="shape")return!0;let n=Gd(i);return n instanceof _s?n:xa(n,s)}function Kd(i,t){let e=i.getDatasetMeta(t);return e&&i.isDatasetVisible(t)?e.dataset:null}function Gd(i){return(i.scale||{}).getPointPositionForValue?Qd(i):Zd(i)}function Zd(i){let{scale:t={},fill:e}=i,s=Vd(e,t);if(J(s)){let n=t.isHorizontal();return{x:n?s:null,y:n?null:s}}return null}function Qd(i){let{scale:t,fill:e}=i,s=t.options,n=t.getLabels().length,o=s.reverse?t.max:t.min,r=$d(e,t,o),a=[];if(s.grid.circular){let l=t.getPointPositionForValue(0,o);return new _s({x:l.x,y:l.y,radius:t.getDistanceFromCenterForValue(r)})}for(let l=0;l<n;++l)a.push(t.getPointPositionForValue(l,r));return a}function En(i,t,e){let s=qd(t),{chart:n,index:o,line:r,scale:a,axis:l}=t,h=r.options,c=h.fill,d=h.backgroundColor,{above:u=d,below:g=d}=c||{},f=n.getDatasetMeta(o),p=xn(n,f);s&&r.points.length&&(oi(i,e),tu(i,{line:r,target:s,above:u,below:g,area:e,scale:a,axis:l,clip:p}),ri(i))}function tu(i,t){let{line:e,target:s,above:n,below:o,area:r,scale:a,clip:l}=t,h=e._loop?"angle":t.axis;i.save(),h==="x"&&o!==n&&(Br(i,s,r.top),zr(i,{line:e,target:s,color:n,scale:a,property:h,clip:l}),i.restore(),i.save(),Br(i,s,r.bottom)),zr(i,{line:e,target:s,color:o,scale:a,property:h,clip:l}),i.restore()}function Br(i,t,e){let{segments:s,points:n}=t,o=!0,r=!1;i.beginPath();for(let a of s){let{start:l,end:h}=a,c=n[l],d=n[Un(l,h,n)];o?(i.moveTo(c.x,c.y),o=!1):(i.lineTo(c.x,e),i.lineTo(c.x,c.y)),r=!!t.pathSegment(i,a,{move:r}),r?i.closePath():i.lineTo(d.x,e)}i.lineTo(t.first().x,e),i.closePath(),i.clip()}function zr(i,t){let{line:e,target:s,property:n,color:o,scale:r,clip:a}=t,l=Hd(e,s,n);for(let{source:h,target:c,start:d,end:u}of l){let{style:{backgroundColor:g=o}={}}=h,f=s!==!0;i.save(),i.fillStyle=g,eu(i,r,a,f&&$n(n,d,u)),i.beginPath();let p=!!e.pathSegment(i,h),m;if(f){p?i.closePath():jr(i,s,u,n);let v=!!s.pathSegment(i,c,{move:p,reverse:!0});m=p&&v,m||jr(i,s,d,n)}i.closePath(),i.fill(m?"evenodd":"nonzero"),i.restore()}}function eu(i,t,e,s){let n=t.chart.chartArea,{property:o,start:r,end:a}=s||{};if(o==="x"||o==="y"){let l,h,c,d;o==="x"?(l=r,h=n.top,c=a,d=n.bottom):(l=n.left,h=r,c=n.right,d=a),i.beginPath(),e&&(l=Math.max(l,e.left),c=Math.min(c,e.right),h=Math.max(h,e.top),d=Math.min(d,e.bottom)),i.rect(l,h,c-l,d-h),i.clip()}}function jr(i,t,e,s){let n=t.interpolate(e,s);n&&i.lineTo(n.x,n.y)}var iu={id:"filler",afterDatasetsUpdate(i,t,e){let s=(i.data.datasets||[]).length,n=[],o,r,a,l;for(r=0;r<s;++r)o=i.getDatasetMeta(r),a=o.dataset,l=null,a&&a.options&&a instanceof Ot&&(l={visible:i.isDatasetVisible(r),index:r,fill:zd(a,r,s),chart:i,axis:o.controller.options.indexAxis,scale:o.vScale,line:a}),o.$filler=l,n.push(l);for(r=0;r<s;++r)l=n[r],!(!l||l.fill===!1)&&(l.fill=Bd(n,r,e.propagate))},beforeDraw(i,t,e){let s=e.drawTime==="beforeDraw",n=i.getSortedVisibleDatasetMetas(),o=i.chartArea;for(let r=n.length-1;r>=0;--r){let a=n[r].$filler;a&&(a.line.updateControlPoints(o,a.axis),s&&a.fill&&En(i.ctx,a,o))}},beforeDatasetsDraw(i,t,e){if(e.drawTime!=="beforeDatasetsDraw")return;let s=i.getSortedVisibleDatasetMetas();for(let n=s.length-1;n>=0;--n){let o=s[n].$filler;Nr(o)&&En(i.ctx,o,i.chartArea)}},beforeDatasetDraw(i,t,e){let s=t.meta.$filler;!Nr(s)||e.drawTime!=="beforeDatasetDraw"||En(i.ctx,s,i.chartArea)},defaults:{propagate:!0,drawTime:"beforeDatasetDraw"}},Vr=(i,t)=>{let{boxHeight:e=t,boxWidth:s=t}=i;return i.usePointStyle&&(e=Math.min(e,t),s=i.pointStyleWidth||Math.min(s,t)),{boxWidth:s,boxHeight:e,itemHeight:Math.max(t,e)}},su=(i,t)=>i!==null&&t!==null&&i.datasetIndex===t.datasetIndex&&i.index===t.index,xs=class extends vt{constructor(t){super(),this._added=!1,this.legendHitBoxes=[],this._hoveredItem=null,this.doughnutMode=!1,this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this.legendItems=void 0,this.columnSizes=void 0,this.lineWidths=void 0,this.maxHeight=void 0,this.maxWidth=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.height=void 0,this.width=void 0,this._margins=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e,s){this.maxWidth=t,this.maxHeight=e,this._margins=s,this.setDimensions(),this.buildLabels(),this.fit()}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=this._margins.left,this.right=this.width):(this.height=this.maxHeight,this.top=this._margins.top,this.bottom=this.height)}buildLabels(){let t=this.options.labels||{},e=V(t.generateLabels,[this.chart],this)||[];t.filter&&(e=e.filter(s=>t.filter(s,this.chart.data))),t.sort&&(e=e.sort((s,n)=>t.sort(s,n,this.chart.data))),this.options.reverse&&e.reverse(),this.legendItems=e}fit(){let{options:t,ctx:e}=this;if(!t.display){this.width=this.height=0;return}let s=t.labels,n=Z(s.font),o=n.size,r=this._computeTitleHeight(),{boxWidth:a,itemHeight:l}=Vr(s,o),h,c;e.font=n.string,this.isHorizontal()?(h=this.maxWidth,c=this._fitRows(r,o,a,l)+10):(c=this.maxHeight,h=this._fitCols(r,n,a,l)+10),this.width=Math.min(h,t.maxWidth||this.maxWidth),this.height=Math.min(c,t.maxHeight||this.maxHeight)}_fitRows(t,e,s,n){let{ctx:o,maxWidth:r,options:{labels:{padding:a}}}=this,l=this.legendHitBoxes=[],h=this.lineWidths=[0],c=n+a,d=t;o.textAlign="left",o.textBaseline="middle";let u=-1,g=-c;return this.legendItems.forEach((f,p)=>{let m=s+e/2+o.measureText(f.text).width;(p===0||h[h.length-1]+m+2*a>r)&&(d+=c,h[h.length-(p>0?0:1)]=0,g+=c,u++),l[p]={left:0,top:g,row:u,width:m,height:n},h[h.length-1]+=m+a}),d}_fitCols(t,e,s,n){let{ctx:o,maxHeight:r,options:{labels:{padding:a}}}=this,l=this.legendHitBoxes=[],h=this.columnSizes=[],c=r-t,d=a,u=0,g=0,f=0,p=0;return this.legendItems.forEach((m,v)=>{let{itemWidth:_,itemHeight:k}=nu(s,e,o,m,n);v>0&&g+k+2*a>c&&(d+=u+a,h.push({width:u,height:g}),f+=u+a,p++,u=g=0),l[v]={left:f,top:g,col:p,width:_,height:k},u=Math.max(u,_),g+=k+a}),d+=u,h.push({width:u,height:g}),d}adjustHitBoxes(){if(!this.options.display)return;let t=this._computeTitleHeight(),{legendHitBoxes:e,options:{align:s,labels:{padding:n},rtl:o}}=this,r=fe(o,this.left,this.width);if(this.isHorizontal()){let a=0,l=st(s,this.left+n,this.right-this.lineWidths[a]);for(let h of e)a!==h.row&&(a=h.row,l=st(s,this.left+n,this.right-this.lineWidths[a])),h.top+=this.top+t+n,h.left=r.leftForLtr(r.x(l),h.width),l+=h.width+n}else{let a=0,l=st(s,this.top+t+n,this.bottom-this.columnSizes[a].height);for(let h of e)h.col!==a&&(a=h.col,l=st(s,this.top+t+n,this.bottom-this.columnSizes[a].height)),h.top=l,h.left+=this.left+n,h.left=r.leftForLtr(r.x(h.left),h.width),l+=h.height+n}}isHorizontal(){return this.options.position==="top"||this.options.position==="bottom"}draw(){if(this.options.display){let t=this.ctx;oi(t,this),this._draw(),ri(t)}}_draw(){let{options:t,columnSizes:e,lineWidths:s,ctx:n}=this,{align:o,labels:r}=t,a=Y.color,l=fe(t.rtl,this.left,this.width),h=Z(r.font),{padding:c}=r,d=h.size,u=d/2,g;this.drawTitle(),n.textAlign=l.textAlign("left"),n.textBaseline="middle",n.lineWidth=.5,n.font=h.string;let{boxWidth:f,boxHeight:p,itemHeight:m}=Vr(r,d),v=function(b,w,A){if(isNaN(f)||f<=0||isNaN(p)||p<0)return;n.save();let P=O(A.lineWidth,1);if(n.fillStyle=O(A.fillStyle,a),n.lineCap=O(A.lineCap,"butt"),n.lineDashOffset=O(A.lineDashOffset,0),n.lineJoin=O(A.lineJoin,"miter"),n.lineWidth=P,n.strokeStyle=O(A.strokeStyle,a),n.setLineDash(O(A.lineDash,[])),r.usePointStyle){let E={radius:p*Math.SQRT2/2,pointStyle:A.pointStyle,rotation:A.rotation,borderWidth:P},T=l.xPlus(b,f/2),D=w+u;ln(n,E,T,D,r.pointStyleWidth&&f)}else{let E=w+Math.max((d-p)/2,0),T=l.leftForLtr(b,f),D=se(A.borderRadius);n.beginPath(),Object.values(D).some(G=>G!==0)?Fe(n,{x:T,y:E,w:f,h:p,radius:D}):n.rect(T,E,f,p),n.fill(),P!==0&&n.stroke()}n.restore()},_=function(b,w,A){ie(n,A.text,b,w+m/2,h,{strikethrough:A.hidden,textAlign:l.textAlign(A.textAlign)})},k=this.isHorizontal(),S=this._computeTitleHeight();k?g={x:st(o,this.left+c,this.right-s[0]),y:this.top+c+S,line:0}:g={x:this.left+c,y:st(o,this.top+S+c,this.bottom-e[0].height),line:0},mn(this.ctx,t.textDirection);let y=m+c;this.legendItems.forEach((b,w)=>{n.strokeStyle=b.fontColor,n.fillStyle=b.fontColor;let A=n.measureText(b.text).width,P=l.textAlign(b.textAlign||(b.textAlign=r.textAlign)),E=f+u+A,T=g.x,D=g.y;l.setWidth(this.width),k?w>0&&T+E+c>this.right&&(D=g.y+=y,g.line++,T=g.x=st(o,this.left+c,this.right-s[g.line])):w>0&&D+y>this.bottom&&(T=g.x=T+e[g.line].width+c,g.line++,D=g.y=st(o,this.top+S+c,this.bottom-e[g.line].height));let G=l.x(T);if(v(G,D,b),T=Vo(P,T+f+u,k?T+E:this.right,t.rtl),_(l.x(T),D,b),k)g.x+=E+c;else if(typeof b.text!="string"){let it=h.lineHeight;g.y+=ya(b,it)+c}else g.y+=y}),bn(this.ctx,t.textDirection)}drawTitle(){let t=this.options,e=t.title,s=Z(e.font),n=nt(e.padding);if(!e.display)return;let o=fe(t.rtl,this.left,this.width),r=this.ctx,a=e.position,l=s.size/2,h=n.top+l,c,d=this.left,u=this.width;if(this.isHorizontal())u=Math.max(...this.lineWidths),c=this.top+h,d=st(t.align,d,this.right-u);else{let f=this.columnSizes.reduce((p,m)=>Math.max(p,m.height),0);c=h+st(t.align,this.top,this.bottom-f-t.labels.padding-this._computeTitleHeight())}let g=st(a,d,d+u);r.textAlign=o.textAlign(Qi(a)),r.textBaseline="middle",r.strokeStyle=e.color,r.fillStyle=e.color,r.font=s.string,ie(r,e.text,g,c,s)}_computeTitleHeight(){let t=this.options.title,e=Z(t.font),s=nt(t.padding);return t.display?e.lineHeight+s.height:0}_getLegendItemAt(t,e){let s,n,o;if(Et(t,this.left,this.right)&&Et(e,this.top,this.bottom)){for(o=this.legendHitBoxes,s=0;s<o.length;++s)if(n=o[s],Et(t,n.left,n.left+n.width)&&Et(e,n.top,n.top+n.height))return this.legendItems[s]}return null}handleEvent(t){let e=this.options;if(!au(t.type,e))return;let s=this._getLegendItemAt(t.x,t.y);if(t.type==="mousemove"||t.type==="mouseout"){let n=this._hoveredItem,o=su(n,s);n&&!o&&V(e.onLeave,[t,n,this],this),this._hoveredItem=s,s&&!o&&V(e.onHover,[t,s,this],this)}else s&&V(e.onClick,[t,s,this],this)}};function nu(i,t,e,s,n){let o=ou(s,i,t,e),r=ru(n,s,t.lineHeight);return{itemWidth:o,itemHeight:r}}function ou(i,t,e,s){let n=i.text;return n&&typeof n!="string"&&(n=n.reduce((o,r)=>o.length>r.length?o:r)),t+e.size/2+s.measureText(n).width}function ru(i,t,e){let s=i;return typeof t.text!="string"&&(s=ya(t,e)),s}function ya(i,t){let e=i.text?i.text.length:0;return t*e}function au(i,t){return!!((i==="mousemove"||i==="mouseout")&&(t.onHover||t.onLeave)||t.onClick&&(i==="click"||i==="mouseup"))}var lu={id:"legend",_element:xs,start(i,t,e){let s=i.legend=new xs({ctx:i.ctx,options:e,chart:i});rt.configure(i,s,e),rt.addBox(i,s)},stop(i){rt.removeBox(i,i.legend),delete i.legend},beforeUpdate(i,t,e){let s=i.legend;rt.configure(i,s,e),s.options=e},afterUpdate(i){let t=i.legend;t.buildLabels(),t.adjustHitBoxes()},afterEvent(i,t){t.replay||i.legend.handleEvent(t.event)},defaults:{display:!0,position:"top",align:"center",fullSize:!0,reverse:!1,weight:1e3,onClick(i,t,e){let s=t.datasetIndex,n=e.chart;n.isDatasetVisible(s)?(n.hide(s),t.hidden=!0):(n.show(s),t.hidden=!1)},onHover:null,onLeave:null,labels:{color:i=>i.chart.options.color,boxWidth:40,padding:10,generateLabels(i){let t=i.data.datasets,{labels:{usePointStyle:e,pointStyle:s,textAlign:n,color:o,useBorderRadius:r,borderRadius:a}}=i.legend.options;return i._getSortedDatasetMetas().map(l=>{let h=l.controller.getStyle(e?0:void 0),c=nt(h.borderWidth);return{text:t[l.index].label,fillStyle:h.backgroundColor,fontColor:o,hidden:!l.visible,lineCap:h.borderCapStyle,lineDash:h.borderDash,lineDashOffset:h.borderDashOffset,lineJoin:h.borderJoinStyle,lineWidth:(c.width+c.height)/4,strokeStyle:h.borderColor,pointStyle:s||h.pointStyle,rotation:h.rotation,textAlign:n||h.textAlign,borderRadius:r&&(a||h.borderRadius),datasetIndex:l.index}},this)}},title:{color:i=>i.chart.options.color,display:!1,position:"center",text:""}},descriptors:{_scriptable:i=>!i.startsWith("on"),labels:{_scriptable:i=>!["generateLabels","filter","sort"].includes(i)}}},yi=class extends vt{constructor(t){super(),this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this._padding=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e){let s=this.options;if(this.left=0,this.top=0,!s.display){this.width=this.height=this.right=this.bottom=0;return}this.width=this.right=t,this.height=this.bottom=e;let n=W(s.text)?s.text.length:1;this._padding=nt(s.padding);let o=n*Z(s.font).lineHeight+this._padding.height;this.isHorizontal()?this.height=o:this.width=o}isHorizontal(){let t=this.options.position;return t==="top"||t==="bottom"}_drawArgs(t){let{top:e,left:s,bottom:n,right:o,options:r}=this,a=r.align,l=0,h,c,d;return this.isHorizontal()?(c=st(a,s,o),d=e+t,h=o-s):(r.position==="left"?(c=s+t,d=st(a,n,e),l=U*-.5):(c=o-t,d=st(a,e,n),l=U*.5),h=n-e),{titleX:c,titleY:d,maxWidth:h,rotation:l}}draw(){let t=this.ctx,e=this.options;if(!e.display)return;let s=Z(e.font),o=s.lineHeight/2+this._padding.top,{titleX:r,titleY:a,maxWidth:l,rotation:h}=this._drawArgs(o);ie(t,e.text,0,0,s,{color:e.color,maxWidth:l,rotation:h,textAlign:Qi(e.align),textBaseline:"middle",translation:[r,a]})}};function hu(i,t){let e=new yi({ctx:i.ctx,options:t,chart:i});rt.configure(i,e,t),rt.addBox(i,e),i.titleBlock=e}var cu={id:"title",_element:yi,start(i,t,e){hu(i,e)},stop(i){let t=i.titleBlock;rt.removeBox(i,t),delete i.titleBlock},beforeUpdate(i,t,e){let s=i.titleBlock;rt.configure(i,s,e),s.options=e},defaults:{align:"center",display:!1,font:{weight:"bold"},fullSize:!0,padding:10,position:"top",text:"",weight:2e3},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}},cs=new WeakMap,du={id:"subtitle",start(i,t,e){let s=new yi({ctx:i.ctx,options:e,chart:i});rt.configure(i,s,e),rt.addBox(i,s),cs.set(i,s)},stop(i){rt.removeBox(i,cs.get(i)),cs.delete(i)},beforeUpdate(i,t,e){let s=cs.get(i);rt.configure(i,s,e),s.options=e},defaults:{align:"center",display:!1,font:{weight:"normal"},fullSize:!0,padding:0,position:"top",text:"",weight:1500},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}},gi={average(i){if(!i.length)return!1;let t,e,s=new Set,n=0,o=0;for(t=0,e=i.length;t<e;++t){let a=i[t].element;if(a&&a.hasValue()){let l=a.tooltipPosition();s.add(l.x),n+=l.y,++o}}return o===0||s.size===0?!1:{x:[...s].reduce((a,l)=>a+l)/s.size,y:n/o}},nearest(i,t){if(!i.length)return!1;let e=t.x,s=t.y,n=Number.POSITIVE_INFINITY,o,r,a;for(o=0,r=i.length;o<r;++o){let l=i[o].element;if(l&&l.hasValue()){let h=l.getCenterPoint(),c=Ji(t,h);c<n&&(n=c,a=l)}}if(a){let l=a.tooltipPosition();e=l.x,s=l.y}return{x:e,y:s}}};function Rt(i,t){return t&&(W(t)?Array.prototype.push.apply(i,t):i.push(t)),i}function Wt(i){return(typeof i=="string"||i instanceof String)&&i.indexOf(`
`)>-1?i.split(`
`):i}function uu(i,t){let{element:e,datasetIndex:s,index:n}=t,o=i.getDatasetMeta(s).controller,{label:r,value:a}=o.getLabelAndValue(n);return{chart:i,label:r,parsed:o.getParsed(n),raw:i.data.datasets[s].data[n],formattedValue:a,dataset:o.getDataset(),dataIndex:n,datasetIndex:s,element:e}}function $r(i,t){let e=i.chart.ctx,{body:s,footer:n,title:o}=i,{boxWidth:r,boxHeight:a}=t,l=Z(t.bodyFont),h=Z(t.titleFont),c=Z(t.footerFont),d=o.length,u=n.length,g=s.length,f=nt(t.padding),p=f.height,m=0,v=s.reduce((S,y)=>S+y.before.length+y.lines.length+y.after.length,0);if(v+=i.beforeBody.length+i.afterBody.length,d&&(p+=d*h.lineHeight+(d-1)*t.titleSpacing+t.titleMarginBottom),v){let S=t.displayColors?Math.max(a,l.lineHeight):l.lineHeight;p+=g*S+(v-g)*l.lineHeight+(v-1)*t.bodySpacing}u&&(p+=t.footerMarginTop+u*c.lineHeight+(u-1)*t.footerSpacing);let _=0,k=function(S){m=Math.max(m,e.measureText(S).width+_)};return e.save(),e.font=h.string,z(i.title,k),e.font=l.string,z(i.beforeBody.concat(i.afterBody),k),_=t.displayColors?r+2+t.boxPadding:0,z(s,S=>{z(S.before,k),z(S.lines,k),z(S.after,k)}),_=0,e.font=c.string,z(i.footer,k),e.restore(),m+=f.width,{width:m,height:p}}function fu(i,t){let{y:e,height:s}=t;return e<s/2?"top":e>i.height-s/2?"bottom":"center"}function gu(i,t,e,s){let{x:n,width:o}=s,r=e.caretSize+e.caretPadding;if(i==="left"&&n+o+r>t.width||i==="right"&&n-o-r<0)return!0}function pu(i,t,e,s){let{x:n,width:o}=e,{width:r,chartArea:{left:a,right:l}}=i,h="center";return s==="center"?h=n<=(a+l)/2?"left":"right":n<=o/2?h="left":n>=r-o/2&&(h="right"),gu(h,i,t,e)&&(h="center"),h}function Wr(i,t,e){let s=e.yAlign||t.yAlign||fu(i,e);return{xAlign:e.xAlign||t.xAlign||pu(i,t,e,s),yAlign:s}}function mu(i,t){let{x:e,width:s}=i;return t==="right"?e-=s:t==="center"&&(e-=s/2),e}function bu(i,t,e){let{y:s,height:n}=i;return t==="top"?s+=e:t==="bottom"?s-=n+e:s-=n/2,s}function Ur(i,t,e,s){let{caretSize:n,caretPadding:o,cornerRadius:r}=i,{xAlign:a,yAlign:l}=e,h=n+o,{topLeft:c,topRight:d,bottomLeft:u,bottomRight:g}=se(r),f=mu(t,a),p=bu(t,l,h);return l==="center"?a==="left"?f+=h:a==="right"&&(f-=h):a==="left"?f-=Math.max(c,u)+n:a==="right"&&(f+=Math.max(d,g)+n),{x:tt(f,0,s.width-t.width),y:tt(p,0,s.height-t.height)}}function ds(i,t,e){let s=nt(e.padding);return t==="center"?i.x+i.width/2:t==="right"?i.x+i.width-s.right:i.x+s.left}function Xr(i){return Rt([],Wt(i))}function vu(i,t,e){return Vt(i,{tooltip:t,tooltipItems:e,type:"tooltip"})}function Yr(i,t){let e=t&&t.dataset&&t.dataset.tooltip&&t.dataset.tooltip.callbacks;return e?i.override(e):i}var wa={beforeTitle:Tt,title(i){if(i.length>0){let t=i[0],e=t.chart.data.labels,s=e?e.length:0;if(this&&this.options&&this.options.mode==="dataset")return t.dataset.label||"";if(t.label)return t.label;if(s>0&&t.dataIndex<s)return e[t.dataIndex]}return""},afterTitle:Tt,beforeBody:Tt,beforeLabel:Tt,label(i){if(this&&this.options&&this.options.mode==="dataset")return i.label+": "+i.formattedValue||i.formattedValue;let t=i.dataset.label||"";t&&(t+=": ");let e=i.formattedValue;return F(e)||(t+=e),t},labelColor(i){let e=i.chart.getDatasetMeta(i.datasetIndex).controller.getStyle(i.dataIndex);return{borderColor:e.borderColor,backgroundColor:e.backgroundColor,borderWidth:e.borderWidth,borderDash:e.borderDash,borderDashOffset:e.borderDashOffset,borderRadius:0}},labelTextColor(){return this.options.bodyColor},labelPointStyle(i){let e=i.chart.getDatasetMeta(i.datasetIndex).controller.getStyle(i.dataIndex);return{pointStyle:e.pointStyle,rotation:e.rotation}},afterLabel:Tt,afterBody:Tt,beforeFooter:Tt,footer:Tt,afterFooter:Tt};function ut(i,t,e,s){let n=i[t].call(e,s);return typeof n>"u"?wa[t].call(e,s):n}var _i=class extends vt{constructor(t){super(),this.opacity=0,this._active=[],this._eventPosition=void 0,this._size=void 0,this._cachedAnimations=void 0,this._tooltipItems=[],this.$animations=void 0,this.$context=void 0,this.chart=t.chart,this.options=t.options,this.dataPoints=void 0,this.title=void 0,this.beforeBody=void 0,this.body=void 0,this.afterBody=void 0,this.footer=void 0,this.xAlign=void 0,this.yAlign=void 0,this.x=void 0,this.y=void 0,this.height=void 0,this.width=void 0,this.caretX=void 0,this.caretY=void 0,this.labelColors=void 0,this.labelPointStyles=void 0,this.labelTextColors=void 0}initialize(t){this.options=t,this._cachedAnimations=void 0,this.$context=void 0}_resolveAnimations(){let t=this._cachedAnimations;if(t)return t;let e=this.chart,s=this.options.setContext(this.getContext()),n=s.enabled&&e.options.animation&&s.animations,o=new ps(this.chart,n);return n._cacheable&&(this._cachedAnimations=Object.freeze(o)),o}getContext(){return this.$context||(this.$context=vu(this.chart.getContext(),this,this._tooltipItems))}getTitle(t,e){let{callbacks:s}=e,n=ut(s,"beforeTitle",this,t),o=ut(s,"title",this,t),r=ut(s,"afterTitle",this,t),a=[];return a=Rt(a,Wt(n)),a=Rt(a,Wt(o)),a=Rt(a,Wt(r)),a}getBeforeBody(t,e){return Xr(ut(e.callbacks,"beforeBody",this,t))}getBody(t,e){let{callbacks:s}=e,n=[];return z(t,o=>{let r={before:[],lines:[],after:[]},a=Yr(s,o);Rt(r.before,Wt(ut(a,"beforeLabel",this,o))),Rt(r.lines,ut(a,"label",this,o)),Rt(r.after,Wt(ut(a,"afterLabel",this,o))),n.push(r)}),n}getAfterBody(t,e){return Xr(ut(e.callbacks,"afterBody",this,t))}getFooter(t,e){let{callbacks:s}=e,n=ut(s,"beforeFooter",this,t),o=ut(s,"footer",this,t),r=ut(s,"afterFooter",this,t),a=[];return a=Rt(a,Wt(n)),a=Rt(a,Wt(o)),a=Rt(a,Wt(r)),a}_createItems(t){let e=this._active,s=this.chart.data,n=[],o=[],r=[],a=[],l,h;for(l=0,h=e.length;l<h;++l)a.push(uu(this.chart,e[l]));return t.filter&&(a=a.filter((c,d,u)=>t.filter(c,d,u,s))),t.itemSort&&(a=a.sort((c,d)=>t.itemSort(c,d,s))),z(a,c=>{let d=Yr(t.callbacks,c);n.push(ut(d,"labelColor",this,c)),o.push(ut(d,"labelPointStyle",this,c)),r.push(ut(d,"labelTextColor",this,c))}),this.labelColors=n,this.labelPointStyles=o,this.labelTextColors=r,this.dataPoints=a,a}update(t,e){let s=this.options.setContext(this.getContext()),n=this._active,o,r=[];if(!n.length)this.opacity!==0&&(o={opacity:0});else{let a=gi[s.position].call(this,n,this._eventPosition);r=this._createItems(s),this.title=this.getTitle(r,s),this.beforeBody=this.getBeforeBody(r,s),this.body=this.getBody(r,s),this.afterBody=this.getAfterBody(r,s),this.footer=this.getFooter(r,s);let l=this._size=$r(this,s),h=Object.assign({},a,l),c=Wr(this.chart,s,h),d=Ur(s,h,c,this.chart);this.xAlign=c.xAlign,this.yAlign=c.yAlign,o={opacity:1,x:d.x,y:d.y,width:l.width,height:l.height,caretX:a.x,caretY:a.y}}this._tooltipItems=r,this.$context=void 0,o&&this._resolveAnimations().update(this,o),t&&s.external&&s.external.call(this,{chart:this.chart,tooltip:this,replay:e})}drawCaret(t,e,s,n){let o=this.getCaretPosition(t,s,n);e.lineTo(o.x1,o.y1),e.lineTo(o.x2,o.y2),e.lineTo(o.x3,o.y3)}getCaretPosition(t,e,s){let{xAlign:n,yAlign:o}=this,{caretSize:r,cornerRadius:a}=s,{topLeft:l,topRight:h,bottomLeft:c,bottomRight:d}=se(a),{x:u,y:g}=t,{width:f,height:p}=e,m,v,_,k,S,y;return o==="center"?(S=g+p/2,n==="left"?(m=u,v=m-r,k=S+r,y=S-r):(m=u+f,v=m+r,k=S-r,y=S+r),_=m):(n==="left"?v=u+Math.max(l,c)+r:n==="right"?v=u+f-Math.max(h,d)-r:v=this.caretX,o==="top"?(k=g,S=k-r,m=v-r,_=v+r):(k=g+p,S=k+r,m=v+r,_=v-r),y=k),{x1:m,x2:v,x3:_,y1:k,y2:S,y3:y}}drawTitle(t,e,s){let n=this.title,o=n.length,r,a,l;if(o){let h=fe(s.rtl,this.x,this.width);for(t.x=ds(this,s.titleAlign,s),e.textAlign=h.textAlign(s.titleAlign),e.textBaseline="middle",r=Z(s.titleFont),a=s.titleSpacing,e.fillStyle=s.titleColor,e.font=r.string,l=0;l<o;++l)e.fillText(n[l],h.x(t.x),t.y+r.lineHeight/2),t.y+=r.lineHeight+a,l+1===o&&(t.y+=s.titleMarginBottom-a)}}_drawColorBox(t,e,s,n,o){let r=this.labelColors[s],a=this.labelPointStyles[s],{boxHeight:l,boxWidth:h}=o,c=Z(o.bodyFont),d=ds(this,"left",o),u=n.x(d),g=l<c.lineHeight?(c.lineHeight-l)/2:0,f=e.y+g;if(o.usePointStyle){let p={radius:Math.min(h,l)/2,pointStyle:a.pointStyle,rotation:a.rotation,borderWidth:1},m=n.leftForLtr(u,h)+h/2,v=f+l/2;t.strokeStyle=o.multiKeyBackground,t.fillStyle=o.multiKeyBackground,es(t,p,m,v),t.strokeStyle=r.borderColor,t.fillStyle=r.backgroundColor,es(t,p,m,v)}else{t.lineWidth=H(r.borderWidth)?Math.max(...Object.values(r.borderWidth)):r.borderWidth||1,t.strokeStyle=r.borderColor,t.setLineDash(r.borderDash||[]),t.lineDashOffset=r.borderDashOffset||0;let p=n.leftForLtr(u,h),m=n.leftForLtr(n.xPlus(u,1),h-2),v=se(r.borderRadius);Object.values(v).some(_=>_!==0)?(t.beginPath(),t.fillStyle=o.multiKeyBackground,Fe(t,{x:p,y:f,w:h,h:l,radius:v}),t.fill(),t.stroke(),t.fillStyle=r.backgroundColor,t.beginPath(),Fe(t,{x:m,y:f+1,w:h-2,h:l-2,radius:v}),t.fill()):(t.fillStyle=o.multiKeyBackground,t.fillRect(p,f,h,l),t.strokeRect(p,f,h,l),t.fillStyle=r.backgroundColor,t.fillRect(m,f+1,h-2,l-2))}t.fillStyle=this.labelTextColors[s]}drawBody(t,e,s){let{body:n}=this,{bodySpacing:o,bodyAlign:r,displayColors:a,boxHeight:l,boxWidth:h,boxPadding:c}=s,d=Z(s.bodyFont),u=d.lineHeight,g=0,f=fe(s.rtl,this.x,this.width),p=function(A){e.fillText(A,f.x(t.x+g),t.y+u/2),t.y+=u+o},m=f.textAlign(r),v,_,k,S,y,b,w;for(e.textAlign=r,e.textBaseline="middle",e.font=d.string,t.x=ds(this,m,s),e.fillStyle=s.bodyColor,z(this.beforeBody,p),g=a&&m!=="right"?r==="center"?h/2+c:h+2+c:0,S=0,b=n.length;S<b;++S){for(v=n[S],_=this.labelTextColors[S],e.fillStyle=_,z(v.before,p),k=v.lines,a&&k.length&&(this._drawColorBox(e,t,S,f,s),u=Math.max(d.lineHeight,l)),y=0,w=k.length;y<w;++y)p(k[y]),u=d.lineHeight;z(v.after,p)}g=0,u=d.lineHeight,z(this.afterBody,p),t.y-=o}drawFooter(t,e,s){let n=this.footer,o=n.length,r,a;if(o){let l=fe(s.rtl,this.x,this.width);for(t.x=ds(this,s.footerAlign,s),t.y+=s.footerMarginTop,e.textAlign=l.textAlign(s.footerAlign),e.textBaseline="middle",r=Z(s.footerFont),e.fillStyle=s.footerColor,e.font=r.string,a=0;a<o;++a)e.fillText(n[a],l.x(t.x),t.y+r.lineHeight/2),t.y+=r.lineHeight+s.footerSpacing}}drawBackground(t,e,s,n){let{xAlign:o,yAlign:r}=this,{x:a,y:l}=t,{width:h,height:c}=s,{topLeft:d,topRight:u,bottomLeft:g,bottomRight:f}=se(n.cornerRadius);e.fillStyle=n.backgroundColor,e.strokeStyle=n.borderColor,e.lineWidth=n.borderWidth,e.beginPath(),e.moveTo(a+d,l),r==="top"&&this.drawCaret(t,e,s,n),e.lineTo(a+h-u,l),e.quadraticCurveTo(a+h,l,a+h,l+u),r==="center"&&o==="right"&&this.drawCaret(t,e,s,n),e.lineTo(a+h,l+c-f),e.quadraticCurveTo(a+h,l+c,a+h-f,l+c),r==="bottom"&&this.drawCaret(t,e,s,n),e.lineTo(a+g,l+c),e.quadraticCurveTo(a,l+c,a,l+c-g),r==="center"&&o==="left"&&this.drawCaret(t,e,s,n),e.lineTo(a,l+d),e.quadraticCurveTo(a,l,a+d,l),e.closePath(),e.fill(),n.borderWidth>0&&e.stroke()}_updateAnimationTarget(t){let e=this.chart,s=this.$animations,n=s&&s.x,o=s&&s.y;if(n||o){let r=gi[t.position].call(this,this._active,this._eventPosition);if(!r)return;let a=this._size=$r(this,t),l=Object.assign({},r,this._size),h=Wr(e,t,l),c=Ur(t,l,h,e);(n._to!==c.x||o._to!==c.y)&&(this.xAlign=h.xAlign,this.yAlign=h.yAlign,this.width=a.width,this.height=a.height,this.caretX=r.x,this.caretY=r.y,this._resolveAnimations().update(this,c))}}_willRender(){return!!this.opacity}draw(t){let e=this.options.setContext(this.getContext()),s=this.opacity;if(!s)return;this._updateAnimationTarget(e);let n={width:this.width,height:this.height},o={x:this.x,y:this.y};s=Math.abs(s)<.001?0:s;let r=nt(e.padding),a=this.title.length||this.beforeBody.length||this.body.length||this.afterBody.length||this.footer.length;e.enabled&&a&&(t.save(),t.globalAlpha=s,this.drawBackground(o,t,n,e),mn(t,e.textDirection),o.y+=r.top,this.drawTitle(o,t,e),this.drawBody(o,t,e),this.drawFooter(o,t,e),bn(t,e.textDirection),t.restore())}getActiveElements(){return this._active||[]}setActiveElements(t,e){let s=this._active,n=t.map(({datasetIndex:a,index:l})=>{let h=this.chart.getDatasetMeta(a);if(!h)throw new Error("Cannot find a dataset at index "+a);return{datasetIndex:a,element:h.data[l],index:l}}),o=!si(s,n),r=this._positionChanged(n,e);(o||r)&&(this._active=n,this._eventPosition=e,this._ignoreReplayEvents=!0,this.update(!0))}handleEvent(t,e,s=!0){if(e&&this._ignoreReplayEvents)return!1;this._ignoreReplayEvents=!1;let n=this.options,o=this._active||[],r=this._getActiveElements(t,o,e,s),a=this._positionChanged(r,t),l=e||!si(r,o)||a;return l&&(this._active=r,(n.enabled||n.external)&&(this._eventPosition={x:t.x,y:t.y},this.update(!0,e))),l}_getActiveElements(t,e,s,n){let o=this.options;if(t.type==="mouseout")return[];if(!n)return e.filter(a=>this.chart.data.datasets[a.datasetIndex]&&this.chart.getDatasetMeta(a.datasetIndex).controller.getParsed(a.index)!==void 0);let r=this.chart.getElementsAtEventForMode(t,o.mode,o,s);return o.reverse&&r.reverse(),r}_positionChanged(t,e){let{caretX:s,caretY:n,options:o}=this,r=gi[o.position].call(this,t,e);return r!==!1&&(s!==r.x||n!==r.y)}};C(_i,"positioners",gi);var _u={id:"tooltip",_element:_i,positioners:gi,afterInit(i,t,e){e&&(i.tooltip=new _i({chart:i,options:e}))},beforeUpdate(i,t,e){i.tooltip&&i.tooltip.initialize(e)},reset(i,t,e){i.tooltip&&i.tooltip.initialize(e)},afterDraw(i){let t=i.tooltip;if(t&&t._willRender()){let e={tooltip:t};if(i.notifyPlugins("beforeTooltipDraw",{...e,cancelable:!0})===!1)return;t.draw(i.ctx),i.notifyPlugins("afterTooltipDraw",e)}},afterEvent(i,t){if(i.tooltip){let e=t.replay;i.tooltip.handleEvent(t.event,e,t.inChartArea)&&(t.changed=!0)}},defaults:{enabled:!0,external:null,position:"average",backgroundColor:"rgba(0,0,0,0.8)",titleColor:"#fff",titleFont:{weight:"bold"},titleSpacing:2,titleMarginBottom:6,titleAlign:"left",bodyColor:"#fff",bodySpacing:2,bodyFont:{},bodyAlign:"left",footerColor:"#fff",footerSpacing:2,footerMarginTop:6,footerFont:{weight:"bold"},footerAlign:"left",padding:6,caretPadding:2,caretSize:5,cornerRadius:6,boxHeight:(i,t)=>t.bodyFont.size,boxWidth:(i,t)=>t.bodyFont.size,multiKeyBackground:"#fff",displayColors:!0,boxPadding:0,borderColor:"rgba(0,0,0,0)",borderWidth:0,animation:{duration:400,easing:"easeOutQuart"},animations:{numbers:{type:"number",properties:["x","y","width","height","caretX","caretY"]},opacity:{easing:"linear",duration:200}},callbacks:wa},defaultRoutes:{bodyFont:"font",footerFont:"font",titleFont:"font"},descriptors:{_scriptable:i=>i!=="filter"&&i!=="itemSort"&&i!=="external",_indexable:!1,callbacks:{_scriptable:!1,_indexable:!1},animation:{_fallback:!1},animations:{_fallback:"animation"}},additionalOptionScopes:["interaction"]},xu=Object.freeze({__proto__:null,Colors:Dd,Decimation:Fd,Filler:iu,Legend:lu,SubTitle:du,Title:cu,Tooltip:_u}),yu=(i,t,e,s)=>(typeof t=="string"?(e=i.push(t)-1,s.unshift({index:e,label:t})):isNaN(t)&&(e=null),e);function wu(i,t,e,s){let n=i.indexOf(t);if(n===-1)return yu(i,t,e,s);let o=i.lastIndexOf(t);return n!==o?e:n}var ku=(i,t)=>i===null?null:tt(Math.round(i),0,t);function Jr(i){let t=this.getLabels();return i>=0&&i<t.length?t[i]:i}var pi=class extends xe{constructor(t){super(t),this._startValue=void 0,this._valueRange=0,this._addedLabels=[]}init(t){let e=this._addedLabels;if(e.length){let s=this.getLabels();for(let{index:n,label:o}of e)s[n]===o&&s.splice(n,1);this._addedLabels=[]}super.init(t)}parse(t,e){if(F(t))return null;let s=this.getLabels();return e=isFinite(e)&&s[e]===t?e:wu(s,t,O(e,t),this._addedLabels),ku(e,s.length-1)}determineDataLimits(){let{minDefined:t,maxDefined:e}=this.getUserBounds(),{min:s,max:n}=this.getMinMax(!0);this.options.bounds==="ticks"&&(t||(s=0),e||(n=this.getLabels().length-1)),this.min=s,this.max=n}buildTicks(){let t=this.min,e=this.max,s=this.options.offset,n=[],o=this.getLabels();o=t===0&&e===o.length-1?o:o.slice(t,e+1),this._valueRange=Math.max(o.length-(s?0:1),1),this._startValue=this.min-(s?.5:0);for(let r=t;r<=e;r++)n.push({value:r});return n}getLabelForValue(t){return Jr.call(this,t)}configure(){super.configure(),this.isHorizontal()||(this._reversePixels=!this._reversePixels)}getPixelForValue(t){return typeof t!="number"&&(t=this.parse(t)),t===null?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getPixelForTick(t){let e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getValueForPixel(t){return Math.round(this._startValue+this.getDecimalForPixel(t)*this._valueRange)}getBasePixel(){return this.bottom}};C(pi,"id","category"),C(pi,"defaults",{ticks:{callback:Jr}});function Su(i,t){let e=[],{bounds:n,step:o,min:r,max:a,precision:l,count:h,maxTicks:c,maxDigits:d,includeBounds:u}=i,g=o||1,f=c-1,{min:p,max:m}=t,v=!F(r),_=!F(a),k=!F(h),S=(m-p)/(d+1),y=Js((m-p)/f/g)*g,b,w,A,P;if(y<1e-14&&!v&&!_)return[{value:p},{value:m}];P=Math.ceil(m/y)-Math.floor(p/y),P>f&&(y=Js(P*y/f/g)*g),F(l)||(b=Math.pow(10,l),y=Math.ceil(y*b)/b),n==="ticks"?(w=Math.floor(p/y)*y,A=Math.ceil(m/y)*y):(w=p,A=m),v&&_&&o&&Io((a-r)/o,y/1e3)?(P=Math.round(Math.min((a-r)/y,c)),y=(a-r)/P,w=r,A=a):k?(w=v?r:w,A=_?a:A,P=h-1,y=(A-w)/P):(P=(A-w)/y,Oe(P,Math.round(P),y/1e3)?P=Math.round(P):P=Math.ceil(P));let E=Math.max(Ks(y),Ks(w));b=Math.pow(10,F(l)?E:l),w=Math.round(w*b)/b,A=Math.round(A*b)/b;let T=0;for(v&&(u&&w!==r?(e.push({value:r}),w<r&&T++,Oe(Math.round((w+T*y)*b)/b,r,qr(r,S,i))&&T++):w<r&&T++);T<P;++T){let D=Math.round((w+T*y)*b)/b;if(_&&D>a)break;e.push({value:D})}return _&&u&&A!==a?e.length&&Oe(e[e.length-1].value,a,qr(a,S,i))?e[e.length-1].value=a:e.push({value:a}):(!_||A===a)&&e.push({value:A}),e}function qr(i,t,{horizontal:e,minRotation:s}){let n=wt(s),o=(e?Math.sin(n):Math.cos(n))||.001,r=.75*t*(""+i).length;return Math.min(t/o,r)}var Ye=class extends xe{constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._endValue=void 0,this._valueRange=0}parse(t,e){return F(t)||(typeof t=="number"||t instanceof Number)&&!isFinite(+t)?null:+t}handleTickRangeOptions(){let{beginAtZero:t}=this.options,{minDefined:e,maxDefined:s}=this.getUserBounds(),{min:n,max:o}=this,r=l=>n=e?n:l,a=l=>o=s?o:l;if(t){let l=St(n),h=St(o);l<0&&h<0?a(0):l>0&&h>0&&r(0)}if(n===o){let l=o===0?1:Math.abs(o*.05);a(o+l),t||r(n-l)}this.min=n,this.max=o}getTickLimit(){let t=this.options.ticks,{maxTicksLimit:e,stepSize:s}=t,n;return s?(n=Math.ceil(this.max/s)-Math.floor(this.min/s)+1,n>1e3&&(console.warn(`scales.${this.id}.ticks.stepSize: ${s} would result generating up to ${n} ticks. Limiting to 1000.`),n=1e3)):(n=this.computeTickLimit(),e=e||11),e&&(n=Math.min(e,n)),n}computeTickLimit(){return Number.POSITIVE_INFINITY}buildTicks(){let t=this.options,e=t.ticks,s=this.getTickLimit();s=Math.max(2,s);let n={maxTicks:s,bounds:t.bounds,min:t.min,max:t.max,precision:e.precision,step:e.stepSize,count:e.count,maxDigits:this._maxDigits(),horizontal:this.isHorizontal(),minRotation:e.minRotation||0,includeBounds:e.includeBounds!==!1},o=this._range||this,r=Su(n,o);return t.bounds==="ticks"&&qs(r,this,"value"),t.reverse?(r.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),r}configure(){let t=this.ticks,e=this.min,s=this.max;if(super.configure(),this.options.offset&&t.length){let n=(s-e)/Math.max(t.length-1,1)/2;e-=n,s+=n}this._startValue=e,this._endValue=s,this._valueRange=s-e}getLabelForValue(t){return Ie(t,this.chart.options.locale,this.options.ticks.format)}},mi=class extends Ye{determineDataLimits(){let{min:t,max:e}=this.getMinMax(!0);this.min=J(t)?t:0,this.max=J(e)?e:1,this.handleTickRangeOptions()}computeTickLimit(){let t=this.isHorizontal(),e=t?this.width:this.height,s=wt(this.options.ticks.minRotation),n=(t?Math.sin(s):Math.cos(s))||.001,o=this._resolveTickFontOptions(0);return Math.ceil(e/Math.min(40,o.lineHeight/n))}getPixelForValue(t){return t===null?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getValueForPixel(t){return this._startValue+this.getDecimalForPixel(t)*this._valueRange}};C(mi,"id","linear"),C(mi,"defaults",{ticks:{callback:ni.formatters.numeric}});var wi=i=>Math.floor(zt(i)),pe=(i,t)=>Math.pow(10,wi(i)+t);function Kr(i){return i/Math.pow(10,wi(i))===1}function Gr(i,t,e){let s=Math.pow(10,e),n=Math.floor(i/s);return Math.ceil(t/s)-n}function Au(i,t){let e=t-i,s=wi(e);for(;Gr(i,t,s)>10;)s++;for(;Gr(i,t,s)<10;)s--;return Math.min(s,wi(i))}function Cu(i,{min:t,max:e}){t=dt(i.min,t);let s=[],n=wi(t),o=Au(t,e),r=o<0?Math.pow(10,Math.abs(o)):1,a=Math.pow(10,o),l=n>o?Math.pow(10,n):0,h=Math.round((t-l)*r)/r,c=Math.floor((t-l)/a/10)*a*10,d=Math.floor((h-c)/Math.pow(10,o)),u=dt(i.min,Math.round((l+c+d*Math.pow(10,o))*r)/r);for(;u<e;)s.push({value:u,major:Kr(u),significand:d}),d>=10?d=d<15?15:20:d++,d>=20&&(o++,d=2,r=o>=0?1:r),u=Math.round((l+c+d*Math.pow(10,o))*r)/r;let g=dt(i.max,u);return s.push({value:g,major:Kr(g),significand:d}),s}var bi=class extends xe{constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._valueRange=0}parse(t,e){let s=Ye.prototype.parse.apply(this,[t,e]);if(s===0){this._zero=!0;return}return J(s)&&s>0?s:null}determineDataLimits(){let{min:t,max:e}=this.getMinMax(!0);this.min=J(t)?Math.max(0,t):null,this.max=J(e)?Math.max(0,e):null,this.options.beginAtZero&&(this._zero=!0),this._zero&&this.min!==this._suggestedMin&&!J(this._userMin)&&(this.min=t===pe(this.min,0)?pe(this.min,-1):pe(this.min,0)),this.handleTickRangeOptions()}handleTickRangeOptions(){let{minDefined:t,maxDefined:e}=this.getUserBounds(),s=this.min,n=this.max,o=a=>s=t?s:a,r=a=>n=e?n:a;s===n&&(s<=0?(o(1),r(10)):(o(pe(s,-1)),r(pe(n,1)))),s<=0&&o(pe(n,-1)),n<=0&&r(pe(s,1)),this.min=s,this.max=n}buildTicks(){let t=this.options,e={min:this._userMin,max:this._userMax},s=Cu(e,this);return t.bounds==="ticks"&&qs(s,this,"value"),t.reverse?(s.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),s}getLabelForValue(t){return t===void 0?"0":Ie(t,this.chart.options.locale,this.options.ticks.format)}configure(){let t=this.min;super.configure(),this._startValue=zt(t),this._valueRange=zt(this.max)-zt(t)}getPixelForValue(t){return(t===void 0||t===0)&&(t=this.min),t===null||isNaN(t)?NaN:this.getPixelForDecimal(t===this.min?0:(zt(t)-this._startValue)/this._valueRange)}getValueForPixel(t){let e=this.getDecimalForPixel(t);return Math.pow(10,this._startValue+e*this._valueRange)}};C(bi,"id","logarithmic"),C(bi,"defaults",{ticks:{callback:ni.formatters.logarithmic,major:{enabled:!0}}});function Wn(i){let t=i.ticks;if(t.display&&i.display){let e=nt(t.backdropPadding);return O(t.font&&t.font.size,Y.font.size)+e.height}return 0}function Pu(i,t,e){return e=W(e)?e:[e],{w:Wo(i,t.string,e),h:e.length*t.lineHeight}}function Zr(i,t,e,s,n){return i===s||i===n?{start:t-e/2,end:t+e/2}:i<s||i>n?{start:t-e,end:t}:{start:t,end:t+e}}function Mu(i){let t={l:i.left+i._padding.left,r:i.right-i._padding.right,t:i.top+i._padding.top,b:i.bottom-i._padding.bottom},e=Object.assign({},t),s=[],n=[],o=i._pointLabels.length,r=i.options.pointLabels,a=r.centerPointLabels?U/o:0;for(let l=0;l<o;l++){let h=r.setContext(i.getPointLabelContext(l));n[l]=h.padding;let c=i.getPointPosition(l,i.drawingArea+n[l],a),d=Z(h.font),u=Pu(i.ctx,d,i._pointLabels[l]);s[l]=u;let g=ct(i.getIndexAngle(l)+a),f=Math.round(Gi(g)),p=Zr(f,c.x,u.w,0,180),m=Zr(f,c.y,u.h,90,270);Tu(e,t,g,p,m)}i.setCenterPoint(t.l-e.l,e.r-t.r,t.t-e.t,e.b-t.b),i._pointLabelItems=Du(i,s,n)}function Tu(i,t,e,s,n){let o=Math.abs(Math.sin(e)),r=Math.abs(Math.cos(e)),a=0,l=0;s.start<t.l?(a=(t.l-s.start)/o,i.l=Math.min(i.l,t.l-a)):s.end>t.r&&(a=(s.end-t.r)/o,i.r=Math.max(i.r,t.r+a)),n.start<t.t?(l=(t.t-n.start)/r,i.t=Math.min(i.t,t.t-l)):n.end>t.b&&(l=(n.end-t.b)/r,i.b=Math.max(i.b,t.b+l))}function Eu(i,t,e){let s=i.drawingArea,{extra:n,additionalAngle:o,padding:r,size:a}=e,l=i.getPointPosition(t,s+n+r,o),h=Math.round(Gi(ct(l.angle+q))),c=Iu(l.y,a.h,h),d=Ou(h),u=Lu(l.x,a.w,d);return{visible:!0,x:l.x,y:c,textAlign:d,left:u,top:c,right:u+a.w,bottom:c+a.h}}function Ru(i,t){if(!t)return!0;let{left:e,top:s,right:n,bottom:o}=i;return!(Mt({x:e,y:s},t)||Mt({x:e,y:o},t)||Mt({x:n,y:s},t)||Mt({x:n,y:o},t))}function Du(i,t,e){let s=[],n=i._pointLabels.length,o=i.options,{centerPointLabels:r,display:a}=o.pointLabels,l={extra:Wn(o)/2,additionalAngle:r?U/n:0},h;for(let c=0;c<n;c++){l.padding=e[c],l.size=t[c];let d=Eu(i,c,l);s.push(d),a==="auto"&&(d.visible=Ru(d,h),d.visible&&(h=d))}return s}function Ou(i){return i===0||i===180?"center":i<180?"left":"right"}function Lu(i,t,e){return e==="right"?i-=t:e==="center"&&(i-=t/2),i}function Iu(i,t,e){return e===90||e===270?i-=t/2:(e>270||e<90)&&(i-=t),i}function Fu(i,t,e){let{left:s,top:n,right:o,bottom:r}=e,{backdropColor:a}=t;if(!F(a)){let l=se(t.borderRadius),h=nt(t.backdropPadding);i.fillStyle=a;let c=s-h.left,d=n-h.top,u=o-s+h.width,g=r-n+h.height;Object.values(l).some(f=>f!==0)?(i.beginPath(),Fe(i,{x:c,y:d,w:u,h:g,radius:l}),i.fill()):i.fillRect(c,d,u,g)}}function Hu(i,t){let{ctx:e,options:{pointLabels:s}}=i;for(let n=t-1;n>=0;n--){let o=i._pointLabelItems[n];if(!o.visible)continue;let r=s.setContext(i.getPointLabelContext(n));Fu(e,r,o);let a=Z(r.font),{x:l,y:h,textAlign:c}=o;ie(e,i._pointLabels[n],l,h+a.lineHeight/2,a,{color:r.color,textAlign:c,textBaseline:"middle"})}}function ka(i,t,e,s){let{ctx:n}=i;if(e)n.arc(i.xCenter,i.yCenter,t,0,X);else{let o=i.getPointPosition(0,t);n.moveTo(o.x,o.y);for(let r=1;r<s;r++)o=i.getPointPosition(r,t),n.lineTo(o.x,o.y)}}function Nu(i,t,e,s,n){let o=i.ctx,r=t.circular,{color:a,lineWidth:l}=t;!r&&!s||!a||!l||e<0||(o.save(),o.strokeStyle=a,o.lineWidth=l,o.setLineDash(n.dash||[]),o.lineDashOffset=n.dashOffset,o.beginPath(),ka(i,e,r,s),o.closePath(),o.stroke(),o.restore())}function Bu(i,t,e){return Vt(i,{label:e,index:t,type:"pointLabel"})}var be=class extends Ye{constructor(t){super(t),this.xCenter=void 0,this.yCenter=void 0,this.drawingArea=void 0,this._pointLabels=[],this._pointLabelItems=[]}setDimensions(){let t=this._padding=nt(Wn(this.options)/2),e=this.width=this.maxWidth-t.width,s=this.height=this.maxHeight-t.height;this.xCenter=Math.floor(this.left+e/2+t.left),this.yCenter=Math.floor(this.top+s/2+t.top),this.drawingArea=Math.floor(Math.min(e,s)/2)}determineDataLimits(){let{min:t,max:e}=this.getMinMax(!1);this.min=J(t)&&!isNaN(t)?t:0,this.max=J(e)&&!isNaN(e)?e:0,this.handleTickRangeOptions()}computeTickLimit(){return Math.ceil(this.drawingArea/Wn(this.options))}generateTickLabels(t){Ye.prototype.generateTickLabels.call(this,t),this._pointLabels=this.getLabels().map((e,s)=>{let n=V(this.options.pointLabels.callback,[e,s],this);return n||n===0?n:""}).filter((e,s)=>this.chart.getDataVisibility(s))}fit(){let t=this.options;t.display&&t.pointLabels.display?Mu(this):this.setCenterPoint(0,0,0,0)}setCenterPoint(t,e,s,n){this.xCenter+=Math.floor((t-e)/2),this.yCenter+=Math.floor((s-n)/2),this.drawingArea-=Math.min(this.drawingArea/2,Math.max(t,e,s,n))}getIndexAngle(t){let e=X/(this._pointLabels.length||1),s=this.options.startAngle||0;return ct(t*e+wt(s))}getDistanceFromCenterForValue(t){if(F(t))return NaN;let e=this.drawingArea/(this.max-this.min);return this.options.reverse?(this.max-t)*e:(t-this.min)*e}getValueForDistanceFromCenter(t){if(F(t))return NaN;let e=t/(this.drawingArea/(this.max-this.min));return this.options.reverse?this.max-e:this.min+e}getPointLabelContext(t){let e=this._pointLabels||[];if(t>=0&&t<e.length){let s=e[t];return Bu(this.getContext(),t,s)}}getPointPosition(t,e,s=0){let n=this.getIndexAngle(t)-q+s;return{x:Math.cos(n)*e+this.xCenter,y:Math.sin(n)*e+this.yCenter,angle:n}}getPointPositionForValue(t,e){return this.getPointPosition(t,this.getDistanceFromCenterForValue(e))}getBasePosition(t){return this.getPointPositionForValue(t||0,this.getBaseValue())}getPointLabelPosition(t){let{left:e,top:s,right:n,bottom:o}=this._pointLabelItems[t];return{left:e,top:s,right:n,bottom:o}}drawBackground(){let{backgroundColor:t,grid:{circular:e}}=this.options;if(t){let s=this.ctx;s.save(),s.beginPath(),ka(this,this.getDistanceFromCenterForValue(this._endValue),e,this._pointLabels.length),s.closePath(),s.fillStyle=t,s.fill(),s.restore()}}drawGrid(){let t=this.ctx,e=this.options,{angleLines:s,grid:n,border:o}=e,r=this._pointLabels.length,a,l,h;if(e.pointLabels.display&&Hu(this,r),n.display&&this.ticks.forEach((c,d)=>{if(d!==0||d===0&&this.min<0){l=this.getDistanceFromCenterForValue(c.value);let u=this.getContext(d),g=n.setContext(u),f=o.setContext(u);Nu(this,g,l,r,f)}}),s.display){for(t.save(),a=r-1;a>=0;a--){let c=s.setContext(this.getPointLabelContext(a)),{color:d,lineWidth:u}=c;!u||!d||(t.lineWidth=u,t.strokeStyle=d,t.setLineDash(c.borderDash),t.lineDashOffset=c.borderDashOffset,l=this.getDistanceFromCenterForValue(e.reverse?this.min:this.max),h=this.getPointPosition(a,l),t.beginPath(),t.moveTo(this.xCenter,this.yCenter),t.lineTo(h.x,h.y),t.stroke())}t.restore()}}drawBorder(){}drawLabels(){let t=this.ctx,e=this.options,s=e.ticks;if(!s.display)return;let n=this.getIndexAngle(0),o,r;t.save(),t.translate(this.xCenter,this.yCenter),t.rotate(n),t.textAlign="center",t.textBaseline="middle",this.ticks.forEach((a,l)=>{if(l===0&&this.min>=0&&!e.reverse)return;let h=s.setContext(this.getContext(l)),c=Z(h.font);if(o=this.getDistanceFromCenterForValue(this.ticks[l].value),h.showLabelBackdrop){t.font=c.string,r=t.measureText(a.label).width,t.fillStyle=h.backdropColor;let d=nt(h.backdropPadding);t.fillRect(-r/2-d.left,-o-c.size/2-d.top,r+d.width,c.size+d.height)}ie(t,a.label,0,-o,c,{color:h.color,strokeColor:h.textStrokeColor,strokeWidth:h.textStrokeWidth})}),t.restore()}drawTitle(){}};C(be,"id","radialLinear"),C(be,"defaults",{display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,lineWidth:1,borderDash:[],borderDashOffset:0},grid:{circular:!1},startAngle:0,ticks:{showLabelBackdrop:!0,callback:ni.formatters.numeric},pointLabels:{backdropColor:void 0,backdropPadding:2,display:!0,font:{size:10},callback(t){return t},padding:5,centerPointLabels:!1}}),C(be,"defaultRoutes",{"angleLines.color":"borderColor","pointLabels.color":"color","ticks.color":"color"}),C(be,"descriptors",{angleLines:{_fallback:"grid"}});var ys={millisecond:{common:!0,size:1,steps:1e3},second:{common:!0,size:1e3,steps:60},minute:{common:!0,size:6e4,steps:60},hour:{common:!0,size:36e5,steps:24},day:{common:!0,size:864e5,steps:30},week:{common:!1,size:6048e5,steps:4},month:{common:!0,size:2628e6,steps:12},quarter:{common:!1,size:7884e6,steps:4},year:{common:!0,size:3154e7}},ft=Object.keys(ys);function Qr(i,t){return i-t}function ta(i,t){if(F(t))return null;let e=i._adapter,{parser:s,round:n,isoWeekday:o}=i._parseOpts,r=t;return typeof s=="function"&&(r=s(r)),J(r)||(r=typeof s=="string"?e.parse(r,s):e.parse(r)),r===null?null:(n&&(r=n==="week"&&(ue(o)||o===!0)?e.startOf(r,"isoWeek",o):e.startOf(r,n)),+r)}function ea(i,t,e,s){let n=ft.length;for(let o=ft.indexOf(i);o<n-1;++o){let r=ys[ft[o]],a=r.steps?r.steps:Number.MAX_SAFE_INTEGER;if(r.common&&Math.ceil((e-t)/(a*r.size))<=s)return ft[o]}return ft[n-1]}function zu(i,t,e,s,n){for(let o=ft.length-1;o>=ft.indexOf(e);o--){let r=ft[o];if(ys[r].common&&i._adapter.diff(n,s,r)>=t-1)return r}return ft[e?ft.indexOf(e):0]}function ju(i){for(let t=ft.indexOf(i)+1,e=ft.length;t<e;++t)if(ys[ft[t]].common)return ft[t]}function ia(i,t,e){if(!e)i[t]=!0;else if(e.length){let{lo:s,hi:n}=Zi(e,t),o=e[s]>=t?e[s]:e[n];i[o]=!0}}function Vu(i,t,e,s){let n=i._adapter,o=+n.startOf(t[0].value,s),r=t[t.length-1].value,a,l;for(a=o;a<=r;a=+n.add(a,1,s))l=e[a],l>=0&&(t[l].major=!0);return t}function sa(i,t,e){let s=[],n={},o=t.length,r,a;for(r=0;r<o;++r)a=t[r],n[a]=r,s.push({value:a,major:!1});return o===0||!e?s:Vu(i,s,n,e)}var _e=class extends xe{constructor(t){super(t),this._cache={data:[],labels:[],all:[]},this._unit="day",this._majorUnit=void 0,this._offsets={},this._normalized=!1,this._parseOpts=void 0}init(t,e={}){let s=t.time||(t.time={}),n=this._adapter=new ic._date(t.adapters.date);n.init(e),Re(s.displayFormats,n.formats()),this._parseOpts={parser:s.parser,round:s.round,isoWeekday:s.isoWeekday},super.init(t),this._normalized=e.normalized}parse(t,e){return t===void 0?null:ta(this,t)}beforeLayout(){super.beforeLayout(),this._cache={data:[],labels:[],all:[]}}determineDataLimits(){let t=this.options,e=this._adapter,s=t.time.unit||"day",{min:n,max:o,minDefined:r,maxDefined:a}=this.getUserBounds();function l(h){!r&&!isNaN(h.min)&&(n=Math.min(n,h.min)),!a&&!isNaN(h.max)&&(o=Math.max(o,h.max))}(!r||!a)&&(l(this._getLabelBounds()),(t.bounds!=="ticks"||t.ticks.source!=="labels")&&l(this.getMinMax(!1))),n=J(n)&&!isNaN(n)?n:+e.startOf(Date.now(),s),o=J(o)&&!isNaN(o)?o:+e.endOf(Date.now(),s)+1,this.min=Math.min(n,o-1),this.max=Math.max(n+1,o)}_getLabelBounds(){let t=this.getLabelTimestamps(),e=Number.POSITIVE_INFINITY,s=Number.NEGATIVE_INFINITY;return t.length&&(e=t[0],s=t[t.length-1]),{min:e,max:s}}buildTicks(){let t=this.options,e=t.time,s=t.ticks,n=s.source==="labels"?this.getLabelTimestamps():this._generate();t.bounds==="ticks"&&n.length&&(this.min=this._userMin||n[0],this.max=this._userMax||n[n.length-1]);let o=this.min,r=this.max,a=No(n,o,r);return this._unit=e.unit||(s.autoSkip?ea(e.minUnit,this.min,this.max,this._getLabelCapacity(o)):zu(this,a.length,e.minUnit,this.min,this.max)),this._majorUnit=!s.major.enabled||this._unit==="year"?void 0:ju(this._unit),this.initOffsets(n),t.reverse&&a.reverse(),sa(this,a,this._majorUnit)}afterAutoSkip(){this.options.offsetAfterAutoskip&&this.initOffsets(this.ticks.map(t=>+t.value))}initOffsets(t=[]){let e=0,s=0,n,o;this.options.offset&&t.length&&(n=this.getDecimalForValue(t[0]),t.length===1?e=1-n:e=(this.getDecimalForValue(t[1])-n)/2,o=this.getDecimalForValue(t[t.length-1]),t.length===1?s=o:s=(o-this.getDecimalForValue(t[t.length-2]))/2);let r=t.length<3?.5:.25;e=tt(e,0,r),s=tt(s,0,r),this._offsets={start:e,end:s,factor:1/(e+1+s)}}_generate(){let t=this._adapter,e=this.min,s=this.max,n=this.options,o=n.time,r=o.unit||ea(o.minUnit,e,s,this._getLabelCapacity(e)),a=O(n.ticks.stepSize,1),l=r==="week"?o.isoWeekday:!1,h=ue(l)||l===!0,c={},d=e,u,g;if(h&&(d=+t.startOf(d,"isoWeek",l)),d=+t.startOf(d,h?"day":r),t.diff(s,e,r)>1e5*a)throw new Error(e+" and "+s+" are too far apart with stepSize of "+a+" "+r);let f=n.ticks.source==="data"&&this.getDataTimestamps();for(u=d,g=0;u<s;u=+t.add(u,a,r),g++)ia(c,u,f);return(u===s||n.bounds==="ticks"||g===1)&&ia(c,u,f),Object.keys(c).sort(Qr).map(p=>+p)}getLabelForValue(t){let e=this._adapter,s=this.options.time;return s.tooltipFormat?e.format(t,s.tooltipFormat):e.format(t,s.displayFormats.datetime)}format(t,e){let n=this.options.time.displayFormats,o=this._unit,r=e||n[o];return this._adapter.format(t,r)}_tickFormatFunction(t,e,s,n){let o=this.options,r=o.ticks.callback;if(r)return V(r,[t,e,s],this);let a=o.time.displayFormats,l=this._unit,h=this._majorUnit,c=l&&a[l],d=h&&a[h],u=s[e],g=h&&d&&u&&u.major;return this._adapter.format(t,n||(g?d:c))}generateTickLabels(t){let e,s,n;for(e=0,s=t.length;e<s;++e)n=t[e],n.label=this._tickFormatFunction(n.value,e,t)}getDecimalForValue(t){return t===null?NaN:(t-this.min)/(this.max-this.min)}getPixelForValue(t){let e=this._offsets,s=this.getDecimalForValue(t);return this.getPixelForDecimal((e.start+s)*e.factor)}getValueForPixel(t){let e=this._offsets,s=this.getDecimalForPixel(t)/e.factor-e.end;return this.min+s*(this.max-this.min)}_getLabelSize(t){let e=this.options.ticks,s=this.ctx.measureText(t).width,n=wt(this.isHorizontal()?e.maxRotation:e.minRotation),o=Math.cos(n),r=Math.sin(n),a=this._resolveTickFontOptions(0).size;return{w:s*o+a*r,h:s*r+a*o}}_getLabelCapacity(t){let e=this.options.time,s=e.displayFormats,n=s[e.unit]||s.millisecond,o=this._tickFormatFunction(t,0,sa(this,[t],this._majorUnit),n),r=this._getLabelSize(o),a=Math.floor(this.isHorizontal()?this.width/r.w:this.height/r.h)-1;return a>0?a:1}getDataTimestamps(){let t=this._cache.data||[],e,s;if(t.length)return t;let n=this.getMatchingVisibleMetas();if(this._normalized&&n.length)return this._cache.data=n[0].controller.getAllParsedValues(this);for(e=0,s=n.length;e<s;++e)t=t.concat(n[e].controller.getAllParsedValues(this));return this._cache.data=this.normalize(t)}getLabelTimestamps(){let t=this._cache.labels||[],e,s;if(t.length)return t;let n=this.getLabels();for(e=0,s=n.length;e<s;++e)t.push(ta(this,n[e]));return this._cache.labels=this._normalized?t:this.normalize(t)}normalize(t){return Qs(t.sort(Qr))}};C(_e,"id","time"),C(_e,"defaults",{bounds:"data",adapters:{},time:{parser:!1,unit:!1,round:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{}},ticks:{source:"auto",callback:!1,major:{enabled:!1}}});function us(i,t,e){let s=0,n=i.length-1,o,r,a,l;e?(t>=i[s].pos&&t<=i[n].pos&&({lo:s,hi:n}=Pt(i,"pos",t)),{pos:o,time:a}=i[s],{pos:r,time:l}=i[n]):(t>=i[s].time&&t<=i[n].time&&({lo:s,hi:n}=Pt(i,"time",t)),{time:o,pos:a}=i[s],{time:r,pos:l}=i[n]);let h=r-o;return h?a+(l-a)*(t-o)/h:a}var vi=class extends _e{constructor(t){super(t),this._table=[],this._minPos=void 0,this._tableRange=void 0}initOffsets(){let t=this._getTimestampsForTable(),e=this._table=this.buildLookupTable(t);this._minPos=us(e,this.min),this._tableRange=us(e,this.max)-this._minPos,super.initOffsets(t)}buildLookupTable(t){let{min:e,max:s}=this,n=[],o=[],r,a,l,h,c;for(r=0,a=t.length;r<a;++r)h=t[r],h>=e&&h<=s&&n.push(h);if(n.length<2)return[{time:e,pos:0},{time:s,pos:1}];for(r=0,a=n.length;r<a;++r)c=n[r+1],l=n[r-1],h=n[r],Math.round((c+l)/2)!==h&&o.push({time:h,pos:r/(a-1)});return o}_generate(){let t=this.min,e=this.max,s=super.getDataTimestamps();return(!s.includes(t)||!s.length)&&s.splice(0,0,t),(!s.includes(e)||s.length===1)&&s.push(e),s.sort((n,o)=>n-o)}_getTimestampsForTable(){let t=this._cache.all||[];if(t.length)return t;let e=this.getDataTimestamps(),s=this.getLabelTimestamps();return e.length&&s.length?t=this.normalize(e.concat(s)):t=e.length?e:s,t=this._cache.all=t,t}getDecimalForValue(t){return(us(this._table,t)-this._minPos)/this._tableRange}getValueForPixel(t){let e=this._offsets,s=this.getDecimalForPixel(t)/e.factor-e.end;return us(this._table,s*this._tableRange+this._minPos,!0)}};C(vi,"id","timeseries"),C(vi,"defaults",_e.defaults);var $u=Object.freeze({__proto__:null,CategoryScale:pi,LinearScale:mi,LogarithmicScale:bi,RadialLinearScale:be,TimeScale:_e,TimeSeriesScale:vi}),Sa=[ec,Ad,xu,$u];At.register(...Sa);var Ci=i=>typeof i=="function"?i:function(){return i},Wu=typeof self<"u"?self:null,Ai=typeof window<"u"?window:null,ye=Wu||Ai||ye,Uu="2.0.0",Lt={connecting:0,open:1,closing:2,closed:3},Xu=1e4,Yu=1e3,_t={closed:"closed",errored:"errored",joined:"joined",joining:"joining",leaving:"leaving"},Xt={close:"phx_close",error:"phx_error",join:"phx_join",reply:"phx_reply",leave:"phx_leave"},Xn={longpoll:"longpoll",websocket:"websocket"},Ju={complete:4},ws=class{constructor(i,t,e,s){this.channel=i,this.event=t,this.payload=e||function(){return{}},this.receivedResp=null,this.timeout=s,this.timeoutTimer=null,this.recHooks=[],this.sent=!1}resend(i){this.timeout=i,this.reset(),this.send()}send(){this.hasReceived("timeout")||(this.startTimeout(),this.sent=!0,this.channel.socket.push({topic:this.channel.topic,event:this.event,payload:this.payload(),ref:this.ref,join_ref:this.channel.joinRef()}))}receive(i,t){return this.hasReceived(i)&&t(this.receivedResp.response),this.recHooks.push({status:i,callback:t}),this}reset(){this.cancelRefEvent(),this.ref=null,this.refEvent=null,this.receivedResp=null,this.sent=!1}matchReceive({status:i,response:t,_ref:e}){this.recHooks.filter(s=>s.status===i).forEach(s=>s.callback(t))}cancelRefEvent(){this.refEvent&&this.channel.off(this.refEvent)}cancelTimeout(){clearTimeout(this.timeoutTimer),this.timeoutTimer=null}startTimeout(){this.timeoutTimer&&this.cancelTimeout(),this.ref=this.channel.socket.makeRef(),this.refEvent=this.channel.replyEventName(this.ref),this.channel.on(this.refEvent,i=>{this.cancelRefEvent(),this.cancelTimeout(),this.receivedResp=i,this.matchReceive(i)}),this.timeoutTimer=setTimeout(()=>{this.trigger("timeout",{})},this.timeout)}hasReceived(i){return this.receivedResp&&this.receivedResp.status===i}trigger(i,t){this.channel.trigger(this.refEvent,{status:i,response:t})}},Aa=class{constructor(i,t){this.callback=i,this.timerCalc=t,this.timer=null,this.tries=0}reset(){this.tries=0,clearTimeout(this.timer)}scheduleTimeout(){clearTimeout(this.timer),this.timer=setTimeout(()=>{this.tries=this.tries+1,this.callback()},this.timerCalc(this.tries+1))}},qu=class{constructor(i,t,e){this.state=_t.closed,this.topic=i,this.params=Ci(t||{}),this.socket=e,this.bindings=[],this.bindingRef=0,this.timeout=this.socket.timeout,this.joinedOnce=!1,this.joinPush=new ws(this,Xt.join,this.params,this.timeout),this.pushBuffer=[],this.stateChangeRefs=[],this.rejoinTimer=new Aa(()=>{this.socket.isConnected()&&this.rejoin()},this.socket.rejoinAfterMs),this.stateChangeRefs.push(this.socket.onError(()=>this.rejoinTimer.reset())),this.stateChangeRefs.push(this.socket.onOpen(()=>{this.rejoinTimer.reset(),this.isErrored()&&this.rejoin()})),this.joinPush.receive("ok",()=>{this.state=_t.joined,this.rejoinTimer.reset(),this.pushBuffer.forEach(s=>s.send()),this.pushBuffer=[]}),this.joinPush.receive("error",()=>{this.state=_t.errored,this.socket.isConnected()&&this.rejoinTimer.scheduleTimeout()}),this.onClose(()=>{this.rejoinTimer.reset(),this.socket.hasLogger()&&this.socket.log("channel",`close ${this.topic} ${this.joinRef()}`),this.state=_t.closed,this.socket.remove(this)}),this.onError(s=>{this.socket.hasLogger()&&this.socket.log("channel",`error ${this.topic}`,s),this.isJoining()&&this.joinPush.reset(),this.state=_t.errored,this.socket.isConnected()&&this.rejoinTimer.scheduleTimeout()}),this.joinPush.receive("timeout",()=>{this.socket.hasLogger()&&this.socket.log("channel",`timeout ${this.topic} (${this.joinRef()})`,this.joinPush.timeout),new ws(this,Xt.leave,Ci({}),this.timeout).send(),this.state=_t.errored,this.joinPush.reset(),this.socket.isConnected()&&this.rejoinTimer.scheduleTimeout()}),this.on(Xt.reply,(s,n)=>{this.trigger(this.replyEventName(n),s)})}join(i=this.timeout){if(this.joinedOnce)throw new Error("tried to join multiple times. 'join' can only be called a single time per channel instance");return this.timeout=i,this.joinedOnce=!0,this.rejoin(),this.joinPush}onClose(i){this.on(Xt.close,i)}onError(i){return this.on(Xt.error,t=>i(t))}on(i,t){let e=this.bindingRef++;return this.bindings.push({event:i,ref:e,callback:t}),e}off(i,t){this.bindings=this.bindings.filter(e=>!(e.event===i&&(typeof t>"u"||t===e.ref)))}canPush(){return this.socket.isConnected()&&this.isJoined()}push(i,t,e=this.timeout){if(t=t||{},!this.joinedOnce)throw new Error(`tried to push '${i}' to '${this.topic}' before joining. Use channel.join() before pushing events`);let s=new ws(this,i,function(){return t},e);return this.canPush()?s.send():(s.startTimeout(),this.pushBuffer.push(s)),s}leave(i=this.timeout){this.rejoinTimer.reset(),this.joinPush.cancelTimeout(),this.state=_t.leaving;let t=()=>{this.socket.hasLogger()&&this.socket.log("channel",`leave ${this.topic}`),this.trigger(Xt.close,"leave")},e=new ws(this,Xt.leave,Ci({}),i);return e.receive("ok",()=>t()).receive("timeout",()=>t()),e.send(),this.canPush()||e.trigger("ok",{}),e}onMessage(i,t,e){return t}isMember(i,t,e,s){return this.topic!==i?!1:s&&s!==this.joinRef()?(this.socket.hasLogger()&&this.socket.log("channel","dropping outdated message",{topic:i,event:t,payload:e,joinRef:s}),!1):!0}joinRef(){return this.joinPush.ref}rejoin(i=this.timeout){this.isLeaving()||(this.socket.leaveOpenTopic(this.topic),this.state=_t.joining,this.joinPush.resend(i))}trigger(i,t,e,s){let n=this.onMessage(i,t,e,s);if(t&&!n)throw new Error("channel onMessage callbacks must return the payload, modified or unmodified");let o=this.bindings.filter(r=>r.event===i);for(let r=0;r<o.length;r++)o[r].callback(n,e,s||this.joinRef())}replyEventName(i){return`chan_reply_${i}`}isClosed(){return this.state===_t.closed}isErrored(){return this.state===_t.errored}isJoined(){return this.state===_t.joined}isJoining(){return this.state===_t.joining}isLeaving(){return this.state===_t.leaving}},Ss=class{static request(i,t,e,s,n,o,r){if(ye.XDomainRequest){let a=new ye.XDomainRequest;return this.xdomainRequest(a,i,t,s,n,o,r)}else{let a=new ye.XMLHttpRequest;return this.xhrRequest(a,i,t,e,s,n,o,r)}}static xdomainRequest(i,t,e,s,n,o,r){return i.timeout=n,i.open(t,e),i.onload=()=>{let a=this.parseJSON(i.responseText);r&&r(a)},o&&(i.ontimeout=o),i.onprogress=()=>{},i.send(s),i}static xhrRequest(i,t,e,s,n,o,r,a){return i.open(t,e,!0),i.timeout=o,i.setRequestHeader("Content-Type",s),i.onerror=()=>a&&a(null),i.onreadystatechange=()=>{if(i.readyState===Ju.complete&&a){let l=this.parseJSON(i.responseText);a(l)}},r&&(i.ontimeout=r),i.send(n),i}static parseJSON(i){if(!i||i==="")return null;try{return JSON.parse(i)}catch{return console&&console.log("failed to parse JSON response",i),null}}static serialize(i,t){let e=[];for(var s in i){if(!Object.prototype.hasOwnProperty.call(i,s))continue;let n=t?`${t}[${s}]`:s,o=i[s];typeof o=="object"?e.push(this.serialize(o,n)):e.push(encodeURIComponent(n)+"="+encodeURIComponent(o))}return e.join("&")}static appendParams(i,t){if(Object.keys(t).length===0)return i;let e=i.match(/\?/)?"&":"?";return`${i}${e}${this.serialize(t)}`}},Ku=i=>{let t="",e=new Uint8Array(i),s=e.byteLength;for(let n=0;n<s;n++)t+=String.fromCharCode(e[n]);return btoa(t)},Si=class{constructor(i){this.endPoint=null,this.token=null,this.skipHeartbeat=!0,this.reqs=new Set,this.awaitingBatchAck=!1,this.currentBatch=null,this.currentBatchTimer=null,this.batchBuffer=[],this.onopen=function(){},this.onerror=function(){},this.onmessage=function(){},this.onclose=function(){},this.pollEndpoint=this.normalizeEndpoint(i),this.readyState=Lt.connecting,setTimeout(()=>this.poll(),0)}normalizeEndpoint(i){return i.replace("ws://","http://").replace("wss://","https://").replace(new RegExp("(.*)/"+Xn.websocket),"$1/"+Xn.longpoll)}endpointURL(){return Ss.appendParams(this.pollEndpoint,{token:this.token})}closeAndRetry(i,t,e){this.close(i,t,e),this.readyState=Lt.connecting}ontimeout(){this.onerror("timeout"),this.closeAndRetry(1005,"timeout",!1)}isActive(){return this.readyState===Lt.open||this.readyState===Lt.connecting}poll(){this.ajax("GET","application/json",null,()=>this.ontimeout(),i=>{if(i){var{status:t,token:e,messages:s}=i;this.token=e}else t=0;switch(t){case 200:s.forEach(n=>{setTimeout(()=>this.onmessage({data:n}),0)}),this.poll();break;case 204:this.poll();break;case 410:this.readyState=Lt.open,this.onopen({}),this.poll();break;case 403:this.onerror(403),this.close(1008,"forbidden",!1);break;case 0:case 500:this.onerror(500),this.closeAndRetry(1011,"internal server error",500);break;default:throw new Error(`unhandled poll status ${t}`)}})}send(i){typeof i!="string"&&(i=Ku(i)),this.currentBatch?this.currentBatch.push(i):this.awaitingBatchAck?this.batchBuffer.push(i):(this.currentBatch=[i],this.currentBatchTimer=setTimeout(()=>{this.batchSend(this.currentBatch),this.currentBatch=null},0))}batchSend(i){this.awaitingBatchAck=!0,this.ajax("POST","application/x-ndjson",i.join(`
`),()=>this.onerror("timeout"),t=>{this.awaitingBatchAck=!1,!t||t.status!==200?(this.onerror(t&&t.status),this.closeAndRetry(1011,"internal server error",!1)):this.batchBuffer.length>0&&(this.batchSend(this.batchBuffer),this.batchBuffer=[])})}close(i,t,e){for(let n of this.reqs)n.abort();this.readyState=Lt.closed;let s=Object.assign({code:1e3,reason:void 0,wasClean:!0},{code:i,reason:t,wasClean:e});this.batchBuffer=[],clearTimeout(this.currentBatchTimer),this.currentBatchTimer=null,typeof CloseEvent<"u"?this.onclose(new CloseEvent("close",s)):this.onclose(s)}ajax(i,t,e,s,n){let o,r=()=>{this.reqs.delete(o),s()};o=Ss.request(i,this.endpointURL(),t,e,this.timeout,r,a=>{this.reqs.delete(o),this.isActive()&&n(a)}),this.reqs.add(o)}};var ks={HEADER_LENGTH:1,META_LENGTH:4,KINDS:{push:0,reply:1,broadcast:2},encode(i,t){if(i.payload.constructor===ArrayBuffer)return t(this.binaryEncode(i));{let e=[i.join_ref,i.ref,i.topic,i.event,i.payload];return t(JSON.stringify(e))}},decode(i,t){if(i.constructor===ArrayBuffer)return t(this.binaryDecode(i));{let[e,s,n,o,r]=JSON.parse(i);return t({join_ref:e,ref:s,topic:n,event:o,payload:r})}},binaryEncode(i){let{join_ref:t,ref:e,event:s,topic:n,payload:o}=i,r=this.META_LENGTH+t.length+e.length+n.length+s.length,a=new ArrayBuffer(this.HEADER_LENGTH+r),l=new DataView(a),h=0;l.setUint8(h++,this.KINDS.push),l.setUint8(h++,t.length),l.setUint8(h++,e.length),l.setUint8(h++,n.length),l.setUint8(h++,s.length),Array.from(t,d=>l.setUint8(h++,d.charCodeAt(0))),Array.from(e,d=>l.setUint8(h++,d.charCodeAt(0))),Array.from(n,d=>l.setUint8(h++,d.charCodeAt(0))),Array.from(s,d=>l.setUint8(h++,d.charCodeAt(0)));var c=new Uint8Array(a.byteLength+o.byteLength);return c.set(new Uint8Array(a),0),c.set(new Uint8Array(o),a.byteLength),c.buffer},binaryDecode(i){let t=new DataView(i),e=t.getUint8(0),s=new TextDecoder;switch(e){case this.KINDS.push:return this.decodePush(i,t,s);case this.KINDS.reply:return this.decodeReply(i,t,s);case this.KINDS.broadcast:return this.decodeBroadcast(i,t,s)}},decodePush(i,t,e){let s=t.getUint8(1),n=t.getUint8(2),o=t.getUint8(3),r=this.HEADER_LENGTH+this.META_LENGTH-1,a=e.decode(i.slice(r,r+s));r=r+s;let l=e.decode(i.slice(r,r+n));r=r+n;let h=e.decode(i.slice(r,r+o));r=r+o;let c=i.slice(r,i.byteLength);return{join_ref:a,ref:null,topic:l,event:h,payload:c}},decodeReply(i,t,e){let s=t.getUint8(1),n=t.getUint8(2),o=t.getUint8(3),r=t.getUint8(4),a=this.HEADER_LENGTH+this.META_LENGTH,l=e.decode(i.slice(a,a+s));a=a+s;let h=e.decode(i.slice(a,a+n));a=a+n;let c=e.decode(i.slice(a,a+o));a=a+o;let d=e.decode(i.slice(a,a+r));a=a+r;let u=i.slice(a,i.byteLength),g={status:d,response:u};return{join_ref:l,ref:h,topic:c,event:Xt.reply,payload:g}},decodeBroadcast(i,t,e){let s=t.getUint8(1),n=t.getUint8(2),o=this.HEADER_LENGTH+2,r=e.decode(i.slice(o,o+s));o=o+s;let a=e.decode(i.slice(o,o+n));o=o+n;let l=i.slice(o,i.byteLength);return{join_ref:null,ref:null,topic:r,event:a,payload:l}}},Ca=class{constructor(i,t={}){this.stateChangeCallbacks={open:[],close:[],error:[],message:[]},this.channels=[],this.sendBuffer=[],this.ref=0,this.timeout=t.timeout||Xu,this.transport=t.transport||ye.WebSocket||Si,this.primaryPassedHealthCheck=!1,this.longPollFallbackMs=t.longPollFallbackMs,this.fallbackTimer=null,this.sessionStore=t.sessionStorage||ye&&ye.sessionStorage,this.establishedConnections=0,this.defaultEncoder=ks.encode.bind(ks),this.defaultDecoder=ks.decode.bind(ks),this.closeWasClean=!1,this.disconnecting=!1,this.binaryType=t.binaryType||"arraybuffer",this.connectClock=1,this.transport!==Si?(this.encode=t.encode||this.defaultEncoder,this.decode=t.decode||this.defaultDecoder):(this.encode=this.defaultEncoder,this.decode=this.defaultDecoder);let e=null;Ai&&Ai.addEventListener&&(Ai.addEventListener("pagehide",s=>{this.conn&&(this.disconnect(),e=this.connectClock)}),Ai.addEventListener("pageshow",s=>{e===this.connectClock&&(e=null,this.connect())})),this.heartbeatIntervalMs=t.heartbeatIntervalMs||3e4,this.rejoinAfterMs=s=>t.rejoinAfterMs?t.rejoinAfterMs(s):[1e3,2e3,5e3][s-1]||1e4,this.reconnectAfterMs=s=>t.reconnectAfterMs?t.reconnectAfterMs(s):[10,50,100,150,200,250,500,1e3,2e3][s-1]||5e3,this.logger=t.logger||null,!this.logger&&t.debug&&(this.logger=(s,n,o)=>{console.log(`${s}: ${n}`,o)}),this.longpollerTimeout=t.longpollerTimeout||2e4,this.params=Ci(t.params||{}),this.endPoint=`${i}/${Xn.websocket}`,this.vsn=t.vsn||Uu,this.heartbeatTimeoutTimer=null,this.heartbeatTimer=null,this.pendingHeartbeatRef=null,this.reconnectTimer=new Aa(()=>{this.teardown(()=>this.connect())},this.reconnectAfterMs)}getLongPollTransport(){return Si}replaceTransport(i){this.connectClock++,this.closeWasClean=!0,clearTimeout(this.fallbackTimer),this.reconnectTimer.reset(),this.conn&&(this.conn.close(),this.conn=null),this.transport=i}protocol(){return location.protocol.match(/^https/)?"wss":"ws"}endPointURL(){let i=Ss.appendParams(Ss.appendParams(this.endPoint,this.params()),{vsn:this.vsn});return i.charAt(0)!=="/"?i:i.charAt(1)==="/"?`${this.protocol()}:${i}`:`${this.protocol()}://${location.host}${i}`}disconnect(i,t,e){this.connectClock++,this.disconnecting=!0,this.closeWasClean=!0,clearTimeout(this.fallbackTimer),this.reconnectTimer.reset(),this.teardown(()=>{this.disconnecting=!1,i&&i()},t,e)}connect(i){i&&(console&&console.log("passing params to connect is deprecated. Instead pass :params to the Socket constructor"),this.params=Ci(i)),!(this.conn&&!this.disconnecting)&&(this.longPollFallbackMs&&this.transport!==Si?this.connectWithFallback(Si,this.longPollFallbackMs):this.transportConnect())}log(i,t,e){this.logger&&this.logger(i,t,e)}hasLogger(){return this.logger!==null}onOpen(i){let t=this.makeRef();return this.stateChangeCallbacks.open.push([t,i]),t}onClose(i){let t=this.makeRef();return this.stateChangeCallbacks.close.push([t,i]),t}onError(i){let t=this.makeRef();return this.stateChangeCallbacks.error.push([t,i]),t}onMessage(i){let t=this.makeRef();return this.stateChangeCallbacks.message.push([t,i]),t}ping(i){if(!this.isConnected())return!1;let t=this.makeRef(),e=Date.now();this.push({topic:"phoenix",event:"heartbeat",payload:{},ref:t});let s=this.onMessage(n=>{n.ref===t&&(this.off([s]),i(Date.now()-e))});return!0}transportConnect(){this.connectClock++,this.closeWasClean=!1,this.conn=new this.transport(this.endPointURL()),this.conn.binaryType=this.binaryType,this.conn.timeout=this.longpollerTimeout,this.conn.onopen=()=>this.onConnOpen(),this.conn.onerror=i=>this.onConnError(i),this.conn.onmessage=i=>this.onConnMessage(i),this.conn.onclose=i=>this.onConnClose(i)}getSession(i){return this.sessionStore&&this.sessionStore.getItem(i)}storeSession(i,t){this.sessionStore&&this.sessionStore.setItem(i,t)}connectWithFallback(i,t=2500){clearTimeout(this.fallbackTimer);let e=!1,s=!0,n,o,r=a=>{this.log("transport",`falling back to ${i.name}...`,a),this.off([n,o]),s=!1,this.replaceTransport(i),this.transportConnect()};if(this.getSession(`phx:fallback:${i.name}`))return r("memorized");this.fallbackTimer=setTimeout(r,t),o=this.onError(a=>{this.log("transport","error",a),s&&!e&&(clearTimeout(this.fallbackTimer),r(a))}),this.onOpen(()=>{if(e=!0,!s)return this.primaryPassedHealthCheck||this.storeSession(`phx:fallback:${i.name}`,"true"),this.log("transport",`established ${i.name} fallback`);clearTimeout(this.fallbackTimer),this.fallbackTimer=setTimeout(r,t),this.ping(a=>{this.log("transport","connected to primary after",a),this.primaryPassedHealthCheck=!0,clearTimeout(this.fallbackTimer)})}),this.transportConnect()}clearHeartbeats(){clearTimeout(this.heartbeatTimer),clearTimeout(this.heartbeatTimeoutTimer)}onConnOpen(){this.hasLogger()&&this.log("transport",`${this.transport.name} connected to ${this.endPointURL()}`),this.closeWasClean=!1,this.disconnecting=!1,this.establishedConnections++,this.flushSendBuffer(),this.reconnectTimer.reset(),this.resetHeartbeat(),this.stateChangeCallbacks.open.forEach(([,i])=>i())}heartbeatTimeout(){this.pendingHeartbeatRef&&(this.pendingHeartbeatRef=null,this.hasLogger()&&this.log("transport","heartbeat timeout. Attempting to re-establish connection"),this.triggerChanError(),this.closeWasClean=!1,this.teardown(()=>this.reconnectTimer.scheduleTimeout(),Yu,"heartbeat timeout"))}resetHeartbeat(){this.conn&&this.conn.skipHeartbeat||(this.pendingHeartbeatRef=null,this.clearHeartbeats(),this.heartbeatTimer=setTimeout(()=>this.sendHeartbeat(),this.heartbeatIntervalMs))}teardown(i,t,e){if(!this.conn)return i&&i();let s=this.connectClock;this.waitForBufferDone(()=>{s===this.connectClock&&(this.conn&&(t?this.conn.close(t,e||""):this.conn.close()),this.waitForSocketClosed(()=>{s===this.connectClock&&(this.conn&&(this.conn.onopen=function(){},this.conn.onerror=function(){},this.conn.onmessage=function(){},this.conn.onclose=function(){},this.conn=null),i&&i())}))})}waitForBufferDone(i,t=1){if(t===5||!this.conn||!this.conn.bufferedAmount){i();return}setTimeout(()=>{this.waitForBufferDone(i,t+1)},150*t)}waitForSocketClosed(i,t=1){if(t===5||!this.conn||this.conn.readyState===Lt.closed){i();return}setTimeout(()=>{this.waitForSocketClosed(i,t+1)},150*t)}onConnClose(i){let t=i&&i.code;this.hasLogger()&&this.log("transport","close",i),this.triggerChanError(),this.clearHeartbeats(),!this.closeWasClean&&t!==1e3&&this.reconnectTimer.scheduleTimeout(),this.stateChangeCallbacks.close.forEach(([,e])=>e(i))}onConnError(i){this.hasLogger()&&this.log("transport",i);let t=this.transport,e=this.establishedConnections;this.stateChangeCallbacks.error.forEach(([,s])=>{s(i,t,e)}),(t===this.transport||e>0)&&this.triggerChanError()}triggerChanError(){this.channels.forEach(i=>{i.isErrored()||i.isLeaving()||i.isClosed()||i.trigger(Xt.error)})}connectionState(){switch(this.conn&&this.conn.readyState){case Lt.connecting:return"connecting";case Lt.open:return"open";case Lt.closing:return"closing";default:return"closed"}}isConnected(){return this.connectionState()==="open"}remove(i){this.off(i.stateChangeRefs),this.channels=this.channels.filter(t=>t!==i)}off(i){for(let t in this.stateChangeCallbacks)this.stateChangeCallbacks[t]=this.stateChangeCallbacks[t].filter(([e])=>i.indexOf(e)===-1)}channel(i,t={}){let e=new qu(i,t,this);return this.channels.push(e),e}push(i){if(this.hasLogger()){let{topic:t,event:e,payload:s,ref:n,join_ref:o}=i;this.log("push",`${t} ${e} (${o}, ${n})`,s)}this.isConnected()?this.encode(i,t=>this.conn.send(t)):this.sendBuffer.push(()=>this.encode(i,t=>this.conn.send(t)))}makeRef(){let i=this.ref+1;return i===this.ref?this.ref=0:this.ref=i,this.ref.toString()}sendHeartbeat(){this.pendingHeartbeatRef&&!this.isConnected()||(this.pendingHeartbeatRef=this.makeRef(),this.push({topic:"phoenix",event:"heartbeat",payload:{},ref:this.pendingHeartbeatRef}),this.heartbeatTimeoutTimer=setTimeout(()=>this.heartbeatTimeout(),this.heartbeatIntervalMs))}flushSendBuffer(){this.isConnected()&&this.sendBuffer.length>0&&(this.sendBuffer.forEach(i=>i()),this.sendBuffer=[])}onConnMessage(i){this.decode(i.data,t=>{let{topic:e,event:s,payload:n,ref:o,join_ref:r}=t;o&&o===this.pendingHeartbeatRef&&(this.clearHeartbeats(),this.pendingHeartbeatRef=null,this.heartbeatTimer=setTimeout(()=>this.sendHeartbeat(),this.heartbeatIntervalMs)),this.hasLogger()&&this.log("receive",`${n.status||""} ${e} ${s} ${o&&"("+o+")"||""}`,n);for(let a=0;a<this.channels.length;a++){let l=this.channels[a];l.isMember(e,s,n,r)&&l.trigger(s,n,o,r)}for(let a=0;a<this.stateChangeCallbacks.message.length;a++){let[,l]=this.stateChangeCallbacks.message[a];l(t)}})}leaveOpenTopic(i){let t=this.channels.find(e=>e.topic===i&&(e.isJoined()||e.isJoining()));t&&(this.hasLogger()&&this.log("transport",`leaving duplicate topic "${i}"`),t.leave())}};var tl="consecutive-reloads",Gu=10,Zu=5e3,Qu=1e4,tf=3e4,el=["phx-click-loading","phx-change-loading","phx-submit-loading","phx-keydown-loading","phx-keyup-loading","phx-blur-loading","phx-focus-loading","phx-hook-loading"],Jt="data-phx-component",Yn="data-phx-link",ef="track-static",sf="data-phx-link-state",Ge="data-phx-ref-loading",kt="data-phx-ref-src",Q="data-phx-ref-lock",il="track-uploads",qt="data-phx-upload-ref",ao="data-phx-preflighted-refs",nf="data-phx-done-refs",Pa="drop-target",to="data-phx-active-refs",Ds="phx:live-file:updated",sl="data-phx-skip",nl="data-phx-id",Ma="data-phx-prune",Ta="phx-connected",we="phx-loading",Je="phx-error",Ea="phx-client-error",Pi="phx-server-error",Ae="data-phx-parent-id",lo="data-phx-main",le="data-phx-root-id",eo="viewport-top",io="viewport-bottom",of="trigger-action",Ls="phx-has-focused",rf=["text","textarea","number","email","password","search","tel","url","date","time","datetime-local","color","range"],ol=["checkbox","radio"],Hi="phx-has-submitted",Ht="data-phx-session",Ce=`[${Ht}]`,so="data-phx-sticky",Se="data-phx-static",no="data-phx-readonly",Ke="data-phx-disabled",Ra="disable-with",Is="data-phx-disable-with-restore",Mi="hook",af="debounce",lf="throttle",Fs="update",Jn="stream",Ti="data-phx-stream",hf="key",It="phxPrivate",Da="auto-recover",As="phx:live-socket:debug",qn="phx:live-socket:profiling",Kn="phx:live-socket:latency-sim",Cs="phx:nav-history-position",cf="progress",Oa="mounted",La="__phoenix_reload_status__",df=1,Ia=3,uf=200,ff=500,gf="phx-",pf=3e4,Ei="debounce-trigger",Ri="throttled",Fa="debounce-prev-key",mf={debounce:300,throttle:300},Ha=[Ge,kt,Q],Ps="d",Ft="s",Gn="r",lt="c",Na="e",Ba="r",za="t",bf="p",ja="stream",vf=class{constructor(i,t,e){let{chunk_size:s,chunk_timeout:n}=t;this.liveSocket=e,this.entry=i,this.offset=0,this.chunkSize=s,this.chunkTimeout=n,this.chunkTimer=null,this.errored=!1,this.uploadChannel=e.channel(`lvu:${i.ref}`,{token:i.metadata()})}error(i){this.errored||(this.uploadChannel.leave(),this.errored=!0,clearTimeout(this.chunkTimer),this.entry.error(i))}upload(){this.uploadChannel.onError(i=>this.error(i)),this.uploadChannel.join().receive("ok",i=>this.readNextChunk()).receive("error",i=>this.error(i))}isDone(){return this.offset>=this.entry.file.size}readNextChunk(){let i=new window.FileReader,t=this.entry.file.slice(this.offset,this.chunkSize+this.offset);i.onload=e=>{if(e.target.error===null)this.offset+=e.target.result.byteLength,this.pushChunk(e.target.result);else return K("Read error: "+e.target.error)},i.readAsArrayBuffer(t)}pushChunk(i){this.uploadChannel.isJoined()&&this.uploadChannel.push("chunk",i,this.chunkTimeout).receive("ok",()=>{this.entry.progress(this.offset/this.entry.file.size*100),this.isDone()||(this.chunkTimer=setTimeout(()=>this.readNextChunk(),this.liveSocket.getLatencySim()||0))}).receive("error",({reason:t})=>this.error(t))}},K=(i,t)=>console.error&&console.error(i,t),Yt=i=>{let t=typeof i;return t==="number"||t==="string"&&/^(0|[1-9]\d*)$/.test(i)};function _f(){let i=new Set,t=document.querySelectorAll("*[id]");for(let e=0,s=t.length;e<s;e++)i.has(t[e].id)?console.error(`Multiple IDs detected: ${t[e].id}. Ensure unique element ids.`):i.add(t[e].id)}function xf(i){let t=new Set;Object.keys(i).forEach(e=>{let s=document.getElementById(e);s&&s.parentElement&&s.parentElement.getAttribute("phx-update")!=="stream"&&t.add(`The stream container with id "${s.parentElement.id}" is missing the phx-update="stream" attribute. Ensure it is set for streams to work properly.`)}),t.forEach(e=>console.error(e))}var yf=(i,t,e,s)=>{i.liveSocket.isDebugEnabled()&&console.log(`${i.id} ${t}: ${e} - `,s)},Di=i=>typeof i=="function"?i:function(){return i},Os=i=>JSON.parse(JSON.stringify(i)),Fi=(i,t,e)=>{do{if(i.matches(`[${t}]`)&&!i.disabled)return i;i=i.parentElement||i.parentNode}while(i!==null&&i.nodeType===1&&!(e&&e.isSameNode(i)||i.matches(Ce)));return null},qe=i=>i!==null&&typeof i=="object"&&!(i instanceof Array),wf=(i,t)=>JSON.stringify(i)===JSON.stringify(t),Va=i=>{for(let t in i)return!1;return!0},ae=(i,t)=>i&&t(i),kf=function(i,t,e,s){i.forEach(n=>{new vf(n,e.config,s).upload()})},Sf={canPushState(){return typeof history.pushState<"u"},dropLocal(i,t,e){return i.removeItem(this.localKey(t,e))},updateLocal(i,t,e,s,n){let o=this.getLocal(i,t,e),r=this.localKey(t,e),a=o===null?s:n(o);return i.setItem(r,JSON.stringify(a)),a},getLocal(i,t,e){return JSON.parse(i.getItem(this.localKey(t,e)))},updateCurrentState(i){this.canPushState()&&history.replaceState(i(history.state||{}),"",window.location.href)},pushState(i,t,e){if(this.canPushState()){if(e!==window.location.href){if(t.type=="redirect"&&t.scroll){let s=history.state||{};s.scroll=t.scroll,history.replaceState(s,"",window.location.href)}delete t.scroll,history[i+"State"](t,"",e||null),window.requestAnimationFrame(()=>{let s=this.getHashTargetEl(window.location.hash);s?s.scrollIntoView():t.type==="redirect"&&window.scroll(0,0)})}}else this.redirect(e)},setCookie(i,t,e){let s=typeof e=="number"?` max-age=${e};`:"";document.cookie=`${i}=${t};${s} path=/`},getCookie(i){return document.cookie.replace(new RegExp(`(?:(?:^|.*;s*)${i}s*=s*([^;]*).*$)|^.*$`),"$1")},deleteCookie(i){document.cookie=`${i}=; max-age=-1; path=/`},redirect(i,t){t&&this.setCookie("__phoenix_flash__",t,60),window.location=i},localKey(i,t){return`${i}-${t}`},getHashTargetEl(i){let t=i.toString().substring(1);if(t!=="")return document.getElementById(t)||document.querySelector(`a[name="${t}"]`)}},gt=Sf,ke={byId(i){return document.getElementById(i)||K(`no id found for ${i}`)},removeClass(i,t){i.classList.remove(t),i.classList.length===0&&i.removeAttribute("class")},all(i,t,e){if(!i)return[];let s=Array.from(i.querySelectorAll(t));return e?s.forEach(e):s},childNodeLength(i){let t=document.createElement("template");return t.innerHTML=i,t.content.childElementCount},isUploadInput(i){return i.type==="file"&&i.getAttribute(qt)!==null},isAutoUpload(i){return i.hasAttribute("data-phx-auto-upload")},findUploadInputs(i){let t=i.id,e=this.all(document,`input[type="file"][${qt}][form="${t}"]`);return this.all(i,`input[type="file"][${qt}]`).concat(e)},findComponentNodeList(i,t){return this.filterWithinSameLiveView(this.all(i,`[${Jt}="${t}"]`),i)},isPhxDestroyed(i){return!!(i.id&&ke.private(i,"destroyed"))},wantsNewTab(i){let t=i.ctrlKey||i.shiftKey||i.metaKey||i.button&&i.button===1,e=i.target instanceof HTMLAnchorElement&&i.target.hasAttribute("download"),s=i.target.hasAttribute("target")&&i.target.getAttribute("target").toLowerCase()==="_blank",n=i.target.hasAttribute("target")&&!i.target.getAttribute("target").startsWith("_");return t||s||e||n},isUnloadableFormSubmit(i){return i.target&&i.target.getAttribute("method")==="dialog"||i.submitter&&i.submitter.getAttribute("formmethod")==="dialog"?!1:!i.defaultPrevented&&!this.wantsNewTab(i)},isNewPageClick(i,t){let e=i.target instanceof HTMLAnchorElement?i.target.getAttribute("href"):null,s;if(i.defaultPrevented||e===null||this.wantsNewTab(i)||e.startsWith("mailto:")||e.startsWith("tel:")||i.target.isContentEditable)return!1;try{s=new URL(e)}catch{try{s=new URL(e,t)}catch{return!0}}return s.host===t.host&&s.protocol===t.protocol&&s.pathname===t.pathname&&s.search===t.search?s.hash===""&&!s.href.endsWith("#"):s.protocol.startsWith("http")},markPhxChildDestroyed(i){this.isPhxChild(i)&&i.setAttribute(Ht,""),this.putPrivate(i,"destroyed",!0)},findPhxChildrenInFragment(i,t){let e=document.createElement("template");return e.innerHTML=i,this.findPhxChildren(e.content,t)},isIgnored(i,t){return(i.getAttribute(t)||i.getAttribute("data-phx-update"))==="ignore"},isPhxUpdate(i,t,e){return i.getAttribute&&e.indexOf(i.getAttribute(t))>=0},findPhxSticky(i){return this.all(i,`[${so}]`)},findPhxChildren(i,t){return this.all(i,`${Ce}[${Ae}="${t}"]`)},findExistingParentCIDs(i,t){let e=new Set,s=new Set;return t.forEach(n=>{this.filterWithinSameLiveView(this.all(i,`[${Jt}="${n}"]`),i).forEach(o=>{e.add(n),this.filterWithinSameLiveView(this.all(o,`[${Jt}]`),o).map(r=>parseInt(r.getAttribute(Jt))).forEach(r=>s.add(r))})}),s.forEach(n=>e.delete(n)),e},filterWithinSameLiveView(i,t){return t.querySelector(Ce)?i.filter(e=>this.withinSameLiveView(e,t)):i},withinSameLiveView(i,t){for(;i=i.parentNode;){if(i.isSameNode(t))return!0;if(i.getAttribute(Ht)!==null)return!1}},private(i,t){return i[It]&&i[It][t]},deletePrivate(i,t){i[It]&&delete i[It][t]},putPrivate(i,t,e){i[It]||(i[It]={}),i[It][t]=e},updatePrivate(i,t,e,s){let n=this.private(i,t);n===void 0?this.putPrivate(i,t,s(e)):this.putPrivate(i,t,s(n))},syncPendingAttrs(i,t){i.hasAttribute(kt)&&(el.forEach(e=>{i.classList.contains(e)&&t.classList.add(e)}),Ha.filter(e=>i.hasAttribute(e)).forEach(e=>{t.setAttribute(e,i.getAttribute(e))}))},copyPrivates(i,t){t[It]&&(i[It]=t[It])},putTitle(i){let t=document.querySelector("title");if(t){let{prefix:e,suffix:s,default:n}=t.dataset,o=typeof i!="string"||i.trim()==="";if(o&&typeof n!="string")return;let r=o?n:i;document.title=`${e||""}${r||""}${s||""}`}else document.title=i},debounce(i,t,e,s,n,o,r,a){let l=i.getAttribute(e),h=i.getAttribute(n);l===""&&(l=s),h===""&&(h=o);let c=l||h;switch(c){case null:return a();case"blur":this.incCycle(i,"debounce-blur-cycle",()=>{r()&&a()}),this.once(i,"debounce-blur")&&i.addEventListener("blur",()=>this.triggerCycle(i,"debounce-blur-cycle"));return;default:let d=parseInt(c),u=()=>h?this.deletePrivate(i,Ri):a(),g=this.incCycle(i,Ei,u);if(isNaN(d))return K(`invalid throttle/debounce value: ${c}`);if(h){let p=!1;if(t.type==="keydown"){let m=this.private(i,Fa);this.putPrivate(i,Fa,t.key),p=m!==t.key}if(!p&&this.private(i,Ri))return!1;{a();let m=setTimeout(()=>{r()&&this.triggerCycle(i,Ei)},d);this.putPrivate(i,Ri,m)}}else setTimeout(()=>{r()&&this.triggerCycle(i,Ei,g)},d);let f=i.form;f&&this.once(f,"bind-debounce")&&f.addEventListener("submit",()=>{Array.from(new FormData(f).entries(),([p])=>{let m=f.querySelector(`[name="${p}"]`);this.incCycle(m,Ei),this.deletePrivate(m,Ri)})}),this.once(i,"bind-debounce")&&i.addEventListener("blur",()=>{clearTimeout(this.private(i,Ri)),this.triggerCycle(i,Ei)})}},triggerCycle(i,t,e){let[s,n]=this.private(i,t);e||(e=s),e===s&&(this.incCycle(i,t),n())},once(i,t){return this.private(i,t)===!0?!1:(this.putPrivate(i,t,!0),!0)},incCycle(i,t,e=function(){}){let[s]=this.private(i,t)||[0,e];return s++,this.putPrivate(i,t,[s,e]),s},maintainPrivateHooks(i,t,e,s){i.hasAttribute&&i.hasAttribute("data-phx-hook")&&!t.hasAttribute("data-phx-hook")&&t.setAttribute("data-phx-hook",i.getAttribute("data-phx-hook")),t.hasAttribute&&(t.hasAttribute(e)||t.hasAttribute(s))&&t.setAttribute("data-phx-hook","Phoenix.InfiniteScroll")},putCustomElHook(i,t){i.isConnected?i.setAttribute("data-phx-hook",""):console.error(`
        hook attached to non-connected DOM element
        ensure you are calling createHook within your connectedCallback. ${i.outerHTML}
      `),this.putPrivate(i,"custom-el-hook",t)},getCustomElHook(i){return this.private(i,"custom-el-hook")},isUsedInput(i){return i.nodeType===Node.ELEMENT_NODE&&(this.private(i,Ls)||this.private(i,Hi))},resetForm(i){Array.from(i.elements).forEach(t=>{this.deletePrivate(t,Ls),this.deletePrivate(t,Hi)})},isPhxChild(i){return i.getAttribute&&i.getAttribute(Ae)},isPhxSticky(i){return i.getAttribute&&i.getAttribute(so)!==null},isChildOfAny(i,t){return!!t.find(e=>e.contains(i))},firstPhxChild(i){return this.isPhxChild(i)?i:this.all(i,`[${Ae}]`)[0]},dispatchEvent(i,t,e={}){let s=!0;i.nodeName==="INPUT"&&i.type==="file"&&t==="click"&&(s=!1);let r={bubbles:e.bubbles===void 0?s:!!e.bubbles,cancelable:!0,detail:e.detail||{}},a=t==="click"?new MouseEvent("click",r):new CustomEvent(t,r);i.dispatchEvent(a)},cloneNode(i,t){if(typeof t>"u")return i.cloneNode(!0);{let e=i.cloneNode(!1);return e.innerHTML=t,e}},mergeAttrs(i,t,e={}){let s=new Set(e.exclude||[]),n=e.isIgnored,o=t.attributes;for(let a=o.length-1;a>=0;a--){let l=o[a].name;if(s.has(l))l==="value"&&i.value===t.value&&i.setAttribute("value",t.getAttribute(l));else{let h=t.getAttribute(l);i.getAttribute(l)!==h&&(!n||n&&l.startsWith("data-"))&&i.setAttribute(l,h)}}let r=i.attributes;for(let a=r.length-1;a>=0;a--){let l=r[a].name;n?l.startsWith("data-")&&!t.hasAttribute(l)&&!Ha.includes(l)&&i.removeAttribute(l):t.hasAttribute(l)||i.removeAttribute(l)}},mergeFocusedInput(i,t){i instanceof HTMLSelectElement||ke.mergeAttrs(i,t,{exclude:["value"]}),t.readOnly?i.setAttribute("readonly",!0):i.removeAttribute("readonly")},hasSelectionRange(i){return i.setSelectionRange&&(i.type==="text"||i.type==="textarea")},restoreFocus(i,t,e){if(i instanceof HTMLSelectElement&&i.focus(),!ke.isTextualInput(i))return;i.matches(":focus")||i.focus(),this.hasSelectionRange(i)&&i.setSelectionRange(t,e)},isFormInput(i){return/^(?:input|select|textarea)$/i.test(i.tagName)&&i.type!=="button"},syncAttrsToProps(i){i instanceof HTMLInputElement&&ol.indexOf(i.type.toLocaleLowerCase())>=0&&(i.checked=i.getAttribute("checked")!==null)},isTextualInput(i){return rf.indexOf(i.type)>=0},isNowTriggerFormExternal(i,t){return i.getAttribute&&i.getAttribute(t)!==null&&document.body.contains(i)},cleanChildNodes(i,t){if(ke.isPhxUpdate(i,t,["append","prepend"])){let e=[];i.childNodes.forEach(s=>{s.id||(!(s.nodeType===Node.TEXT_NODE&&s.nodeValue.trim()==="")&&s.nodeType!==Node.COMMENT_NODE&&K(`only HTML element tags with an id are allowed inside containers with phx-update.

removing illegal node: "${(s.outerHTML||s.nodeValue).trim()}"

`),e.push(s))}),e.forEach(s=>s.remove())}},replaceRootContainer(i,t,e){let s=new Set(["id",Ht,Se,lo,le]);if(i.tagName.toLowerCase()===t.toLowerCase())return Array.from(i.attributes).filter(n=>!s.has(n.name.toLowerCase())).forEach(n=>i.removeAttribute(n.name)),Object.keys(e).filter(n=>!s.has(n.toLowerCase())).forEach(n=>i.setAttribute(n,e[n])),i;{let n=document.createElement(t);return Object.keys(e).forEach(o=>n.setAttribute(o,e[o])),s.forEach(o=>n.setAttribute(o,i.getAttribute(o))),n.innerHTML=i.innerHTML,i.replaceWith(n),n}},getSticky(i,t,e){let s=(ke.private(i,"sticky")||[]).find(([n])=>t===n);if(s){let[n,o,r]=s;return r}else return typeof e=="function"?e():e},deleteSticky(i,t){this.updatePrivate(i,"sticky",[],e=>e.filter(([s,n])=>s!==t))},putSticky(i,t,e){let s=e(i);this.updatePrivate(i,"sticky",[],n=>{let o=n.findIndex(([r])=>t===r);return o>=0?n[o]=[t,e,s]:n.push([t,e,s]),n})},applyStickyOperations(i){let t=ke.private(i,"sticky");t&&t.forEach(([e,s,n])=>this.putSticky(i,e,s))},isLocked(i){return i.hasAttribute&&i.hasAttribute(Q)}},x=ke,Oi=class{static isActive(i,t){let e=t._phxRef===void 0,n=i.getAttribute(to).split(",").indexOf(et.genFileRef(t))>=0;return t.size>0&&(e||n)}static isPreflighted(i,t){return i.getAttribute(ao).split(",").indexOf(et.genFileRef(t))>=0&&this.isActive(i,t)}static isPreflightInProgress(i){return i._preflightInProgress===!0}static markPreflightInProgress(i){i._preflightInProgress=!0}constructor(i,t,e,s){this.ref=et.genFileRef(t),this.fileEl=i,this.file=t,this.view=e,this.meta=null,this._isCancelled=!1,this._isDone=!1,this._progress=0,this._lastProgressSent=-1,this._onDone=function(){},this._onElUpdated=this.onElUpdated.bind(this),this.fileEl.addEventListener(Ds,this._onElUpdated),this.autoUpload=s}metadata(){return this.meta}progress(i){this._progress=Math.floor(i),this._progress>this._lastProgressSent&&(this._progress>=100?(this._progress=100,this._lastProgressSent=100,this._isDone=!0,this.view.pushFileProgress(this.fileEl,this.ref,100,()=>{et.untrackFile(this.fileEl,this.file),this._onDone()})):(this._lastProgressSent=this._progress,this.view.pushFileProgress(this.fileEl,this.ref,this._progress)))}isCancelled(){return this._isCancelled}cancel(){this.file._preflightInProgress=!1,this._isCancelled=!0,this._isDone=!0,this._onDone()}isDone(){return this._isDone}error(i="failed"){this.fileEl.removeEventListener(Ds,this._onElUpdated),this.view.pushFileProgress(this.fileEl,this.ref,{error:i}),this.isAutoUpload()||et.clearFiles(this.fileEl)}isAutoUpload(){return this.autoUpload}onDone(i){this._onDone=()=>{this.fileEl.removeEventListener(Ds,this._onElUpdated),i()}}onElUpdated(){this.fileEl.getAttribute(to).split(",").indexOf(this.ref)===-1&&(et.untrackFile(this.fileEl,this.file),this.cancel())}toPreflightPayload(){return{last_modified:this.file.lastModified,name:this.file.name,relative_path:this.file.webkitRelativePath,size:this.file.size,type:this.file.type,ref:this.ref,meta:typeof this.file.meta=="function"?this.file.meta():void 0}}uploader(i){if(this.meta.uploader){let t=i[this.meta.uploader]||K(`no uploader configured for ${this.meta.uploader}`);return{name:this.meta.uploader,callback:t}}else return{name:"channel",callback:kf}}zipPostFlight(i){this.meta=i.entries[this.ref],this.meta||K(`no preflight upload response returned with ref ${this.ref}`,{input:this.fileEl,response:i})}},Af=0,et=class oo{static genFileRef(t){let e=t._phxRef;return e!==void 0?e:(t._phxRef=(Af++).toString(),t._phxRef)}static getEntryDataURL(t,e,s){let n=this.activeFiles(t).find(o=>this.genFileRef(o)===e);s(URL.createObjectURL(n))}static hasUploadsInProgress(t){let e=0;return x.findUploadInputs(t).forEach(s=>{s.getAttribute(ao)!==s.getAttribute(nf)&&e++}),e>0}static serializeUploads(t){let e=this.activeFiles(t),s={};return e.forEach(n=>{let o={path:t.name},r=t.getAttribute(qt);s[r]=s[r]||[],o.ref=this.genFileRef(n),o.last_modified=n.lastModified,o.name=n.name||o.ref,o.relative_path=n.webkitRelativePath,o.type=n.type,o.size=n.size,typeof n.meta=="function"&&(o.meta=n.meta()),s[r].push(o)}),s}static clearFiles(t){t.value=null,t.removeAttribute(qt),x.putPrivate(t,"files",[])}static untrackFile(t,e){x.putPrivate(t,"files",x.private(t,"files").filter(s=>!Object.is(s,e)))}static trackFiles(t,e,s){if(t.getAttribute("multiple")!==null){let n=e.filter(o=>!this.activeFiles(t).find(r=>Object.is(r,o)));x.updatePrivate(t,"files",[],o=>o.concat(n)),t.value=null}else s&&s.files.length>0&&(t.files=s.files),x.putPrivate(t,"files",e)}static activeFileInputs(t){let e=x.findUploadInputs(t);return Array.from(e).filter(s=>s.files&&this.activeFiles(s).length>0)}static activeFiles(t){return(x.private(t,"files")||[]).filter(e=>Oi.isActive(t,e))}static inputsAwaitingPreflight(t){let e=x.findUploadInputs(t);return Array.from(e).filter(s=>this.filesAwaitingPreflight(s).length>0)}static filesAwaitingPreflight(t){return this.activeFiles(t).filter(e=>!Oi.isPreflighted(t,e)&&!Oi.isPreflightInProgress(e))}static markPreflightInProgress(t){t.forEach(e=>Oi.markPreflightInProgress(e.file))}constructor(t,e,s){this.autoUpload=x.isAutoUpload(t),this.view=e,this.onComplete=s,this._entries=Array.from(oo.filesAwaitingPreflight(t)||[]).map(n=>new Oi(t,n,e,this.autoUpload)),oo.markPreflightInProgress(this._entries),this.numEntriesInProgress=this._entries.length}isAutoUpload(){return this.autoUpload}entries(){return this._entries}initAdapterUpload(t,e,s){this._entries=this._entries.map(o=>(o.isCancelled()?(this.numEntriesInProgress--,this.numEntriesInProgress===0&&this.onComplete()):(o.zipPostFlight(t),o.onDone(()=>{this.numEntriesInProgress--,this.numEntriesInProgress===0&&this.onComplete()})),o));let n=this._entries.reduce((o,r)=>{if(!r.meta)return o;let{name:a,callback:l}=r.uploader(s.uploaders);return o[a]=o[a]||{callback:l,entries:[]},o[a].entries.push(r),o},{});for(let o in n){let{callback:r,entries:a}=n[o];r(a,e,t,s)}}},Cf={anyOf(i,t){return t.find(e=>i instanceof e)},isFocusable(i,t){return i instanceof HTMLAnchorElement&&i.rel!=="ignore"||i instanceof HTMLAreaElement&&i.href!==void 0||!i.disabled&&this.anyOf(i,[HTMLInputElement,HTMLSelectElement,HTMLTextAreaElement,HTMLButtonElement])||i instanceof HTMLIFrameElement||i.tabIndex>=0||!t&&i.getAttribute("tabindex")!==null&&i.getAttribute("aria-hidden")!=="true"},attemptFocus(i,t){if(this.isFocusable(i,t))try{i.focus()}catch{}return!!document.activeElement&&document.activeElement.isSameNode(i)},focusFirstInteractive(i){let t=i.firstElementChild;for(;t;){if(this.attemptFocus(t,!0)||this.focusFirstInteractive(t,!0))return!0;t=t.nextElementSibling}},focusFirst(i){let t=i.firstElementChild;for(;t;){if(this.attemptFocus(t)||this.focusFirst(t))return!0;t=t.nextElementSibling}},focusLast(i){let t=i.lastElementChild;for(;t;){if(this.attemptFocus(t)||this.focusLast(t))return!0;t=t.previousElementSibling}}},xt=Cf,rl={LiveFileUpload:{activeRefs(){return this.el.getAttribute(to)},preflightedRefs(){return this.el.getAttribute(ao)},mounted(){this.preflightedWas=this.preflightedRefs()},updated(){let i=this.preflightedRefs();this.preflightedWas!==i&&(this.preflightedWas=i,i===""&&this.__view().cancelSubmit(this.el.form)),this.activeRefs()===""&&(this.el.value=null),this.el.dispatchEvent(new CustomEvent(Ds))}},LiveImgPreview:{mounted(){this.ref=this.el.getAttribute("data-phx-entry-ref"),this.inputEl=document.getElementById(this.el.getAttribute(qt)),et.getEntryDataURL(this.inputEl,this.ref,i=>{this.url=i,this.el.src=i})},destroyed(){URL.revokeObjectURL(this.url)}},FocusWrap:{mounted(){this.focusStart=this.el.firstElementChild,this.focusEnd=this.el.lastElementChild,this.focusStart.addEventListener("focus",i=>{if(!i.relatedTarget||!this.el.contains(i.relatedTarget)){let t=i.target.nextElementSibling;xt.attemptFocus(t)||xt.focusFirst(t)}else xt.focusLast(this.el)}),this.focusEnd.addEventListener("focus",i=>{if(!i.relatedTarget||!this.el.contains(i.relatedTarget)){let t=i.target.previousElementSibling;xt.attemptFocus(t)||xt.focusLast(t)}else xt.focusFirst(this.el)}),this.el.addEventListener("phx:show-end",()=>this.el.focus()),window.getComputedStyle(this.el).display!=="none"&&xt.focusFirst(this.el)}}},al=i=>["HTML","BODY"].indexOf(i.nodeName.toUpperCase())>=0?null:["scroll","auto"].indexOf(getComputedStyle(i).overflowY)>=0?i:al(i.parentElement),$a=i=>i?i.scrollTop:document.documentElement.scrollTop||document.body.scrollTop,ho=i=>i?i.getBoundingClientRect().bottom:window.innerHeight||document.documentElement.clientHeight,co=i=>i?i.getBoundingClientRect().top:0,Pf=(i,t)=>{let e=i.getBoundingClientRect();return Math.ceil(e.top)>=co(t)&&Math.ceil(e.left)>=0&&Math.floor(e.top)<=ho(t)},Mf=(i,t)=>{let e=i.getBoundingClientRect();return Math.ceil(e.bottom)>=co(t)&&Math.ceil(e.left)>=0&&Math.floor(e.bottom)<=ho(t)},Wa=(i,t)=>{let e=i.getBoundingClientRect();return Math.ceil(e.top)>=co(t)&&Math.ceil(e.left)>=0&&Math.floor(e.top)<=ho(t)};rl.InfiniteScroll={mounted(){this.scrollContainer=al(this.el);let i=$a(this.scrollContainer),t=!1,e=500,s=null,n=this.throttle(e,(a,l)=>{s=()=>!0,this.liveSocket.execJSHookPush(this.el,a,{id:l.id,_overran:!0},()=>{s=null})}),o=this.throttle(e,(a,l)=>{s=()=>l.scrollIntoView({block:"start"}),this.liveSocket.execJSHookPush(this.el,a,{id:l.id},()=>{s=null,window.requestAnimationFrame(()=>{Wa(l,this.scrollContainer)||l.scrollIntoView({block:"start"})})})}),r=this.throttle(e,(a,l)=>{s=()=>l.scrollIntoView({block:"end"}),this.liveSocket.execJSHookPush(this.el,a,{id:l.id},()=>{s=null,window.requestAnimationFrame(()=>{Wa(l,this.scrollContainer)||l.scrollIntoView({block:"end"})})})});this.onScroll=a=>{let l=$a(this.scrollContainer);if(s)return i=l,s();let h=this.el.getBoundingClientRect(),c=this.el.getAttribute(this.liveSocket.binding("viewport-top")),d=this.el.getAttribute(this.liveSocket.binding("viewport-bottom")),u=this.el.lastElementChild,g=this.el.firstElementChild,f=l<i,p=l>i;f&&c&&!t&&h.top>=0?(t=!0,n(c,g)):p&&t&&h.top<=0&&(t=!1),c&&f&&Pf(g,this.scrollContainer)?o(c,g):d&&p&&Mf(u,this.scrollContainer)&&r(d,u),i=l},this.scrollContainer?this.scrollContainer.addEventListener("scroll",this.onScroll):window.addEventListener("scroll",this.onScroll)},destroyed(){this.scrollContainer?this.scrollContainer.removeEventListener("scroll",this.onScroll):window.removeEventListener("scroll",this.onScroll)},throttle(i,t){let e=0,s;return(...n)=>{let o=Date.now(),r=i-(o-e);r<=0||r>i?(s&&(clearTimeout(s),s=null),e=o,t(...n)):s||(s=setTimeout(()=>{e=Date.now(),s=null,t(...n)},r))}}};var Tf=rl,ro=class{static onUnlock(i,t){if(!x.isLocked(i)&&!i.closest(`[${Q}]`))return t();let e=i.closest(`[${Q}]`),s=e.closest(`[${Q}]`).getAttribute(Q);e.addEventListener(`phx:undo-lock:${s}`,()=>{t()},{once:!0})}constructor(i){this.el=i,this.loadingRef=i.hasAttribute(Ge)?parseInt(i.getAttribute(Ge),10):null,this.lockRef=i.hasAttribute(Q)?parseInt(i.getAttribute(Q),10):null}maybeUndo(i,t,e){this.isWithin(i)&&(this.undoLocks(i,t,e),this.undoLoading(i,t),this.isFullyResolvedBy(i)&&this.el.removeAttribute(kt))}isWithin(i){return!(this.loadingRef!==null&&this.loadingRef>i&&this.lockRef!==null&&this.lockRef>i)}undoLocks(i,t,e){if(!this.isLockUndoneBy(i))return;let s=x.private(this.el,Q);s&&(e(s),x.deletePrivate(this.el,Q)),this.el.removeAttribute(Q);let n={detail:{ref:i,event:t},bubbles:!0,cancelable:!1};this.el.dispatchEvent(new CustomEvent(`phx:undo-lock:${this.lockRef}`,n))}undoLoading(i,t){if(!this.isLoadingUndoneBy(i)){this.canUndoLoading(i)&&this.el.classList.contains("phx-submit-loading")&&this.el.classList.remove("phx-change-loading");return}if(this.canUndoLoading(i)){this.el.removeAttribute(Ge);let e=this.el.getAttribute(Ke),s=this.el.getAttribute(no);s!==null&&(this.el.readOnly=s==="true",this.el.removeAttribute(no)),e!==null&&(this.el.disabled=e==="true",this.el.removeAttribute(Ke));let n=this.el.getAttribute(Is);n!==null&&(this.el.innerText=n,this.el.removeAttribute(Is));let o={detail:{ref:i,event:t},bubbles:!0,cancelable:!1};this.el.dispatchEvent(new CustomEvent(`phx:undo-loading:${this.loadingRef}`,o))}el.forEach(e=>{(e!=="phx-submit-loading"||this.canUndoLoading(i))&&x.removeClass(this.el,e)})}isLoadingUndoneBy(i){return this.loadingRef===null?!1:this.loadingRef<=i}isLockUndoneBy(i){return this.lockRef===null?!1:this.lockRef<=i}isFullyResolvedBy(i){return(this.loadingRef===null||this.loadingRef<=i)&&(this.lockRef===null||this.lockRef<=i)}canUndoLoading(i){return this.lockRef===null||this.lockRef<=i}},Ef=class{constructor(i,t,e){let s=new Set,n=new Set([...t.children].map(r=>r.id)),o=[];Array.from(i.children).forEach(r=>{if(r.id&&(s.add(r.id),n.has(r.id))){let a=r.previousElementSibling&&r.previousElementSibling.id;o.push({elementId:r.id,previousElementId:a})}}),this.containerId=t.id,this.updateType=e,this.elementsToModify=o,this.elementIdsToAdd=[...n].filter(r=>!s.has(r))}perform(){let i=x.byId(this.containerId);this.elementsToModify.forEach(t=>{t.previousElementId?ae(document.getElementById(t.previousElementId),e=>{ae(document.getElementById(t.elementId),s=>{s.previousElementSibling&&s.previousElementSibling.id==e.id||e.insertAdjacentElement("afterend",s)})}):ae(document.getElementById(t.elementId),e=>{e.previousElementSibling==null||i.insertAdjacentElement("afterbegin",e)})}),this.updateType=="prepend"&&this.elementIdsToAdd.reverse().forEach(t=>{ae(document.getElementById(t),e=>i.insertAdjacentElement("afterbegin",e))})}},Ua=11;function Rf(i,t){var e=t.attributes,s,n,o,r,a;if(!(t.nodeType===Ua||i.nodeType===Ua)){for(var l=e.length-1;l>=0;l--)s=e[l],n=s.name,o=s.namespaceURI,r=s.value,o?(n=s.localName||n,a=i.getAttributeNS(o,n),a!==r&&(s.prefix==="xmlns"&&(n=s.name),i.setAttributeNS(o,n,r))):(a=i.getAttribute(n),a!==r&&i.setAttribute(n,r));for(var h=i.attributes,c=h.length-1;c>=0;c--)s=h[c],n=s.name,o=s.namespaceURI,o?(n=s.localName||n,t.hasAttributeNS(o,n)||i.removeAttributeNS(o,n)):t.hasAttribute(n)||i.removeAttribute(n)}}var Ms,Df="http://www.w3.org/1999/xhtml",pt=typeof document>"u"?void 0:document,Of=!!pt&&"content"in pt.createElement("template"),Lf=!!pt&&pt.createRange&&"createContextualFragment"in pt.createRange();function If(i){var t=pt.createElement("template");return t.innerHTML=i,t.content.childNodes[0]}function Ff(i){Ms||(Ms=pt.createRange(),Ms.selectNode(pt.body));var t=Ms.createContextualFragment(i);return t.childNodes[0]}function Hf(i){var t=pt.createElement("body");return t.innerHTML=i,t.childNodes[0]}function Nf(i){return i=i.trim(),Of?If(i):Lf?Ff(i):Hf(i)}function Ts(i,t){var e=i.nodeName,s=t.nodeName,n,o;return e===s?!0:(n=e.charCodeAt(0),o=s.charCodeAt(0),n<=90&&o>=97?e===s.toUpperCase():o<=90&&n>=97?s===e.toUpperCase():!1)}function Bf(i,t){return!t||t===Df?pt.createElement(i):pt.createElementNS(t,i)}function zf(i,t){for(var e=i.firstChild;e;){var s=e.nextSibling;t.appendChild(e),e=s}return t}function Zn(i,t,e){i[e]!==t[e]&&(i[e]=t[e],i[e]?i.setAttribute(e,""):i.removeAttribute(e))}var Xa={OPTION:function(i,t){var e=i.parentNode;if(e){var s=e.nodeName.toUpperCase();s==="OPTGROUP"&&(e=e.parentNode,s=e&&e.nodeName.toUpperCase()),s==="SELECT"&&!e.hasAttribute("multiple")&&(i.hasAttribute("selected")&&!t.selected&&(i.setAttribute("selected","selected"),i.removeAttribute("selected")),e.selectedIndex=-1)}Zn(i,t,"selected")},INPUT:function(i,t){Zn(i,t,"checked"),Zn(i,t,"disabled"),i.value!==t.value&&(i.value=t.value),t.hasAttribute("value")||i.removeAttribute("value")},TEXTAREA:function(i,t){var e=t.value;i.value!==e&&(i.value=e);var s=i.firstChild;if(s){var n=s.nodeValue;if(n==e||!e&&n==i.placeholder)return;s.nodeValue=e}},SELECT:function(i,t){if(!t.hasAttribute("multiple")){for(var e=-1,s=0,n=i.firstChild,o,r;n;)if(r=n.nodeName&&n.nodeName.toUpperCase(),r==="OPTGROUP")o=n,n=o.firstChild;else{if(r==="OPTION"){if(n.hasAttribute("selected")){e=s;break}s++}n=n.nextSibling,!n&&o&&(n=o.nextSibling,o=null)}i.selectedIndex=e}}},Li=1,Ya=11,Ja=3,qa=8;function re(){}function jf(i){if(i)return i.getAttribute&&i.getAttribute("id")||i.id}function Vf(i){return function(e,s,n){if(n||(n={}),typeof s=="string")if(e.nodeName==="#document"||e.nodeName==="HTML"||e.nodeName==="BODY"){var o=s;s=pt.createElement("html"),s.innerHTML=o}else s=Nf(s);else s.nodeType===Ya&&(s=s.firstElementChild);var r=n.getNodeKey||jf,a=n.onBeforeNodeAdded||re,l=n.onNodeAdded||re,h=n.onBeforeElUpdated||re,c=n.onElUpdated||re,d=n.onBeforeNodeDiscarded||re,u=n.onNodeDiscarded||re,g=n.onBeforeElChildrenUpdated||re,f=n.skipFromChildren||re,p=n.addChild||function(M,R){return M.appendChild(R)},m=n.childrenOnly===!0,v=Object.create(null),_=[];function k(M){_.push(M)}function S(M,R){if(M.nodeType===Li)for(var I=M.firstChild;I;){var L=void 0;R&&(L=r(I))?k(L):(u(I),I.firstChild&&S(I,R)),I=I.nextSibling}}function y(M,R,I){d(M)!==!1&&(R&&R.removeChild(M),u(M),S(M,I))}function b(M){if(M.nodeType===Li||M.nodeType===Ya)for(var R=M.firstChild;R;){var I=r(R);I&&(v[I]=R),b(R),R=R.nextSibling}}b(e);function w(M){l(M);for(var R=M.firstChild;R;){var I=R.nextSibling,L=r(R);if(L){var N=v[L];N&&Ts(R,N)?(R.parentNode.replaceChild(N,R),P(N,R)):w(R)}else w(R);R=I}}function A(M,R,I){for(;R;){var L=R.nextSibling;(I=r(R))?k(I):y(R,M,!0),R=L}}function P(M,R,I){var L=r(R);if(L&&delete v[L],!I){var N=h(M,R);if(N===!1||(N instanceof HTMLElement&&(M=N,b(M)),i(M,R),c(M),g(M,R)===!1))return}M.nodeName!=="TEXTAREA"?E(M,R):Xa.TEXTAREA(M,R)}function E(M,R){var I=f(M,R),L=R.firstChild,N=M.firstChild,mt,at,ht,Ct,ot;t:for(;L;){for(Ct=L.nextSibling,mt=r(L);!I&&N;){if(ht=N.nextSibling,L.isSameNode&&L.isSameNode(N)){L=Ct,N=ht;continue t}at=r(N);var Ni=N.nodeType,Kt=void 0;if(Ni===L.nodeType&&(Ni===Li?(mt?mt!==at&&((ot=v[mt])?ht===ot?Kt=!1:(M.insertBefore(ot,N),at?k(at):y(N,M,!0),N=ot,at=r(N)):Kt=!1):at&&(Kt=!1),Kt=Kt!==!1&&Ts(N,L),Kt&&P(N,L)):(Ni===Ja||Ni==qa)&&(Kt=!0,N.nodeValue!==L.nodeValue&&(N.nodeValue=L.nodeValue))),Kt){L=Ct,N=ht;continue t}at?k(at):y(N,M,!0),N=ht}if(mt&&(ot=v[mt])&&Ts(ot,L))I||p(M,ot),P(ot,L);else{var Hs=a(L);Hs!==!1&&(Hs&&(L=Hs),L.actualize&&(L=L.actualize(M.ownerDocument||pt)),p(M,L),w(L))}L=Ct,N=ht}A(M,N,at);var uo=Xa[M.nodeName];uo&&uo(M,R)}var T=e,D=T.nodeType,G=s.nodeType;if(!m){if(D===Li)G===Li?Ts(e,s)||(u(e),T=zf(e,Bf(s.nodeName,s.namespaceURI))):T=s;else if(D===Ja||D===qa){if(G===D)return T.nodeValue!==s.nodeValue&&(T.nodeValue=s.nodeValue),T;T=s}}if(T===s)u(e);else{if(s.isSameNode&&s.isSameNode(T))return;if(P(T,s,m),_)for(var it=0,B=_.length;it<B;it++){var j=v[_[it]];j&&y(j,j.parentNode,!1)}}return!m&&T!==e&&e.parentNode&&(T.actualize&&(T=T.actualize(e.ownerDocument||pt)),e.parentNode.replaceChild(T,e)),T}}var $f=Vf(Rf),Wf=$f,Es=class{constructor(i,t,e,s,n,o,r={}){this.view=i,this.liveSocket=i.liveSocket,this.container=t,this.id=e,this.rootID=i.root.id,this.html=s,this.streams=n,this.streamInserts={},this.streamComponentRestore={},this.targetCID=o,this.cidPatch=Yt(this.targetCID),this.pendingRemoves=[],this.phxRemove=this.liveSocket.binding("remove"),this.targetContainer=this.isCIDPatch()?this.targetCIDContainer(s):t,this.callbacks={beforeadded:[],beforeupdated:[],beforephxChildAdded:[],afteradded:[],afterupdated:[],afterdiscarded:[],afterphxChildAdded:[],aftertransitionsDiscarded:[]},this.withChildren=r.withChildren||r.undoRef||!1,this.undoRef=r.undoRef}before(i,t){this.callbacks[`before${i}`].push(t)}after(i,t){this.callbacks[`after${i}`].push(t)}trackBefore(i,...t){this.callbacks[`before${i}`].forEach(e=>e(...t))}trackAfter(i,...t){this.callbacks[`after${i}`].forEach(e=>e(...t))}markPrunableContentForRemoval(){let i=this.liveSocket.binding(Fs);x.all(this.container,`[${i}=append] > *, [${i}=prepend] > *`,t=>{t.setAttribute(Ma,"")})}perform(i){let{view:t,liveSocket:e,html:s,container:n,targetContainer:o}=this;if(this.isCIDPatch()&&!o)return;let r=e.getActiveElement(),{selectionStart:a,selectionEnd:l}=r&&x.hasSelectionRange(r)?r:{},h=e.binding(Fs),c=e.binding(eo),d=e.binding(io),u=e.binding(of),g=[],f=[],p=[],m=null;function v(_,k,S=this.withChildren){let y={childrenOnly:_.getAttribute(Jt)===null&&!S,getNodeKey:b=>x.isPhxDestroyed(b)?null:i?b.id:b.id||b.getAttribute&&b.getAttribute(nl),skipFromChildren:b=>b.getAttribute(h)===Jn,addChild:(b,w)=>{let{ref:A,streamAt:P}=this.getStreamInsert(w);if(A===void 0)return b.appendChild(w);if(this.setStreamRef(w,A),P===0)b.insertAdjacentElement("afterbegin",w);else if(P===-1){let E=b.lastElementChild;if(E&&!E.hasAttribute(Ti)){let T=Array.from(b.children).find(D=>!D.hasAttribute(Ti));b.insertBefore(w,T)}else b.appendChild(w)}else if(P>0){let E=Array.from(b.children)[P];b.insertBefore(w,E)}},onBeforeNodeAdded:b=>{x.maintainPrivateHooks(b,b,c,d),this.trackBefore("added",b);let w=b;return this.streamComponentRestore[b.id]&&(w=this.streamComponentRestore[b.id],delete this.streamComponentRestore[b.id],v.call(this,w,b,!0)),w},onNodeAdded:b=>{b.getAttribute&&this.maybeReOrderStream(b,!0),b instanceof HTMLImageElement&&b.srcset?b.srcset=b.srcset:b instanceof HTMLVideoElement&&b.autoplay&&b.play(),x.isNowTriggerFormExternal(b,u)&&(m=b),(x.isPhxChild(b)&&t.ownsElement(b)||x.isPhxSticky(b)&&t.ownsElement(b.parentNode))&&this.trackAfter("phxChildAdded",b),g.push(b)},onNodeDiscarded:b=>this.onNodeDiscarded(b),onBeforeNodeDiscarded:b=>b.getAttribute&&b.getAttribute(Ma)!==null?!0:!(b.parentElement!==null&&b.id&&x.isPhxUpdate(b.parentElement,h,[Jn,"append","prepend"])||this.maybePendingRemove(b)||this.skipCIDSibling(b)),onElUpdated:b=>{x.isNowTriggerFormExternal(b,u)&&(m=b),f.push(b),this.maybeReOrderStream(b,!1)},onBeforeElUpdated:(b,w)=>{if(b.id&&b.isSameNode(_)&&b.id!==w.id)return y.onNodeDiscarded(b),b.replaceWith(w),y.onNodeAdded(w);if(x.syncPendingAttrs(b,w),x.maintainPrivateHooks(b,w,c,d),x.cleanChildNodes(w,h),this.skipCIDSibling(w))return this.maybeReOrderStream(b),!1;if(x.isPhxSticky(b))return[Ht,Se,le].map(E=>[E,b.getAttribute(E),w.getAttribute(E)]).forEach(([E,T,D])=>{D&&T!==D&&b.setAttribute(E,D)}),!1;if(x.isIgnored(b,h)||b.form&&b.form.isSameNode(m))return this.trackBefore("updated",b,w),x.mergeAttrs(b,w,{isIgnored:x.isIgnored(b,h)}),f.push(b),x.applyStickyOperations(b),!1;if(b.type==="number"&&b.validity&&b.validity.badInput)return!1;let A=r&&b.isSameNode(r)&&x.isFormInput(b),P=A&&this.isChangedSelect(b,w);if(b.hasAttribute(kt)){let E=new ro(b);if(E.lockRef&&(!this.undoRef||!E.isLockUndoneBy(this.undoRef))){x.isUploadInput(b)&&(x.mergeAttrs(b,w,{isIgnored:!0}),this.trackBefore("updated",b,w),f.push(b)),x.applyStickyOperations(b);let D=b.hasAttribute(Q)?x.private(b,Q)||b.cloneNode(!0):null;D&&(x.putPrivate(b,Q,D),A||(b=D))}}if(x.isPhxChild(w)){let E=b.getAttribute(Ht);return x.mergeAttrs(b,w,{exclude:[Se]}),E!==""&&b.setAttribute(Ht,E),b.setAttribute(le,this.rootID),x.applyStickyOperations(b),!1}return this.undoRef&&x.private(w,Q)&&x.putPrivate(b,Q,x.private(w,Q)),x.copyPrivates(w,b),A&&b.type!=="hidden"&&!P?(this.trackBefore("updated",b,w),x.mergeFocusedInput(b,w),x.syncAttrsToProps(b),f.push(b),x.applyStickyOperations(b),!1):(P&&b.blur(),x.isPhxUpdate(w,h,["append","prepend"])&&p.push(new Ef(b,w,w.getAttribute(h))),x.syncAttrsToProps(w),x.applyStickyOperations(w),this.trackBefore("updated",b,w),b)}};Wf(_,k,y)}return this.trackBefore("added",n),this.trackBefore("updated",n,n),e.time("morphdom",()=>{this.streams.forEach(([_,k,S,y])=>{k.forEach(([b,w,A])=>{this.streamInserts[b]={ref:_,streamAt:w,limit:A,reset:y}}),y!==void 0&&x.all(n,`[${Ti}="${_}"]`,b=>{this.removeStreamChildElement(b)}),S.forEach(b=>{let w=n.querySelector(`[id="${b}"]`);w&&this.removeStreamChildElement(w)})}),i&&x.all(this.container,`[${h}=${Jn}]`).filter(_=>this.view.ownsElement(_)).forEach(_=>{Array.from(_.children).forEach(k=>{this.removeStreamChildElement(k,!0)})}),v.call(this,o,s)}),e.isDebugEnabled()&&(_f(),xf(this.streamInserts),Array.from(document.querySelectorAll("input[name=id]")).forEach(_=>{_.form&&console.error(`Detected an input with name="id" inside a form! This will cause problems when patching the DOM.
`,_)})),p.length>0&&e.time("post-morph append/prepend restoration",()=>{p.forEach(_=>_.perform())}),e.silenceEvents(()=>x.restoreFocus(r,a,l)),x.dispatchEvent(document,"phx:update"),g.forEach(_=>this.trackAfter("added",_)),f.forEach(_=>this.trackAfter("updated",_)),this.transitionPendingRemoves(),m&&(e.unload(),Object.getPrototypeOf(m).submit.call(m)),!0}onNodeDiscarded(i){(x.isPhxChild(i)||x.isPhxSticky(i))&&this.liveSocket.destroyViewByEl(i),this.trackAfter("discarded",i)}maybePendingRemove(i){return i.getAttribute&&i.getAttribute(this.phxRemove)!==null?(this.pendingRemoves.push(i),!0):!1}removeStreamChildElement(i,t=!1){!t&&!this.view.ownsElement(i)||(this.streamInserts[i.id]?(this.streamComponentRestore[i.id]=i,i.remove()):this.maybePendingRemove(i)||(i.remove(),this.onNodeDiscarded(i)))}getStreamInsert(i){return(i.id?this.streamInserts[i.id]:{})||{}}setStreamRef(i,t){x.putSticky(i,Ti,e=>e.setAttribute(Ti,t))}maybeReOrderStream(i,t){let{ref:e,streamAt:s,reset:n}=this.getStreamInsert(i);if(s!==void 0&&(this.setStreamRef(i,e),!(!n&&!t)&&i.parentElement)){if(s===0)i.parentElement.insertBefore(i,i.parentElement.firstElementChild);else if(s>0){let o=Array.from(i.parentElement.children),r=o.indexOf(i);if(s>=o.length-1)i.parentElement.appendChild(i);else{let a=o[s];r>s?i.parentElement.insertBefore(i,a):i.parentElement.insertBefore(i,a.nextElementSibling)}}this.maybeLimitStream(i)}}maybeLimitStream(i){let{limit:t}=this.getStreamInsert(i),e=t!==null&&Array.from(i.parentElement.children);t&&t<0&&e.length>t*-1?e.slice(0,e.length+t).forEach(s=>this.removeStreamChildElement(s)):t&&t>=0&&e.length>t&&e.slice(t).forEach(s=>this.removeStreamChildElement(s))}transitionPendingRemoves(){let{pendingRemoves:i,liveSocket:t}=this;i.length>0&&t.transitionRemoves(i,()=>{i.forEach(e=>{let s=x.firstPhxChild(e);s&&t.destroyViewByEl(s),e.remove()}),this.trackAfter("transitionsDiscarded",i)})}isChangedSelect(i,t){return!(i instanceof HTMLSelectElement)||i.multiple?!1:i.options.length!==t.options.length?!0:(t.value=i.value,!i.isEqualNode(t))}isCIDPatch(){return this.cidPatch}skipCIDSibling(i){return i.nodeType===Node.ELEMENT_NODE&&i.hasAttribute(sl)}targetCIDContainer(i){if(!this.isCIDPatch())return;let[t,...e]=x.findComponentNodeList(this.container,this.targetCID);return e.length===0&&x.childNodeLength(i)===1?t:t&&t.parentNode}indexOf(i,t){return Array.from(i.children).indexOf(t)}},Uf=new Set(["area","base","br","col","command","embed","hr","img","input","keygen","link","meta","param","source","track","wbr"]),Xf=new Set(["'",'"']),Ka=(i,t,e)=>{let s=0,n=!1,o,r,a,l,h,c,d=i.match(/^(\s*(?:<!--.*?-->\s*)*)<([^\s\/>]+)/);if(d===null)throw new Error(`malformed html ${i}`);for(s=d[0].length,o=d[1],a=d[2],l=s,s;s<i.length&&i.charAt(s)!==">";s++)if(i.charAt(s)==="="){let f=i.slice(s-3,s)===" id";s++;let p=i.charAt(s);if(Xf.has(p)){let m=s;for(s++,s;s<i.length&&i.charAt(s)!==p;s++);if(f){h=i.slice(m+1,s);break}}}let u=i.length-1;for(n=!1;u>=o.length+a.length;){let f=i.charAt(u);if(n)f==="-"&&i.slice(u-3,u)==="<!-"?(n=!1,u-=4):u-=1;else if(f===">"&&i.slice(u-2,u)==="--")n=!0,u-=3;else{if(f===">")break;u-=1}}r=i.slice(u+1,i.length);let g=Object.keys(t).map(f=>t[f]===!0?f:`${f}="${t[f]}"`).join(" ");if(e){let f=h?` id="${h}"`:"";Uf.has(a)?c=`<${a}${f}${g===""?"":" "}${g}/>`:c=`<${a}${f}${g===""?"":" "}${g}></${a}>`}else{let f=i.slice(l,u+1);c=`<${a}${g===""?"":" "}${g}${f}`}return[c,o,r]},Ga=class{static extract(i){let{[Ba]:t,[Na]:e,[za]:s}=i;return delete i[Ba],delete i[Na],delete i[za],{diff:i,title:s,reply:t||null,events:e||[]}}constructor(i,t){this.viewId=i,this.rendered={},this.magicId=0,this.mergeDiff(t)}parentViewId(){return this.viewId}toString(i){let[t,e]=this.recursiveToString(this.rendered,this.rendered[lt],i,!0,{});return[t,e]}recursiveToString(i,t=i[lt],e,s,n){e=e?new Set(e):null;let o={buffer:"",components:t,onlyCids:e,streams:new Set};return this.toOutputBuffer(i,null,o,s,n),[o.buffer,o.streams]}componentCIDs(i){return Object.keys(i[lt]||{}).map(t=>parseInt(t))}isComponentOnlyDiff(i){return i[lt]?Object.keys(i).length===1:!1}getComponent(i,t){return i[lt][t]}resetRender(i){this.rendered[lt][i]&&(this.rendered[lt][i].reset=!0)}mergeDiff(i){let t=i[lt],e={};if(delete i[lt],this.rendered=this.mutableMerge(this.rendered,i),this.rendered[lt]=this.rendered[lt]||{},t){let s=this.rendered[lt];for(let n in t)t[n]=this.cachedFindComponent(n,t[n],s,t,e);for(let n in t)s[n]=t[n];i[lt]=t}}cachedFindComponent(i,t,e,s,n){if(n[i])return n[i];{let o,r,a=t[Ft];if(Yt(a)){let l;a>0?l=this.cachedFindComponent(a,s[a],e,s,n):l=e[-a],r=l[Ft],o=this.cloneMerge(l,t,!0),o[Ft]=r}else o=t[Ft]!==void 0||e[i]===void 0?t:this.cloneMerge(e[i],t,!1);return n[i]=o,o}}mutableMerge(i,t){return t[Ft]!==void 0?t:(this.doMutableMerge(i,t),i)}doMutableMerge(i,t){for(let e in t){let s=t[e],n=i[e];qe(s)&&s[Ft]===void 0&&qe(n)?this.doMutableMerge(n,s):i[e]=s}i[Gn]&&(i.newRender=!0)}cloneMerge(i,t,e){let s={...i,...t};for(let n in s){let o=t[n],r=i[n];qe(o)&&o[Ft]===void 0&&qe(r)?s[n]=this.cloneMerge(r,o,e):o===void 0&&qe(r)&&(s[n]=this.cloneMerge(r,{},e))}return e?(delete s.magicId,delete s.newRender):i[Gn]&&(s.newRender=!0),s}componentToString(i){let[t,e]=this.recursiveCIDToString(this.rendered[lt],i,null),[s,n,o]=Ka(t,{});return[s,e]}pruneCIDs(i){i.forEach(t=>delete this.rendered[lt][t])}get(){return this.rendered}isNewFingerprint(i={}){return!!i[Ft]}templateStatic(i,t){return typeof i=="number"?t[i]:i}nextMagicID(){return this.magicId++,`m${this.magicId}-${this.parentViewId()}`}toOutputBuffer(i,t,e,s,n={}){if(i[Ps])return this.comprehensionToBuffer(i,t,e);let{[Ft]:o}=i;o=this.templateStatic(o,t);let r=i[Gn],a=e.buffer;r&&(e.buffer=""),s&&r&&!i.magicId&&(i.newRender=!0,i.magicId=this.nextMagicID()),e.buffer+=o[0];for(let l=1;l<o.length;l++)this.dynamicToBuffer(i[l-1],t,e,s),e.buffer+=o[l];if(r){let l=!1,h;s||i.magicId?(l=s&&!i.newRender,h={[nl]:i.magicId,...n}):h=n,l&&(h[sl]=!0);let[c,d,u]=Ka(e.buffer,h,l);i.newRender=!1,e.buffer=a+d+c+u}}comprehensionToBuffer(i,t,e){let{[Ps]:s,[Ft]:n,[ja]:o}=i,[r,a,l,h]=o||[null,{},[],null];n=this.templateStatic(n,t);let c=t||i[bf];for(let d=0;d<s.length;d++){let u=s[d];e.buffer+=n[0];for(let g=1;g<n.length;g++){let f=!1;this.dynamicToBuffer(u[g-1],c,e,f),e.buffer+=n[g]}}o!==void 0&&(i[Ps].length>0||l.length>0||h)&&(delete i[ja],i[Ps]=[],e.streams.add(o))}dynamicToBuffer(i,t,e,s){if(typeof i=="number"){let[n,o]=this.recursiveCIDToString(e.components,i,e.onlyCids);e.buffer+=n,e.streams=new Set([...e.streams,...o])}else qe(i)?this.toOutputBuffer(i,t,e,s,{}):e.buffer+=i}recursiveCIDToString(i,t,e){let s=i[t]||K(`no component for CID ${t}`,i),n={[Jt]:t},o=e&&!e.has(t);s.newRender=!o,s.magicId=`c${t}-${this.parentViewId()}`;let r=!s.reset,[a,l]=this.recursiveToString(s,i,e,r,n);return delete s.reset,[a,l]}},Za=[],Qa=200,Yf={exec(i,t,e,s,n,o){let[r,a]=o||[null,{callback:o&&o.callback}];(e.charAt(0)==="["?JSON.parse(e):[[r,a]]).forEach(([h,c])=>{h===r&&(c={...a,...c},c.callback=c.callback||a.callback),this.filterToEls(s.liveSocket,n,c).forEach(d=>{this[`exec_${h}`](i,t,e,s,n,d,c)})})},isVisible(i){return!!(i.offsetWidth||i.offsetHeight||i.getClientRects().length>0)},isInViewport(i){let t=i.getBoundingClientRect(),e=window.innerHeight||document.documentElement.clientHeight,s=window.innerWidth||document.documentElement.clientWidth;return t.right>0&&t.bottom>0&&t.left<s&&t.top<e},exec_exec(i,t,e,s,n,o,{attr:r,to:a}){let l=o.getAttribute(r);if(!l)throw new Error(`expected ${r} to contain JS command on "${a}"`);s.liveSocket.execJS(o,l,t)},exec_dispatch(i,t,e,s,n,o,{event:r,detail:a,bubbles:l}){a=a||{},a.dispatcher=n,x.dispatchEvent(o,r,{detail:a,bubbles:l})},exec_push(i,t,e,s,n,o,r){let{event:a,data:l,target:h,page_loading:c,loading:d,value:u,dispatcher:g,callback:f}=r,p={loading:d,value:u,target:h,page_loading:!!c},m=t==="change"&&g?g:n,v=h||m.getAttribute(s.binding("target"))||m,_=(k,S)=>{if(k.isConnected())if(t==="change"){let{newCid:y,_target:b}=r;b=b||(x.isFormInput(n)?n.name:void 0),b&&(p._target=b),k.pushInput(n,S,y,a||e,p,f)}else if(t==="submit"){let{submitter:y}=r;k.submitForm(n,S,a||e,y,p,f)}else k.pushEvent(t,n,S,a||e,l,p,f)};r.targetView&&r.targetCtx?_(r.targetView,r.targetCtx):s.withinTargets(v,_)},exec_navigate(i,t,e,s,n,o,{href:r,replace:a}){s.liveSocket.historyRedirect(i,r,a?"replace":"push",null,n)},exec_patch(i,t,e,s,n,o,{href:r,replace:a}){s.liveSocket.pushHistoryPatch(i,r,a?"replace":"push",n)},exec_focus(i,t,e,s,n,o){xt.attemptFocus(o),window.requestAnimationFrame(()=>{window.requestAnimationFrame(()=>xt.attemptFocus(o))})},exec_focus_first(i,t,e,s,n,o){xt.focusFirstInteractive(o)||xt.focusFirst(o),window.requestAnimationFrame(()=>{window.requestAnimationFrame(()=>xt.focusFirstInteractive(o)||xt.focusFirst(o))})},exec_push_focus(i,t,e,s,n,o){Za.push(o||n)},exec_pop_focus(i,t,e,s,n,o){let r=Za.pop();r&&(r.focus(),window.requestAnimationFrame(()=>{window.requestAnimationFrame(()=>r.focus())}))},exec_add_class(i,t,e,s,n,o,{names:r,transition:a,time:l,blocking:h}){this.addOrRemoveClasses(o,r,[],a,l,s,h)},exec_remove_class(i,t,e,s,n,o,{names:r,transition:a,time:l,blocking:h}){this.addOrRemoveClasses(o,[],r,a,l,s,h)},exec_toggle_class(i,t,e,s,n,o,{names:r,transition:a,time:l,blocking:h}){this.toggleClasses(o,r,a,l,s,h)},exec_toggle_attr(i,t,e,s,n,o,{attr:[r,a,l]}){this.toggleAttr(o,r,a,l)},exec_transition(i,t,e,s,n,o,{time:r,transition:a,blocking:l}){this.addOrRemoveClasses(o,[],[],a,r,s,l)},exec_toggle(i,t,e,s,n,o,{display:r,ins:a,outs:l,time:h,blocking:c}){this.toggle(t,s,o,r,a,l,h,c)},exec_show(i,t,e,s,n,o,{display:r,transition:a,time:l,blocking:h}){this.show(t,s,o,r,a,l,h)},exec_hide(i,t,e,s,n,o,{display:r,transition:a,time:l,blocking:h}){this.hide(t,s,o,r,a,l,h)},exec_set_attr(i,t,e,s,n,o,{attr:[r,a]}){this.setOrRemoveAttrs(o,[[r,a]],[])},exec_remove_attr(i,t,e,s,n,o,{attr:r}){this.setOrRemoveAttrs(o,[],[r])},show(i,t,e,s,n,o,r){this.isVisible(e)||this.toggle(i,t,e,s,n,null,o,r)},hide(i,t,e,s,n,o,r){this.isVisible(e)&&this.toggle(i,t,e,s,null,n,o,r)},toggle(i,t,e,s,n,o,r,a){r=r||Qa;let[l,h,c]=n||[[],[],[]],[d,u,g]=o||[[],[],[]];if(l.length>0||d.length>0)if(this.isVisible(e)){let f=()=>{this.addOrRemoveClasses(e,u,l.concat(h).concat(c)),window.requestAnimationFrame(()=>{this.addOrRemoveClasses(e,d,[]),window.requestAnimationFrame(()=>this.addOrRemoveClasses(e,g,u))})},p=()=>{this.addOrRemoveClasses(e,[],d.concat(g)),x.putSticky(e,"toggle",m=>m.style.display="none"),e.dispatchEvent(new Event("phx:hide-end"))};e.dispatchEvent(new Event("phx:hide-start")),a===!1?(f(),setTimeout(p,r)):t.transition(r,f,p)}else{if(i==="remove")return;let f=()=>{this.addOrRemoveClasses(e,h,d.concat(u).concat(g));let m=s||this.defaultDisplay(e);window.requestAnimationFrame(()=>{this.addOrRemoveClasses(e,l,[]),window.requestAnimationFrame(()=>{x.putSticky(e,"toggle",v=>v.style.display=m),this.addOrRemoveClasses(e,c,h)})})},p=()=>{this.addOrRemoveClasses(e,[],l.concat(c)),e.dispatchEvent(new Event("phx:show-end"))};e.dispatchEvent(new Event("phx:show-start")),a===!1?(f(),setTimeout(p,r)):t.transition(r,f,p)}else this.isVisible(e)?window.requestAnimationFrame(()=>{e.dispatchEvent(new Event("phx:hide-start")),x.putSticky(e,"toggle",f=>f.style.display="none"),e.dispatchEvent(new Event("phx:hide-end"))}):window.requestAnimationFrame(()=>{e.dispatchEvent(new Event("phx:show-start"));let f=s||this.defaultDisplay(e);x.putSticky(e,"toggle",p=>p.style.display=f),e.dispatchEvent(new Event("phx:show-end"))})},toggleClasses(i,t,e,s,n,o){window.requestAnimationFrame(()=>{let[r,a]=x.getSticky(i,"classes",[[],[]]),l=t.filter(c=>r.indexOf(c)<0&&!i.classList.contains(c)),h=t.filter(c=>a.indexOf(c)<0&&i.classList.contains(c));this.addOrRemoveClasses(i,l,h,e,s,n,o)})},toggleAttr(i,t,e,s){i.hasAttribute(t)?s!==void 0?i.getAttribute(t)===e?this.setOrRemoveAttrs(i,[[t,s]],[]):this.setOrRemoveAttrs(i,[[t,e]],[]):this.setOrRemoveAttrs(i,[],[t]):this.setOrRemoveAttrs(i,[[t,e]],[])},addOrRemoveClasses(i,t,e,s,n,o,r){n=n||Qa;let[a,l,h]=s||[[],[],[]];if(a.length>0){let c=()=>{this.addOrRemoveClasses(i,l,[].concat(a).concat(h)),window.requestAnimationFrame(()=>{this.addOrRemoveClasses(i,a,[]),window.requestAnimationFrame(()=>this.addOrRemoveClasses(i,h,l))})},d=()=>this.addOrRemoveClasses(i,t.concat(h),e.concat(a).concat(l));r===!1?(c(),setTimeout(d,n)):o.transition(n,c,d);return}window.requestAnimationFrame(()=>{let[c,d]=x.getSticky(i,"classes",[[],[]]),u=t.filter(m=>c.indexOf(m)<0&&!i.classList.contains(m)),g=e.filter(m=>d.indexOf(m)<0&&i.classList.contains(m)),f=c.filter(m=>e.indexOf(m)<0).concat(u),p=d.filter(m=>t.indexOf(m)<0).concat(g);x.putSticky(i,"classes",m=>(m.classList.remove(...p),m.classList.add(...f),[f,p]))})},setOrRemoveAttrs(i,t,e){let[s,n]=x.getSticky(i,"attrs",[[],[]]),o=t.map(([l,h])=>l).concat(e),r=s.filter(([l,h])=>!o.includes(l)).concat(t),a=n.filter(l=>!o.includes(l)).concat(e);x.putSticky(i,"attrs",l=>(a.forEach(h=>l.removeAttribute(h)),r.forEach(([h,c])=>l.setAttribute(h,c)),[r,a]))},hasAllClasses(i,t){return t.every(e=>i.classList.contains(e))},isToggledOut(i,t){return!this.isVisible(i)||this.hasAllClasses(i,t)},filterToEls(i,t,{to:e}){let s=()=>{if(typeof e=="string")return document.querySelectorAll(e);if(e.closest){let n=t.closest(e.closest);return n?[n]:[]}else if(e.inner)return t.querySelectorAll(e.inner)};return e?i.jsQuerySelectorAll(t,e,s):[t]},defaultDisplay(i){return{tr:"table-row",td:"table-cell"}[i.tagName.toLowerCase()]||"block"},transitionClasses(i){if(!i)return null;let[t,e,s]=Array.isArray(i)?i:[i.split(" "),[],[]];return t=Array.isArray(t)?t:t.split(" "),e=Array.isArray(e)?e:e.split(" "),s=Array.isArray(s)?s:s.split(" "),[t,e,s]}},$=Yf,Qn="hookId",Jf=1,Ii=class{static makeID(){return Jf++}static elementID(i){return x.private(i,Qn)}constructor(i,t,e){this.el=t,this.__attachView(i),this.__callbacks=e,this.__listeners=new Set,this.__isDisconnected=!1,x.putPrivate(this.el,Qn,this.constructor.makeID());for(let s in this.__callbacks)this[s]=this.__callbacks[s]}__attachView(i){i?(this.__view=()=>i,this.liveSocket=i.liveSocket):(this.__view=()=>{throw new Error(`hook not yet attached to a live view: ${this.el.outerHTML}`)},this.liveSocket=null)}__mounted(){this.mounted&&this.mounted()}__updated(){this.updated&&this.updated()}__beforeUpdate(){this.beforeUpdate&&this.beforeUpdate()}__destroyed(){this.destroyed&&this.destroyed(),x.deletePrivate(this.el,Qn)}__reconnected(){this.__isDisconnected&&(this.__isDisconnected=!1,this.reconnected&&this.reconnected())}__disconnected(){this.__isDisconnected=!0,this.disconnected&&this.disconnected()}js(){let i=this;return{exec(t){i.__view().liveSocket.execJS(i.el,t,"hook")},show(t,e={}){let s=i.__view().liveSocket.owner(t);$.show("hook",s,t,e.display,e.transition,e.time,e.blocking)},hide(t,e={}){let s=i.__view().liveSocket.owner(t);$.hide("hook",s,t,null,e.transition,e.time,e.blocking)},toggle(t,e={}){let s=i.__view().liveSocket.owner(t);e.in=$.transitionClasses(e.in),e.out=$.transitionClasses(e.out),$.toggle("hook",s,t,e.display,e.in,e.out,e.time,e.blocking)},addClass(t,e,s={}){e=Array.isArray(e)?e:e.split(" ");let n=i.__view().liveSocket.owner(t);$.addOrRemoveClasses(t,e,[],s.transition,s.time,n,s.blocking)},removeClass(t,e,s={}){s.transition=$.transitionClasses(s.transition),e=Array.isArray(e)?e:e.split(" ");let n=i.__view().liveSocket.owner(t);$.addOrRemoveClasses(t,[],e,s.transition,s.time,n,s.blocking)},toggleClass(t,e,s={}){s.transition=$.transitionClasses(s.transition),e=Array.isArray(e)?e:e.split(" ");let n=i.__view().liveSocket.owner(t);$.toggleClasses(t,e,s.transition,s.time,n,s.blocking)},transition(t,e,s={}){let n=i.__view().liveSocket.owner(t);$.addOrRemoveClasses(t,[],[],$.transitionClasses(e),s.time,n,s.blocking)},setAttribute(t,e,s){$.setOrRemoveAttrs(t,[[e,s]],[])},removeAttribute(t,e){$.setOrRemoveAttrs(t,[],[e])},toggleAttribute(t,e,s,n){$.toggleAttr(t,e,s,n)}}}pushEvent(i,t={},e){return e===void 0?new Promise((s,n)=>{try{this.__view().pushHookEvent(this.el,null,i,t,(r,a)=>s(r))===!1&&n(new Error("unable to push hook event. LiveView not connected"))}catch(o){n(o)}}):this.__view().pushHookEvent(this.el,null,i,t,e)}pushEventTo(i,t,e={},s){return s===void 0?new Promise((n,o)=>{try{this.__view().withinTargets(i,(r,a)=>{r.pushHookEvent(this.el,a,t,e,(h,c)=>n(h))===!1&&o(new Error("unable to push hook event. LiveView not connected"))})}catch(r){o(r)}}):this.__view().withinTargets(i,(n,o)=>n.pushHookEvent(this.el,o,t,e,s))}handleEvent(i,t){let e=(s,n)=>n?i:t(s.detail);return window.addEventListener(`phx:${i}`,e),this.__listeners.add(e),e}removeHandleEvent(i){let t=i(null,!0);window.removeEventListener(`phx:${t}`,i),this.__listeners.delete(i)}upload(i,t){return this.__view().dispatchUploads(null,i,t)}uploadTo(i,t,e){return this.__view().withinTargets(i,(s,n)=>{s.dispatchUploads(n,t,e)})}__cleanup__(){this.__listeners.forEach(i=>this.removeHandleEvent(i))}},qf=(i,t)=>{let e=i.endsWith("[]"),s=e?i.slice(0,-2):i;return s=s.replace(/([^\[\]]+)(\]?$)/,`${t}$1$2`),e&&(s+="[]"),s},Rs=(i,t,e=[])=>{let{submitter:s}=t,n;if(s&&s.name){let c=document.createElement("input");c.type="hidden";let d=s.getAttribute("form");d&&c.setAttribute("form",d),c.name=s.name,c.value=s.value,s.parentElement.insertBefore(c,s),n=c}let o=new FormData(i),r=[];o.forEach((c,d,u)=>{c instanceof File&&r.push(d)}),r.forEach(c=>o.delete(c));let a=new URLSearchParams,{inputsUnused:l,onlyHiddenInputs:h}=Array.from(i.elements).reduce((c,d)=>{let{inputsUnused:u,onlyHiddenInputs:g}=c,f=d.name;if(!f)return c;u[f]===void 0&&(u[f]=!0),g[f]===void 0&&(g[f]=!0);let p=x.private(d,Ls)||x.private(d,Hi),m=d.type==="hidden";return u[f]=u[f]&&!p,g[f]=g[f]&&m,c},{inputsUnused:{},onlyHiddenInputs:{}});for(let[c,d]of o.entries())if(e.length===0||e.indexOf(c)>=0){let u=l[c],g=h[c];u&&!(s&&s.name==c)&&!g&&a.append(qf(c,"_unused_"),""),a.append(c,d)}return s&&n&&s.parentElement.removeChild(n),a.toString()},Kf=class ll{static closestView(t){let e=t.closest(Ce);return e?x.private(e,"view"):null}constructor(t,e,s,n,o){this.isDead=!1,this.liveSocket=e,this.flash=n,this.parent=s,this.root=s?s.root:this,this.el=t,x.putPrivate(this.el,"view",this),this.id=this.el.id,this.ref=0,this.lastAckRef=null,this.childJoins=0,this.loaderTimer=null,this.disconnectedTimer=null,this.pendingDiffs=[],this.pendingForms=new Set,this.redirect=!1,this.href=null,this.joinCount=this.parent?this.parent.joinCount-1:0,this.joinAttempts=0,this.joinPending=!0,this.destroyed=!1,this.joinCallback=function(r){r&&r()},this.stopCallback=function(){},this.pendingJoinOps=this.parent?null:[],this.viewHooks={},this.formSubmits=[],this.children=this.parent?null:{},this.root.children[this.id]={},this.formsForRecovery={},this.channel=this.liveSocket.channel(`lv:${this.id}`,()=>{let r=this.href&&this.expandURL(this.href);return{redirect:this.redirect?r:void 0,url:this.redirect?void 0:r||void 0,params:this.connectParams(o),session:this.getSession(),static:this.getStatic(),flash:this.flash,sticky:this.el.hasAttribute(so)}})}setHref(t){this.href=t}setRedirect(t){this.redirect=!0,this.href=t}isMain(){return this.el.hasAttribute(lo)}connectParams(t){let e=this.liveSocket.params(this.el),s=x.all(document,`[${this.binding(ef)}]`).map(n=>n.src||n.href).filter(n=>typeof n=="string");return s.length>0&&(e._track_static=s),e._mounts=this.joinCount,e._mount_attempts=this.joinAttempts,e._live_referer=t,this.joinAttempts++,e}isConnected(){return this.channel.canPush()}getSession(){return this.el.getAttribute(Ht)}getStatic(){let t=this.el.getAttribute(Se);return t===""?null:t}destroy(t=function(){}){this.destroyAllChildren(),this.destroyed=!0,delete this.root.children[this.id],this.parent&&delete this.root.children[this.parent.id][this.id],clearTimeout(this.loaderTimer);let e=()=>{t();for(let s in this.viewHooks)this.destroyHook(this.viewHooks[s])};x.markPhxChildDestroyed(this.el),this.log("destroyed",()=>["the child has been removed from the parent"]),this.channel.leave().receive("ok",e).receive("error",e).receive("timeout",e)}setContainerClasses(...t){this.el.classList.remove(Ta,we,Je,Ea,Pi),this.el.classList.add(...t)}showLoader(t){if(clearTimeout(this.loaderTimer),t)this.loaderTimer=setTimeout(()=>this.showLoader(),t);else{for(let e in this.viewHooks)this.viewHooks[e].__disconnected();this.setContainerClasses(we)}}execAll(t){x.all(this.el,`[${t}]`,e=>this.liveSocket.execJS(e,e.getAttribute(t)))}hideLoader(){clearTimeout(this.loaderTimer),clearTimeout(this.disconnectedTimer),this.setContainerClasses(Ta),this.execAll(this.binding("connected"))}triggerReconnected(){for(let t in this.viewHooks)this.viewHooks[t].__reconnected()}log(t,e){this.liveSocket.log(this,t,e)}transition(t,e,s=function(){}){this.liveSocket.transition(t,e,s)}withinTargets(t,e,s=document,n){if(t instanceof HTMLElement||t instanceof SVGElement)return this.liveSocket.owner(t,o=>e(o,t));if(Yt(t))x.findComponentNodeList(n||this.el,t).length===0?K(`no component found matching phx-target of ${t}`):e(this,parseInt(t));else{let o=Array.from(s.querySelectorAll(t));o.length===0&&K(`nothing found matching the phx-target selector "${t}"`),o.forEach(r=>this.liveSocket.owner(r,a=>e(a,r)))}}applyDiff(t,e,s){this.log(t,()=>["",Os(e)]);let{diff:n,reply:o,events:r,title:a}=Ga.extract(e);s({diff:n,reply:o,events:r}),(typeof a=="string"||t=="mount")&&window.requestAnimationFrame(()=>x.putTitle(a))}onJoin(t){let{rendered:e,container:s,liveview_version:n}=t;if(s){let[o,r]=s;this.el=x.replaceRootContainer(this.el,o,r)}this.childJoins=0,this.joinPending=!0,this.flash=null,this.root===this&&(this.formsForRecovery=this.getFormsForRecovery()),this.isMain()&&window.history.state===null&&gt.pushState("replace",{type:"patch",id:this.id,position:this.liveSocket.currentHistoryPosition}),n!==this.liveSocket.version()&&console.error(`LiveView asset version mismatch. JavaScript version ${this.liveSocket.version()} vs. server ${n}. To avoid issues, please ensure that your assets use the same version as the server.`),gt.dropLocal(this.liveSocket.localStorage,window.location.pathname,tl),this.applyDiff("mount",e,({diff:o,events:r})=>{this.rendered=new Ga(this.id,o);let[a,l]=this.renderContainer(null,"join");this.dropPendingRefs(),this.joinCount++,this.joinAttempts=0,this.maybeRecoverForms(a,()=>{this.onJoinComplete(t,a,l,r)})})}dropPendingRefs(){x.all(document,`[${kt}="${this.refSrc()}"]`,t=>{t.removeAttribute(Ge),t.removeAttribute(kt),t.removeAttribute(Q)})}onJoinComplete({live_patch:t},e,s,n){if(this.joinCount>1||this.parent&&!this.parent.isJoinPending())return this.applyJoinPatch(t,e,s,n);x.findPhxChildrenInFragment(e,this.id).filter(r=>{let a=r.id&&this.el.querySelector(`[id="${r.id}"]`),l=a&&a.getAttribute(Se);return l&&r.setAttribute(Se,l),a&&a.setAttribute(le,this.root.id),this.joinChild(r)}).length===0?this.parent?(this.root.pendingJoinOps.push([this,()=>this.applyJoinPatch(t,e,s,n)]),this.parent.ackJoin(this)):(this.onAllChildJoinsComplete(),this.applyJoinPatch(t,e,s,n)):this.root.pendingJoinOps.push([this,()=>this.applyJoinPatch(t,e,s,n)])}attachTrueDocEl(){this.el=x.byId(this.id),this.el.setAttribute(le,this.root.id)}execNewMounted(t=this.el){let e=this.binding(eo),s=this.binding(io);x.all(t,`[${e}], [${s}]`,n=>{this.ownsElement(n)&&(x.maintainPrivateHooks(n,n,e,s),this.maybeAddNewHook(n))}),x.all(t,`[${this.binding(Mi)}], [data-phx-${Mi}]`,n=>{this.ownsElement(n)&&this.maybeAddNewHook(n)}),x.all(t,`[${this.binding(Oa)}]`,n=>{this.ownsElement(n)&&this.maybeMounted(n)})}applyJoinPatch(t,e,s,n){this.attachTrueDocEl();let o=new Es(this,this.el,this.id,e,s,null);if(o.markPrunableContentForRemoval(),this.performPatch(o,!1,!0),this.joinNewChildren(),this.execNewMounted(),this.joinPending=!1,this.liveSocket.dispatchEvents(n),this.applyPendingUpdates(),t){let{kind:r,to:a}=t;this.liveSocket.historyPatch(a,r)}this.hideLoader(),this.joinCount>1&&this.triggerReconnected(),this.stopCallback()}triggerBeforeUpdateHook(t,e){this.liveSocket.triggerDOM("onBeforeElUpdated",[t,e]);let s=this.getHook(t),n=s&&x.isIgnored(t,this.binding(Fs));if(s&&!t.isEqualNode(e)&&!(n&&wf(t.dataset,e.dataset)))return s.__beforeUpdate(),s}maybeMounted(t){let e=t.getAttribute(this.binding(Oa)),s=e&&x.private(t,"mounted");e&&!s&&(this.liveSocket.execJS(t,e),x.putPrivate(t,"mounted",!0))}maybeAddNewHook(t){let e=this.addHook(t);e&&e.__mounted()}performPatch(t,e,s=!1){let n=[],o=!1,r=new Set;return this.liveSocket.triggerDOM("onPatchStart",[t.targetContainer]),t.after("added",a=>{this.liveSocket.triggerDOM("onNodeAdded",[a]);let l=this.binding(eo),h=this.binding(io);x.maintainPrivateHooks(a,a,l,h),this.maybeAddNewHook(a),a.getAttribute&&this.maybeMounted(a)}),t.after("phxChildAdded",a=>{x.isPhxSticky(a)?this.liveSocket.joinRootViews():o=!0}),t.before("updated",(a,l)=>{this.triggerBeforeUpdateHook(a,l)&&r.add(a.id)}),t.after("updated",a=>{r.has(a.id)&&this.getHook(a).__updated()}),t.after("discarded",a=>{a.nodeType===Node.ELEMENT_NODE&&n.push(a)}),t.after("transitionsDiscarded",a=>this.afterElementsRemoved(a,e)),t.perform(s),this.afterElementsRemoved(n,e),this.liveSocket.triggerDOM("onPatchEnd",[t.targetContainer]),o}afterElementsRemoved(t,e){let s=[];t.forEach(n=>{let o=x.all(n,`[${Jt}]`),r=x.all(n,`[${this.binding(Mi)}], [data-phx-hook]`);o.concat(n).forEach(a=>{let l=this.componentID(a);Yt(l)&&s.indexOf(l)===-1&&s.push(l)}),r.concat(n).forEach(a=>{let l=this.getHook(a);l&&this.destroyHook(l)})}),e&&this.maybePushComponentsDestroyed(s)}joinNewChildren(){x.findPhxChildren(this.el,this.id).forEach(t=>this.joinChild(t))}maybeRecoverForms(t,e){let s=this.binding("change"),n=this.root.formsForRecovery,o=document.createElement("template");o.innerHTML=t;let r=o.content.firstElementChild;r.id=this.id,r.setAttribute(le,this.root.id),r.setAttribute(Ht,this.getSession()),r.setAttribute(Se,this.getStatic()),r.setAttribute(Ae,this.parent?this.parent.id:null);let a=x.all(o.content,"form").filter(l=>l.id&&n[l.id]).filter(l=>!this.pendingForms.has(l.id)).filter(l=>n[l.id].getAttribute(s)===l.getAttribute(s)).map(l=>[n[l.id],l]);if(a.length===0)return e();a.forEach(([l,h],c)=>{this.pendingForms.add(h.id),this.pushFormRecovery(l,h,o.content.firstElementChild,()=>{this.pendingForms.delete(h.id),c===a.length-1&&e()})})}getChildById(t){return this.root.children[this.id][t]}getDescendentByEl(t){return t.id===this.id?this:this.children[t.getAttribute(Ae)]?.[t.id]}destroyDescendent(t){for(let e in this.root.children)for(let s in this.root.children[e])if(s===t)return this.root.children[e][s].destroy()}joinChild(t){if(!this.getChildById(t.id)){let s=new ll(t,this.liveSocket,this);return this.root.children[this.id][s.id]=s,s.join(),this.childJoins++,!0}}isJoinPending(){return this.joinPending}ackJoin(t){this.childJoins--,this.childJoins===0&&(this.parent?this.parent.ackJoin(this):this.onAllChildJoinsComplete())}onAllChildJoinsComplete(){this.pendingForms.clear(),this.formsForRecovery={},this.joinCallback(()=>{this.pendingJoinOps.forEach(([t,e])=>{t.isDestroyed()||e()}),this.pendingJoinOps=[]})}update(t,e){if(this.isJoinPending()||this.liveSocket.hasPendingLink()&&this.root.isMain())return this.pendingDiffs.push({diff:t,events:e});this.rendered.mergeDiff(t);let s=!1;this.rendered.isComponentOnlyDiff(t)?this.liveSocket.time("component patch complete",()=>{x.findExistingParentCIDs(this.el,this.rendered.componentCIDs(t)).forEach(o=>{this.componentPatch(this.rendered.getComponent(t,o),o)&&(s=!0)})}):Va(t)||this.liveSocket.time("full patch complete",()=>{let[n,o]=this.renderContainer(t,"update"),r=new Es(this,this.el,this.id,n,o,null);s=this.performPatch(r,!0)}),this.liveSocket.dispatchEvents(e),s&&this.joinNewChildren()}renderContainer(t,e){return this.liveSocket.time(`toString diff (${e})`,()=>{let s=this.el.tagName,n=t?this.rendered.componentCIDs(t):null,[o,r]=this.rendered.toString(n);return[`<${s}>${o}</${s}>`,r]})}componentPatch(t,e){if(Va(t))return!1;let[s,n]=this.rendered.componentToString(e),o=new Es(this,this.el,this.id,s,n,e);return this.performPatch(o,!0)}getHook(t){return this.viewHooks[Ii.elementID(t)]}addHook(t){let e=Ii.elementID(t);if(!(t.getAttribute&&!this.ownsElement(t)))if(e&&!this.viewHooks[e]){let s=x.getCustomElHook(t)||K(`no hook found for custom element: ${t.id}`);return this.viewHooks[e]=s,s.__attachView(this),s}else{if(e||!t.getAttribute)return;{let s=t.getAttribute(`data-phx-${Mi}`)||t.getAttribute(this.binding(Mi)),n=this.liveSocket.getHookCallbacks(s);if(n){t.id||K(`no DOM ID for hook "${s}". Hooks require a unique ID on each element.`,t);let o=new Ii(this,t,n);return this.viewHooks[Ii.elementID(o.el)]=o,o}else s!==null&&K(`unknown hook found for "${s}"`,t)}}}destroyHook(t){let e=Ii.elementID(t.el);t.__destroyed(),t.__cleanup__(),delete this.viewHooks[e]}applyPendingUpdates(){this.liveSocket.hasPendingLink()&&this.root.isMain()||(this.pendingDiffs.forEach(({diff:t,events:e})=>this.update(t,e)),this.pendingDiffs=[],this.eachChild(t=>t.applyPendingUpdates()))}eachChild(t){let e=this.root.children[this.id]||{};for(let s in e)t(this.getChildById(s))}onChannel(t,e){this.liveSocket.onChannel(this.channel,t,s=>{this.isJoinPending()?this.root.pendingJoinOps.push([this,()=>e(s)]):this.liveSocket.requestDOMUpdate(()=>e(s))})}bindChannel(){this.liveSocket.onChannel(this.channel,"diff",t=>{this.liveSocket.requestDOMUpdate(()=>{this.applyDiff("update",t,({diff:e,events:s})=>this.update(e,s))})}),this.onChannel("redirect",({to:t,flash:e})=>this.onRedirect({to:t,flash:e})),this.onChannel("live_patch",t=>this.onLivePatch(t)),this.onChannel("live_redirect",t=>this.onLiveRedirect(t)),this.channel.onError(t=>this.onError(t)),this.channel.onClose(t=>this.onClose(t))}destroyAllChildren(){this.eachChild(t=>t.destroy())}onLiveRedirect(t){let{to:e,kind:s,flash:n}=t,o=this.expandURL(e),r=new CustomEvent("phx:server-navigate",{detail:{to:e,kind:s,flash:n}});this.liveSocket.historyRedirect(r,o,s,n)}onLivePatch(t){let{to:e,kind:s}=t;this.href=this.expandURL(e),this.liveSocket.historyPatch(e,s)}expandURL(t){return t.startsWith("/")?`${window.location.protocol}//${window.location.host}${t}`:t}onRedirect({to:t,flash:e,reloadToken:s}){this.liveSocket.redirect(t,e,s)}isDestroyed(){return this.destroyed}joinDead(){this.isDead=!0}joinPush(){return this.joinPush=this.joinPush||this.channel.join(),this.joinPush}join(t){this.showLoader(this.liveSocket.loaderTimeout),this.bindChannel(),this.isMain()&&(this.stopCallback=this.liveSocket.withPageLoading({to:this.href,kind:"initial"})),this.joinCallback=e=>{e=e||function(){},t?t(this.joinCount,e):e()},this.wrapPush(()=>this.channel.join(),{ok:e=>this.liveSocket.requestDOMUpdate(()=>this.onJoin(e)),error:e=>this.onJoinError(e),timeout:()=>this.onJoinError({reason:"timeout"})})}onJoinError(t){if(t.reason==="reload"){this.log("error",()=>[`failed mount with ${t.status}. Falling back to page reload`,t]),this.onRedirect({to:this.root.href,reloadToken:t.token});return}else if(t.reason==="unauthorized"||t.reason==="stale"){this.log("error",()=>["unauthorized live_redirect. Falling back to page request",t]),this.onRedirect({to:this.root.href,flash:this.flash});return}if((t.redirect||t.live_redirect)&&(this.joinPending=!1,this.channel.leave()),t.redirect)return this.onRedirect(t.redirect);if(t.live_redirect)return this.onLiveRedirect(t.live_redirect);if(this.log("error",()=>["unable to join",t]),this.isMain())this.displayError([we,Je,Pi]),this.liveSocket.isConnected()&&this.liveSocket.reloadWithJitter(this);else{this.joinAttempts>=Ia&&(this.root.displayError([we,Je,Pi]),this.log("error",()=>[`giving up trying to mount after ${Ia} tries`,t]),this.destroy());let e=x.byId(this.el.id);e?(x.mergeAttrs(e,this.el),this.displayError([we,Je,Pi]),this.el=e):this.destroy()}}onClose(t){if(!this.isDestroyed()){if(this.isMain()&&this.liveSocket.hasPendingLink()&&t!=="leave")return this.liveSocket.reloadWithJitter(this);this.destroyAllChildren(),this.liveSocket.dropActiveElement(this),document.activeElement&&document.activeElement.blur(),this.liveSocket.isUnloaded()&&this.showLoader(uf)}}onError(t){this.onClose(t),this.liveSocket.isConnected()&&this.log("error",()=>["view crashed",t]),this.liveSocket.isUnloaded()||(this.liveSocket.isConnected()?this.displayError([we,Je,Pi]):this.displayError([we,Je,Ea]))}displayError(t){this.isMain()&&x.dispatchEvent(window,"phx:page-loading-start",{detail:{to:this.href,kind:"error"}}),this.showLoader(),this.setContainerClasses(...t),this.delayedDisconnected()}delayedDisconnected(){this.disconnectedTimer=setTimeout(()=>{this.execAll(this.binding("disconnected"))},this.liveSocket.disconnectedTimeout)}wrapPush(t,e){let s=this.liveSocket.getLatencySim(),n=s?o=>setTimeout(()=>!this.isDestroyed()&&o(),s):o=>!this.isDestroyed()&&o();n(()=>{t().receive("ok",o=>n(()=>e.ok&&e.ok(o))).receive("error",o=>n(()=>e.error&&e.error(o))).receive("timeout",()=>n(()=>e.timeout&&e.timeout()))})}pushWithReply(t,e,s){if(!this.isConnected())return Promise.reject({error:"noconnection"});let[n,[o],r]=t?t():[null,[],{}],a=this.joinCount,l=function(){};return r.page_loading&&(l=this.liveSocket.withPageLoading({kind:"element",target:o})),typeof s.cid!="number"&&delete s.cid,new Promise((h,c)=>{this.wrapPush(()=>this.channel.push(e,s,pf),{ok:d=>{n!==null&&(this.lastAckRef=n);let u=g=>{d.redirect&&this.onRedirect(d.redirect),d.live_patch&&this.onLivePatch(d.live_patch),d.live_redirect&&this.onLiveRedirect(d.live_redirect),l(),h({resp:d,reply:g})};d.diff?this.liveSocket.requestDOMUpdate(()=>{this.applyDiff("update",d.diff,({diff:g,reply:f,events:p})=>{n!==null&&this.undoRefs(n,s.event),this.update(g,p),u(f)})}):(n!==null&&this.undoRefs(n,s.event),u(null))},error:d=>c({error:d}),timeout:()=>{c({timeout:!0}),this.joinCount===a&&this.liveSocket.reloadWithJitter(this,()=>{this.log("timeout",()=>["received timeout while communicating with server. Falling back to hard refresh for recovery"])})}})})}undoRefs(t,e,s){if(!this.isConnected())return;let n=`[${kt}="${this.refSrc()}"]`;s?(s=new Set(s),x.all(document,n,o=>{s&&!s.has(o)||(x.all(o,n,r=>this.undoElRef(r,t,e)),this.undoElRef(o,t,e))})):x.all(document,n,o=>this.undoElRef(o,t,e))}undoElRef(t,e,s){new ro(t).maybeUndo(e,s,o=>{let r=new Es(this,t,this.id,o,[],null,{undoRef:e}),a=this.performPatch(r,!0);x.all(t,`[${kt}="${this.refSrc()}"]`,l=>this.undoElRef(l,e,s)),a&&this.joinNewChildren()})}refSrc(){return this.el.id}putRef(t,e,s,n={}){let o=this.ref++,r=this.binding(Ra);if(n.loading){let a=x.all(document,n.loading).map(l=>({el:l,lock:!0,loading:!0}));t=t.concat(a)}for(let{el:a,lock:l,loading:h}of t){if(!l&&!h)throw new Error("putRef requires lock or loading");if(a.setAttribute(kt,this.refSrc()),h&&a.setAttribute(Ge,o),l&&a.setAttribute(Q,o),!h||n.submitter&&!(a===n.submitter||a===n.form))continue;let c=new Promise(f=>{a.addEventListener(`phx:undo-lock:${o}`,()=>f(g),{once:!0})}),d=new Promise(f=>{a.addEventListener(`phx:undo-loading:${o}`,()=>f(g),{once:!0})});a.classList.add(`phx-${s}-loading`);let u=a.getAttribute(r);u!==null&&(a.getAttribute(Is)||a.setAttribute(Is,a.innerText),u!==""&&(a.innerText=u),a.setAttribute(Ke,a.getAttribute(Ke)||a.disabled),a.setAttribute("disabled",""));let g={event:e,eventType:s,ref:o,isLoading:h,isLocked:l,lockElements:t.filter(({lock:f})=>f).map(({el:f})=>f),loadingElements:t.filter(({loading:f})=>f).map(({el:f})=>f),unlock:f=>{f=Array.isArray(f)?f:[f],this.undoRefs(o,e,f)},lockComplete:c,loadingComplete:d,lock:f=>new Promise(p=>{if(this.isAcked(o))return p(g);f.setAttribute(Q,o),f.setAttribute(kt,this.refSrc()),f.addEventListener(`phx:lock-stop:${o}`,()=>p(g),{once:!0})})};a.dispatchEvent(new CustomEvent("phx:push",{detail:g,bubbles:!0,cancelable:!1})),e&&a.dispatchEvent(new CustomEvent(`phx:push:${e}`,{detail:g,bubbles:!0,cancelable:!1}))}return[o,t.map(({el:a})=>a),n]}isAcked(t){return this.lastAckRef!==null&&this.lastAckRef>=t}componentID(t){let e=t.getAttribute&&t.getAttribute(Jt);return e?parseInt(e):null}targetComponentID(t,e,s={}){if(Yt(e))return e;let n=s.target||t.getAttribute(this.binding("target"));return Yt(n)?parseInt(n):e&&(n!==null||s.target)?this.closestComponentID(e):null}closestComponentID(t){return Yt(t)?t:t?ae(t.closest(`[${Jt}]`),e=>this.ownsElement(e)&&this.componentID(e)):null}pushHookEvent(t,e,s,n,o){if(!this.isConnected())return this.log("hook",()=>["unable to push hook event. LiveView not connected",s,n]),!1;let[r,a,l]=this.putRef([{el:t,loading:!0,lock:!0}],s,"hook");return this.pushWithReply(()=>[r,a,l],"event",{type:"hook",event:s,value:n,cid:this.closestComponentID(e)}).then(({resp:h,reply:c})=>o(c,r)),r}extractMeta(t,e,s){let n=this.binding("value-");for(let o=0;o<t.attributes.length;o++){e||(e={});let r=t.attributes[o].name;r.startsWith(n)&&(e[r.replace(n,"")]=t.getAttribute(r))}if(t.value!==void 0&&!(t instanceof HTMLFormElement)&&(e||(e={}),e.value=t.value,t.tagName==="INPUT"&&ol.indexOf(t.type)>=0&&!t.checked&&delete e.value),s){e||(e={});for(let o in s)e[o]=s[o]}return e}pushEvent(t,e,s,n,o,r={},a){this.pushWithReply(()=>this.putRef([{el:e,loading:!0,lock:!0}],n,t,r),"event",{type:t,event:n,value:this.extractMeta(e,o,r.value),cid:this.targetComponentID(e,s,r)}).then(({reply:l})=>a&&a(l)).catch(l=>K("Failed to push event",l))}pushFileProgress(t,e,s,n=function(){}){this.liveSocket.withinOwners(t.form,(o,r)=>{o.pushWithReply(null,"progress",{event:t.getAttribute(o.binding(cf)),ref:t.getAttribute(qt),entry_ref:e,progress:s,cid:o.targetComponentID(t.form,r)}).then(({resp:a})=>n(a)).catch(a=>K("Failed to push file progress",a))})}pushInput(t,e,s,n,o,r){if(!t.form)throw new Error("form events require the input to be inside a form");let a,l=Yt(s)?s:this.targetComponentID(t.form,e,o),h=()=>this.putRef([{el:t,loading:!0,lock:!0},{el:t.form,loading:!0,lock:!0}],n,"change",o),c,d=this.extractMeta(t.form,{},o.value),u={};t instanceof HTMLButtonElement&&(u.submitter=t),t.getAttribute(this.binding("change"))?c=Rs(t.form,u,[t.name]):c=Rs(t.form,u),x.isUploadInput(t)&&t.files&&t.files.length>0&&et.trackFiles(t,Array.from(t.files)),a=et.serializeUploads(t);let g={type:"form",event:n,value:c,meta:{_target:o._target||"undefined",...d},uploads:a,cid:l};this.pushWithReply(h,"event",g).then(({resp:f})=>{x.isUploadInput(t)&&x.isAutoUpload(t)?ro.onUnlock(t,()=>{if(et.filesAwaitingPreflight(t).length>0){let[p,m]=h();this.undoRefs(p,n,[t.form]),this.uploadFiles(t.form,n,e,p,l,v=>{r&&r(f),this.triggerAwaitingSubmit(t.form,n),this.undoRefs(p,n)})}}):r&&r(f)}).catch(f=>K("Failed to push input event",f))}triggerAwaitingSubmit(t,e){let s=this.getScheduledSubmit(t);if(s){let[n,o,r,a]=s;this.cancelSubmit(t,e),a()}}getScheduledSubmit(t){return this.formSubmits.find(([e,s,n,o])=>e.isSameNode(t))}scheduleSubmit(t,e,s,n){if(this.getScheduledSubmit(t))return!0;this.formSubmits.push([t,e,s,n])}cancelSubmit(t,e){this.formSubmits=this.formSubmits.filter(([s,n,o,r])=>s.isSameNode(t)?(this.undoRefs(n,e),!1):!0)}disableForm(t,e,s={}){let n=f=>!(Fi(f,`${this.binding(Fs)}=ignore`,f.form)||Fi(f,"data-phx-update=ignore",f.form)),o=f=>f.hasAttribute(this.binding(Ra)),r=f=>f.tagName=="BUTTON",a=f=>["INPUT","TEXTAREA","SELECT"].includes(f.tagName),l=Array.from(t.elements),h=l.filter(o),c=l.filter(r).filter(n),d=l.filter(a).filter(n);c.forEach(f=>{f.setAttribute(Ke,f.disabled),f.disabled=!0}),d.forEach(f=>{f.setAttribute(no,f.readOnly),f.readOnly=!0,f.files&&(f.setAttribute(Ke,f.disabled),f.disabled=!0)});let u=h.concat(c).concat(d).map(f=>({el:f,loading:!0,lock:!0})),g=[{el:t,loading:!0,lock:!1}].concat(u).reverse();return this.putRef(g,e,"submit",s)}pushFormSubmit(t,e,s,n,o,r){let a=()=>this.disableForm(t,s,{...o,form:t,submitter:n}),l=this.targetComponentID(t,e);if(et.hasUploadsInProgress(t)){let[h,c]=a(),d=()=>this.pushFormSubmit(t,e,s,n,o,r);return this.scheduleSubmit(t,h,o,d)}else if(et.inputsAwaitingPreflight(t).length>0){let[h,c]=a(),d=()=>[h,c,o];this.uploadFiles(t,s,e,h,l,u=>{if(et.inputsAwaitingPreflight(t).length>0)return this.undoRefs(h,s);let g=this.extractMeta(t,{},o.value),f=Rs(t,{submitter:n});this.pushWithReply(d,"event",{type:"form",event:s,value:f,meta:g,cid:l}).then(({resp:p})=>r(p)).catch(p=>K("Failed to push form submit",p))})}else if(!(t.hasAttribute(kt)&&t.classList.contains("phx-submit-loading"))){let h=this.extractMeta(t,{},o.value),c=Rs(t,{submitter:n});this.pushWithReply(a,"event",{type:"form",event:s,value:c,meta:h,cid:l}).then(({resp:d})=>r(d)).catch(d=>K("Failed to push form submit",d))}}uploadFiles(t,e,s,n,o,r){let a=this.joinCount,l=et.activeFileInputs(t),h=l.length;l.forEach(c=>{let d=new et(c,this,()=>{h--,h===0&&r()}),u=d.entries().map(f=>f.toPreflightPayload());if(u.length===0){h--;return}let g={ref:c.getAttribute(qt),entries:u,cid:this.targetComponentID(c.form,s)};this.log("upload",()=>["sending preflight request",g]),this.pushWithReply(null,"allow_upload",g).then(({resp:f})=>{if(this.log("upload",()=>["got preflight response",f]),d.entries().forEach(p=>{f.entries&&!f.entries[p.ref]&&this.handleFailedEntryPreflight(p.ref,"failed preflight",d)}),f.error||Object.keys(f.entries).length===0)this.undoRefs(n,e),(f.error||[]).map(([m,v])=>{this.handleFailedEntryPreflight(m,v,d)});else{let p=m=>{this.channel.onError(()=>{this.joinCount===a&&m()})};d.initAdapterUpload(f,p,this.liveSocket)}}).catch(f=>K("Failed to push upload",f))})}handleFailedEntryPreflight(t,e,s){if(s.isAutoUpload()){let n=s.entries().find(o=>o.ref===t.toString());n&&n.cancel()}else s.entries().map(n=>n.cancel());this.log("upload",()=>[`error for entry ${t}`,e])}dispatchUploads(t,e,s){let n=this.targetCtxElement(t)||this.el,o=x.findUploadInputs(n).filter(r=>r.name===e);o.length===0?K(`no live file inputs found matching the name "${e}"`):o.length>1?K(`duplicate live file inputs found matching the name "${e}"`):x.dispatchEvent(o[0],il,{detail:{files:s}})}targetCtxElement(t){if(Yt(t)){let[e]=x.findComponentNodeList(this.el,t);return e}else return t||null}pushFormRecovery(t,e,s,n){let o=this.binding("change"),r=e.getAttribute(this.binding("target"))||e,a=e.getAttribute(this.binding(Da))||e.getAttribute(this.binding("change")),l=Array.from(t.elements).filter(d=>x.isFormInput(d)&&d.name&&!d.hasAttribute(o));if(l.length===0)return;l.forEach(d=>d.hasAttribute(qt)&&et.clearFiles(d));let h=l.find(d=>d.type!=="hidden")||l[0],c=0;this.withinTargets(r,(d,u)=>{let g=this.targetComponentID(e,u);c++;let f=new CustomEvent("phx:form-recovery",{detail:{sourceElement:t}});$.exec(f,"change",a,this,h,["push",{_target:h.name,targetView:d,targetCtx:u,newCid:g,callback:()=>{c--,c===0&&n()}}])},s,s)}pushLinkPatch(t,e,s,n){let o=this.liveSocket.setPendingLink(e),r=t.isTrusted&&t.type!=="popstate",a=s?()=>this.putRef([{el:s,loading:r,lock:!0}],null,"click"):null,l=()=>this.liveSocket.redirect(window.location.href),h=e.startsWith("/")?`${location.protocol}//${location.host}${e}`:e;this.pushWithReply(a,"live_patch",{url:h}).then(({resp:c})=>{this.liveSocket.requestDOMUpdate(()=>{c.link_redirect?this.liveSocket.replaceMain(e,null,n,o):(this.liveSocket.commitPendingLink(o)&&(this.href=e),this.applyPendingUpdates(),n&&n(o))})},({error:c,timeout:d})=>l())}getFormsForRecovery(){if(this.joinCount===0)return{};let t=this.binding("change");return x.all(this.el,`form[${t}]`).filter(e=>e.id).filter(e=>e.elements.length>0).filter(e=>e.getAttribute(this.binding(Da))!=="ignore").map(e=>e.cloneNode(!0)).reduce((e,s)=>(e[s.id]=s,e),{})}maybePushComponentsDestroyed(t){let e=t.filter(s=>x.findComponentNodeList(this.el,s).length===0);e.length>0&&(e.forEach(s=>this.rendered.resetRender(s)),this.pushWithReply(null,"cids_will_destroy",{cids:e}).then(()=>{this.liveSocket.requestDOMUpdate(()=>{let s=e.filter(n=>x.findComponentNodeList(this.el,n).length===0);s.length>0&&this.pushWithReply(null,"cids_destroyed",{cids:s}).then(({resp:n})=>{this.rendered.pruneCIDs(n.cids)}).catch(n=>K("Failed to push components destroyed",n))})}).catch(s=>K("Failed to push components destroyed",s)))}ownsElement(t){let e=t.closest(Ce);return t.getAttribute(Ae)===this.id||e&&e.id===this.id||!e&&this.isDead}submitForm(t,e,s,n,o={}){x.putPrivate(t,Hi,!0),Array.from(t.elements).forEach(a=>x.putPrivate(a,Hi,!0)),this.liveSocket.blurActiveElement(this),this.pushFormSubmit(t,e,s,n,o,()=>{this.liveSocket.restorePreviouslyActiveFocus()})}binding(t){return this.liveSocket.binding(t)}};var hl=class{constructor(i,t,e={}){if(this.unloaded=!1,!t||t.constructor.name==="Object")throw new Error(`
      a phoenix Socket must be provided as the second argument to the LiveSocket constructor. For example:

          import {Socket} from "phoenix"
          import {LiveSocket} from "phoenix_live_view"
          let liveSocket = new LiveSocket("/live", Socket, {...})
      `);this.socket=new t(i,e),this.bindingPrefix=e.bindingPrefix||gf,this.opts=e,this.params=Di(e.params||{}),this.viewLogger=e.viewLogger,this.metadataCallbacks=e.metadata||{},this.defaults=Object.assign(Os(mf),e.defaults||{}),this.activeElement=null,this.prevActive=null,this.silenced=!1,this.main=null,this.outgoingMainEl=null,this.clickStartedAtTarget=null,this.linkRef=1,this.roots={},this.href=window.location.href,this.pendingLink=null,this.currentLocation=Os(window.location),this.hooks=e.hooks||{},this.uploaders=e.uploaders||{},this.loaderTimeout=e.loaderTimeout||df,this.disconnectedTimeout=e.disconnectedTimeout||ff,this.reloadWithJitterTimer=null,this.maxReloads=e.maxReloads||Gu,this.reloadJitterMin=e.reloadJitterMin||Zu,this.reloadJitterMax=e.reloadJitterMax||Qu,this.failsafeJitter=e.failsafeJitter||tf,this.localStorage=e.localStorage||window.localStorage,this.sessionStorage=e.sessionStorage||window.sessionStorage,this.boundTopLevelEvents=!1,this.boundEventNames=new Set,this.serverCloseRef=null,this.domCallbacks=Object.assign({jsQuerySelectorAll:null,onPatchStart:Di(),onPatchEnd:Di(),onNodeAdded:Di(),onBeforeElUpdated:Di()},e.dom||{}),this.transitions=new Gf,this.currentHistoryPosition=parseInt(this.sessionStorage.getItem(Cs))||0,window.addEventListener("pagehide",s=>{this.unloaded=!0}),this.socket.onOpen(()=>{this.isUnloaded()&&window.location.reload()})}version(){return"1.0.11"}isProfileEnabled(){return this.sessionStorage.getItem(qn)==="true"}isDebugEnabled(){return this.sessionStorage.getItem(As)==="true"}isDebugDisabled(){return this.sessionStorage.getItem(As)==="false"}enableDebug(){this.sessionStorage.setItem(As,"true")}enableProfiling(){this.sessionStorage.setItem(qn,"true")}disableDebug(){this.sessionStorage.setItem(As,"false")}disableProfiling(){this.sessionStorage.removeItem(qn)}enableLatencySim(i){this.enableDebug(),console.log("latency simulator enabled for the duration of this browser session. Call disableLatencySim() to disable"),this.sessionStorage.setItem(Kn,i)}disableLatencySim(){this.sessionStorage.removeItem(Kn)}getLatencySim(){let i=this.sessionStorage.getItem(Kn);return i?parseInt(i):null}getSocket(){return this.socket}connect(){window.location.hostname==="localhost"&&!this.isDebugDisabled()&&this.enableDebug();let i=()=>{this.resetReloadStatus(),this.joinRootViews()?(this.bindTopLevelEvents(),this.socket.connect()):this.main?this.socket.connect():this.bindTopLevelEvents({dead:!0}),this.joinDeadView()};["complete","loaded","interactive"].indexOf(document.readyState)>=0?i():document.addEventListener("DOMContentLoaded",()=>i())}disconnect(i){clearTimeout(this.reloadWithJitterTimer),this.serverCloseRef&&(this.socket.off(this.serverCloseRef),this.serverCloseRef=null),this.socket.disconnect(i)}replaceTransport(i){clearTimeout(this.reloadWithJitterTimer),this.socket.replaceTransport(i),this.connect()}execJS(i,t,e=null){let s=new CustomEvent("phx:exec",{detail:{sourceElement:i}});this.owner(i,n=>$.exec(s,e,t,n,i))}execJSHookPush(i,t,e,s){this.withinOwners(i,n=>{let o=new CustomEvent("phx:exec",{detail:{sourceElement:i}});$.exec(o,"hook",t,n,i,["push",{data:e,callback:s}])})}unload(){this.unloaded||(this.main&&this.isConnected()&&this.log(this.main,"socket",()=>["disconnect for page nav"]),this.unloaded=!0,this.destroyAllViews(),this.disconnect())}triggerDOM(i,t){this.domCallbacks[i](...t)}time(i,t){if(!this.isProfileEnabled()||!console.time)return t();console.time(i);let e=t();return console.timeEnd(i),e}log(i,t,e){if(this.viewLogger){let[s,n]=e();this.viewLogger(i,t,s,n)}else if(this.isDebugEnabled()){let[s,n]=e();yf(i,t,s,n)}}requestDOMUpdate(i){this.transitions.after(i)}transition(i,t,e=function(){}){this.transitions.addTransition(i,t,e)}onChannel(i,t,e){i.on(t,s=>{let n=this.getLatencySim();n?setTimeout(()=>e(s),n):e(s)})}reloadWithJitter(i,t){clearTimeout(this.reloadWithJitterTimer),this.disconnect();let e=this.reloadJitterMin,s=this.reloadJitterMax,n=Math.floor(Math.random()*(s-e+1))+e,o=gt.updateLocal(this.localStorage,window.location.pathname,tl,0,r=>r+1);o>=this.maxReloads&&(n=this.failsafeJitter),this.reloadWithJitterTimer=setTimeout(()=>{i.isDestroyed()||i.isConnected()||(i.destroy(),t?t():this.log(i,"join",()=>[`encountered ${o} consecutive reloads`]),o>=this.maxReloads&&this.log(i,"join",()=>[`exceeded ${this.maxReloads} consecutive reloads. Entering failsafe mode`]),this.hasPendingLink()?window.location=this.pendingLink:window.location.reload())},n)}getHookCallbacks(i){return i&&i.startsWith("Phoenix.")?Tf[i.split(".")[1]]:this.hooks[i]}isUnloaded(){return this.unloaded}isConnected(){return this.socket.isConnected()}getBindingPrefix(){return this.bindingPrefix}binding(i){return`${this.getBindingPrefix()}${i}`}channel(i,t){return this.socket.channel(i,t)}joinDeadView(){let i=document.body;if(i&&!this.isPhxView(i)&&!this.isPhxView(document.firstElementChild)){let t=this.newRootView(i);t.setHref(this.getHref()),t.joinDead(),this.main||(this.main=t),window.requestAnimationFrame(()=>{t.execNewMounted(),this.maybeScroll(history.state?.scroll)})}}joinRootViews(){let i=!1;return x.all(document,`${Ce}:not([${Ae}])`,t=>{if(!this.getRootById(t.id)){let e=this.newRootView(t);x.isPhxSticky(t)||e.setHref(this.getHref()),e.join(),t.hasAttribute(lo)&&(this.main=e)}i=!0}),i}redirect(i,t,e){e&&gt.setCookie(La,e,60),this.unload(),gt.redirect(i,t)}replaceMain(i,t,e=null,s=this.setPendingLink(i)){let n=this.currentLocation.href;this.outgoingMainEl=this.outgoingMainEl||this.main.el;let o=x.findPhxSticky(document)||[],r=x.all(this.outgoingMainEl,`[${this.binding("remove")}]`).filter(l=>!x.isChildOfAny(l,o)),a=x.cloneNode(this.outgoingMainEl,"");this.main.showLoader(this.loaderTimeout),this.main.destroy(),this.main=this.newRootView(a,t,n),this.main.setRedirect(i),this.transitionRemoves(r),this.main.join((l,h)=>{l===1&&this.commitPendingLink(s)&&this.requestDOMUpdate(()=>{r.forEach(c=>c.remove()),o.forEach(c=>a.appendChild(c)),this.outgoingMainEl.replaceWith(a),this.outgoingMainEl=null,e&&e(s),h()})})}transitionRemoves(i,t){let e=this.binding("remove"),s=n=>{n.preventDefault(),n.stopImmediatePropagation()};i.forEach(n=>{for(let o of this.boundEventNames)n.addEventListener(o,s,!0);this.execJS(n,n.getAttribute(e),"remove")}),this.requestDOMUpdate(()=>{i.forEach(n=>{for(let o of this.boundEventNames)n.removeEventListener(o,s,!0)}),t&&t()})}isPhxView(i){return i.getAttribute&&i.getAttribute(Ht)!==null}newRootView(i,t,e){let s=new Kf(i,this,null,t,e);return this.roots[s.id]=s,s}owner(i,t){let e=ae(i.closest(Ce),s=>this.getViewByEl(s))||this.main;return e&&t?t(e):e}withinOwners(i,t){this.owner(i,e=>t(e,i))}getViewByEl(i){let t=i.getAttribute(le);return ae(this.getRootById(t),e=>e.getDescendentByEl(i))}getRootById(i){return this.roots[i]}destroyAllViews(){for(let i in this.roots)this.roots[i].destroy(),delete this.roots[i];this.main=null}destroyViewByEl(i){let t=this.getRootById(i.getAttribute(le));t&&t.id===i.id?(t.destroy(),delete this.roots[t.id]):t&&t.destroyDescendent(i.id)}getActiveElement(){return document.activeElement}dropActiveElement(i){this.prevActive&&i.ownsElement(this.prevActive)&&(this.prevActive=null)}restorePreviouslyActiveFocus(){this.prevActive&&this.prevActive!==document.body&&this.prevActive.focus()}blurActiveElement(){this.prevActive=this.getActiveElement(),this.prevActive!==document.body&&this.prevActive.blur()}bindTopLevelEvents({dead:i}={}){this.boundTopLevelEvents||(this.boundTopLevelEvents=!0,this.serverCloseRef=this.socket.onClose(t=>{if(t&&t.code===1e3&&this.main)return this.reloadWithJitter(this.main)}),document.body.addEventListener("click",function(){}),window.addEventListener("pageshow",t=>{t.persisted&&(this.getSocket().disconnect(),this.withPageLoading({to:window.location.href,kind:"redirect"}),window.location.reload())},!0),i||this.bindNav(),this.bindClicks(),i||this.bindForms(),this.bind({keyup:"keyup",keydown:"keydown"},(t,e,s,n,o,r)=>{let a=n.getAttribute(this.binding(hf)),l=t.key&&t.key.toLowerCase();if(a&&a.toLowerCase()!==l)return;let h={key:t.key,...this.eventMeta(e,t,n)};$.exec(t,e,o,s,n,["push",{data:h}])}),this.bind({blur:"focusout",focus:"focusin"},(t,e,s,n,o,r)=>{if(!r){let a={key:t.key,...this.eventMeta(e,t,n)};$.exec(t,e,o,s,n,["push",{data:a}])}}),this.bind({blur:"blur",focus:"focus"},(t,e,s,n,o,r)=>{if(r==="window"){let a=this.eventMeta(e,t,n);$.exec(t,e,o,s,n,["push",{data:a}])}}),this.on("dragover",t=>t.preventDefault()),this.on("drop",t=>{t.preventDefault();let e=ae(Fi(t.target,this.binding(Pa)),o=>o.getAttribute(this.binding(Pa))),s=e&&document.getElementById(e),n=Array.from(t.dataTransfer.files||[]);!s||s.disabled||n.length===0||!(s.files instanceof FileList)||(et.trackFiles(s,n,t.dataTransfer),s.dispatchEvent(new Event("input",{bubbles:!0})))}),this.on(il,t=>{let e=t.target;if(!x.isUploadInput(e))return;let s=Array.from(t.detail.files||[]).filter(n=>n instanceof File||n instanceof Blob);et.trackFiles(e,s),e.dispatchEvent(new Event("input",{bubbles:!0}))}))}eventMeta(i,t,e){let s=this.metadataCallbacks[i];return s?s(t,e):{}}setPendingLink(i){return this.linkRef++,this.pendingLink=i,this.resetReloadStatus(),this.linkRef}resetReloadStatus(){gt.deleteCookie(La)}commitPendingLink(i){return this.linkRef!==i?!1:(this.href=this.pendingLink,this.pendingLink=null,!0)}getHref(){return this.href}hasPendingLink(){return!!this.pendingLink}bind(i,t){for(let e in i){let s=i[e];this.on(s,n=>{let o=this.binding(e),r=this.binding(`window-${e}`),a=n.target.getAttribute&&n.target.getAttribute(o);a?this.debounce(n.target,n,s,()=>{this.withinOwners(n.target,l=>{t(n,e,l,n.target,a,null)})}):x.all(document,`[${r}]`,l=>{let h=l.getAttribute(r);this.debounce(l,n,s,()=>{this.withinOwners(l,c=>{t(n,e,c,l,h,"window")})})})})}}bindClicks(){this.on("mousedown",i=>this.clickStartedAtTarget=i.target),this.bindClick("click","click")}bindClick(i,t){let e=this.binding(t);window.addEventListener(i,s=>{let n=null;s.detail===0&&(this.clickStartedAtTarget=s.target);let o=this.clickStartedAtTarget||s.target;n=Fi(s.target,e),this.dispatchClickAway(s,o),this.clickStartedAtTarget=null;let r=n&&n.getAttribute(e);if(!r){x.isNewPageClick(s,window.location)&&this.unload();return}n.getAttribute("href")==="#"&&s.preventDefault(),!n.hasAttribute(kt)&&this.debounce(n,s,"click",()=>{this.withinOwners(n,a=>{$.exec(s,"click",r,a,n,["push",{data:this.eventMeta("click",s,n)}])})})},!1)}dispatchClickAway(i,t){let e=this.binding("click-away");x.all(document,`[${e}]`,s=>{s.isSameNode(t)||s.contains(t)||this.withinOwners(s,n=>{let o=s.getAttribute(e);$.isVisible(s)&&$.isInViewport(s)&&$.exec(i,"click",o,n,s,["push",{data:this.eventMeta("click",i,i.target)}])})})}bindNav(){if(!gt.canPushState())return;history.scrollRestoration&&(history.scrollRestoration="manual");let i=null;window.addEventListener("scroll",t=>{clearTimeout(i),i=setTimeout(()=>{gt.updateCurrentState(e=>Object.assign(e,{scroll:window.scrollY}))},100)}),window.addEventListener("popstate",t=>{if(!this.registerNewLocation(window.location))return;let{type:e,backType:s,id:n,scroll:o,position:r}=t.state||{},a=window.location.href,l=r>this.currentHistoryPosition;e=l?e:s||e,this.currentHistoryPosition=r||0,this.sessionStorage.setItem(Cs,this.currentHistoryPosition.toString()),x.dispatchEvent(window,"phx:navigate",{detail:{href:a,patch:e==="patch",pop:!0,direction:l?"forward":"backward"}}),this.requestDOMUpdate(()=>{let h=()=>{this.maybeScroll(o)};this.main.isConnected()&&e==="patch"&&n===this.main.id?this.main.pushLinkPatch(t,a,null,h):this.replaceMain(a,null,h)})},!1),window.addEventListener("click",t=>{let e=Fi(t.target,Yn),s=e&&e.getAttribute(Yn);if(!s||!this.isConnected()||!this.main||x.wantsNewTab(t))return;let n=e.href instanceof SVGAnimatedString?e.href.baseVal:e.href,o=e.getAttribute(sf);t.preventDefault(),t.stopImmediatePropagation(),this.pendingLink!==n&&this.requestDOMUpdate(()=>{if(s==="patch")this.pushHistoryPatch(t,n,o,e);else if(s==="redirect")this.historyRedirect(t,n,o,null,e);else throw new Error(`expected ${Yn} to be "patch" or "redirect", got: ${s}`);let r=e.getAttribute(this.binding("click"));r&&this.requestDOMUpdate(()=>this.execJS(e,r,"click"))})},!1)}maybeScroll(i){typeof i=="number"&&requestAnimationFrame(()=>{window.scrollTo(0,i)})}dispatchEvent(i,t={}){x.dispatchEvent(window,`phx:${i}`,{detail:t})}dispatchEvents(i){i.forEach(([t,e])=>this.dispatchEvent(t,e))}withPageLoading(i,t){x.dispatchEvent(window,"phx:page-loading-start",{detail:i});let e=()=>x.dispatchEvent(window,"phx:page-loading-stop",{detail:i});return t?t(e):e}pushHistoryPatch(i,t,e,s){if(!this.isConnected()||!this.main.isMain())return gt.redirect(t);this.withPageLoading({to:t,kind:"patch"},n=>{this.main.pushLinkPatch(i,t,s,o=>{this.historyPatch(t,e,o),n()})})}historyPatch(i,t,e=this.setPendingLink(i)){this.commitPendingLink(e)&&(this.currentHistoryPosition++,this.sessionStorage.setItem(Cs,this.currentHistoryPosition.toString()),gt.updateCurrentState(s=>({...s,backType:"patch"})),gt.pushState(t,{type:"patch",id:this.main.id,position:this.currentHistoryPosition},i),x.dispatchEvent(window,"phx:navigate",{detail:{patch:!0,href:i,pop:!1,direction:"forward"}}),this.registerNewLocation(window.location))}historyRedirect(i,t,e,s,n){let o=n&&i.isTrusted&&i.type!=="popstate";if(o&&n.classList.add("phx-click-loading"),!this.isConnected()||!this.main.isMain())return gt.redirect(t,s);if(/^\/$|^\/[^\/]+.*$/.test(t)){let{protocol:a,host:l}=window.location;t=`${a}//${l}${t}`}let r=window.scrollY;this.withPageLoading({to:t,kind:"redirect"},a=>{this.replaceMain(t,s,l=>{l===this.linkRef&&(this.currentHistoryPosition++,this.sessionStorage.setItem(Cs,this.currentHistoryPosition.toString()),gt.updateCurrentState(h=>({...h,backType:"redirect"})),gt.pushState(e,{type:"redirect",id:this.main.id,scroll:r,position:this.currentHistoryPosition},t),x.dispatchEvent(window,"phx:navigate",{detail:{href:t,patch:!1,pop:!1,direction:"forward"}}),this.registerNewLocation(window.location)),o&&n.classList.remove("phx-click-loading"),a()})})}registerNewLocation(i){let{pathname:t,search:e}=this.currentLocation;return t+e===i.pathname+i.search?!1:(this.currentLocation=Os(i),!0)}bindForms(){let i=0,t=!1;this.on("submit",e=>{let s=e.target.getAttribute(this.binding("submit")),n=e.target.getAttribute(this.binding("change"));!t&&n&&!s&&(t=!0,e.preventDefault(),this.withinOwners(e.target,o=>{o.disableForm(e.target),window.requestAnimationFrame(()=>{x.isUnloadableFormSubmit(e)&&this.unload(),e.target.submit()})}))}),this.on("submit",e=>{let s=e.target.getAttribute(this.binding("submit"));if(!s){x.isUnloadableFormSubmit(e)&&this.unload();return}e.preventDefault(),e.target.disabled=!0,this.withinOwners(e.target,n=>{$.exec(e,"submit",s,n,e.target,["push",{submitter:e.submitter}])})});for(let e of["change","input"])this.on(e,s=>{if(s instanceof CustomEvent&&s.target.form===void 0){if(s.detail&&s.detail.dispatcher)throw new Error(`dispatching a custom ${e} event is only supported on input elements inside a form`);return}let n=this.binding("change"),o=s.target;if(s.isComposing){let g=`composition-listener-${e}`;x.private(o,g)||(x.putPrivate(o,g,!0),o.addEventListener("compositionend",()=>{o.dispatchEvent(new Event(e,{bubbles:!0})),x.deletePrivate(o,g)},{once:!0}));return}let r=o.getAttribute(n),a=o.form&&o.form.getAttribute(n),l=r||a;if(!l||o.type==="number"&&o.validity&&o.validity.badInput)return;let h=r?o:o.form,c=i;i++;let{at:d,type:u}=x.private(o,"prev-iteration")||{};d===c-1&&e==="change"&&u==="input"||(x.putPrivate(o,"prev-iteration",{at:c,type:e}),this.debounce(o,s,e,()=>{this.withinOwners(h,g=>{x.putPrivate(o,Ls,!0),$.exec(s,"change",l,g,o,["push",{_target:s.target.name,dispatcher:h}])})}))});this.on("reset",e=>{let s=e.target;x.resetForm(s);let n=Array.from(s.elements).find(o=>o.type==="reset");n&&window.requestAnimationFrame(()=>{n.dispatchEvent(new Event("input",{bubbles:!0,cancelable:!1}))})})}debounce(i,t,e,s){if(e==="blur"||e==="focusout")return s();let n=this.binding(af),o=this.binding(lf),r=this.defaults.debounce.toString(),a=this.defaults.throttle.toString();this.withinOwners(i,l=>{let h=()=>!l.isDestroyed()&&document.body.contains(i);x.debounce(i,t,n,r,o,a,h,()=>{s()})})}silenceEvents(i){this.silenced=!0,i(),this.silenced=!1}on(i,t){this.boundEventNames.add(i),window.addEventListener(i,e=>{this.silenced||t(e)})}jsQuerySelectorAll(i,t,e){let s=this.domCallbacks.jsQuerySelectorAll;return s?s(i,t,e):e()}},Gf=class{constructor(){this.transitions=new Set,this.pendingOps=[]}reset(){this.transitions.forEach(i=>{clearTimeout(i),this.transitions.delete(i)}),this.flushPendingOps()}after(i){this.size()===0?i():this.pushPendingOp(i)}addTransition(i,t,e){t();let s=setTimeout(()=>{this.transitions.delete(s),e(),this.flushPendingOps()},i);this.transitions.add(s)}pushPendingOp(i){this.pendingOps.push(i)}size(){return this.transitions.size}flushPendingOps(){if(this.size()>0)return;let i=this.pendingOps.shift();i&&(i(),this.flushPendingOps())}};var Zf=document.querySelector("meta[name='csrf-token']").getAttribute("content"),cl=new hl("/live",Ca,{params:{_csrf_token:Zf}});cl.connect();window.liveSocket=cl;})();
/*! Bundled license information:

@kurkle/color/dist/color.esm.js:
  (*!
   * @kurkle/color v0.3.4
   * https://github.com/kurkle/color#readme
   * (c) 2024 Jukka Kurkela
   * Released under the MIT License
   *)

chart.js/dist/chunks/helpers.dataset.js:
  (*!
   * Chart.js v4.4.9
   * https://www.chartjs.org
   * (c) 2025 Chart.js Contributors
   * Released under the MIT License
   *)

chart.js/dist/chart.js:
  (*!
   * Chart.js v4.4.9
   * https://www.chartjs.org
   * (c) 2025 Chart.js Contributors
   * Released under the MIT License
   *)
*/
//# sourceMappingURL=data:application/json;base64,
